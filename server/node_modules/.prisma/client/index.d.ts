
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model JeuxMarque
 * 
 */
export type JeuxMarque = $Result.DefaultSelection<Prisma.$JeuxMarquePayload>
/**
 * Model Jeu
 * 
 */
export type Jeu = $Result.DefaultSelection<Prisma.$JeuPayload>
/**
 * Model Depot
 * 
 */
export type Depot = $Result.DefaultSelection<Prisma.$DepotPayload>
/**
 * Model Vendeur
 * 
 */
export type Vendeur = $Result.DefaultSelection<Prisma.$VendeurPayload>
/**
 * Model DepotJeu
 * 
 */
export type DepotJeu = $Result.DefaultSelection<Prisma.$DepotJeuPayload>
/**
 * Model Achat
 * 
 */
export type Achat = $Result.DefaultSelection<Prisma.$AchatPayload>
/**
 * Model AchatJeu
 * 
 */
export type AchatJeu = $Result.DefaultSelection<Prisma.$AchatJeuPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Utilisateur
 * 
 */
export type Utilisateur = $Result.DefaultSelection<Prisma.$UtilisateurPayload>
/**
 * Model BilanVendeurSession
 * 
 */
export type BilanVendeurSession = $Result.DefaultSelection<Prisma.$BilanVendeurSessionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  Manager: 'Manager',
  Admin: 'Admin'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more JeuxMarques
 * const jeuxMarques = await prisma.jeuxMarque.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more JeuxMarques
   * const jeuxMarques = await prisma.jeuxMarque.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.jeuxMarque`: Exposes CRUD operations for the **JeuxMarque** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JeuxMarques
    * const jeuxMarques = await prisma.jeuxMarque.findMany()
    * ```
    */
  get jeuxMarque(): Prisma.JeuxMarqueDelegate<ExtArgs>;

  /**
   * `prisma.jeu`: Exposes CRUD operations for the **Jeu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jeus
    * const jeus = await prisma.jeu.findMany()
    * ```
    */
  get jeu(): Prisma.JeuDelegate<ExtArgs>;

  /**
   * `prisma.depot`: Exposes CRUD operations for the **Depot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Depots
    * const depots = await prisma.depot.findMany()
    * ```
    */
  get depot(): Prisma.DepotDelegate<ExtArgs>;

  /**
   * `prisma.vendeur`: Exposes CRUD operations for the **Vendeur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendeurs
    * const vendeurs = await prisma.vendeur.findMany()
    * ```
    */
  get vendeur(): Prisma.VendeurDelegate<ExtArgs>;

  /**
   * `prisma.depotJeu`: Exposes CRUD operations for the **DepotJeu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepotJeus
    * const depotJeus = await prisma.depotJeu.findMany()
    * ```
    */
  get depotJeu(): Prisma.DepotJeuDelegate<ExtArgs>;

  /**
   * `prisma.achat`: Exposes CRUD operations for the **Achat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achats
    * const achats = await prisma.achat.findMany()
    * ```
    */
  get achat(): Prisma.AchatDelegate<ExtArgs>;

  /**
   * `prisma.achatJeu`: Exposes CRUD operations for the **AchatJeu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AchatJeus
    * const achatJeus = await prisma.achatJeu.findMany()
    * ```
    */
  get achatJeu(): Prisma.AchatJeuDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.utilisateur`: Exposes CRUD operations for the **Utilisateur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilisateurs
    * const utilisateurs = await prisma.utilisateur.findMany()
    * ```
    */
  get utilisateur(): Prisma.UtilisateurDelegate<ExtArgs>;

  /**
   * `prisma.bilanVendeurSession`: Exposes CRUD operations for the **BilanVendeurSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BilanVendeurSessions
    * const bilanVendeurSessions = await prisma.bilanVendeurSession.findMany()
    * ```
    */
  get bilanVendeurSession(): Prisma.BilanVendeurSessionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    JeuxMarque: 'JeuxMarque',
    Jeu: 'Jeu',
    Depot: 'Depot',
    Vendeur: 'Vendeur',
    DepotJeu: 'DepotJeu',
    Achat: 'Achat',
    AchatJeu: 'AchatJeu',
    Session: 'Session',
    Utilisateur: 'Utilisateur',
    BilanVendeurSession: 'BilanVendeurSession'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "jeuxMarque" | "jeu" | "depot" | "vendeur" | "depotJeu" | "achat" | "achatJeu" | "session" | "utilisateur" | "bilanVendeurSession"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      JeuxMarque: {
        payload: Prisma.$JeuxMarquePayload<ExtArgs>
        fields: Prisma.JeuxMarqueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JeuxMarqueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JeuxMarqueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload>
          }
          findFirst: {
            args: Prisma.JeuxMarqueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JeuxMarqueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload>
          }
          findMany: {
            args: Prisma.JeuxMarqueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload>[]
          }
          create: {
            args: Prisma.JeuxMarqueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload>
          }
          createMany: {
            args: Prisma.JeuxMarqueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JeuxMarqueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload>[]
          }
          delete: {
            args: Prisma.JeuxMarqueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload>
          }
          update: {
            args: Prisma.JeuxMarqueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload>
          }
          deleteMany: {
            args: Prisma.JeuxMarqueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JeuxMarqueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JeuxMarqueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuxMarquePayload>
          }
          aggregate: {
            args: Prisma.JeuxMarqueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJeuxMarque>
          }
          groupBy: {
            args: Prisma.JeuxMarqueGroupByArgs<ExtArgs>
            result: $Utils.Optional<JeuxMarqueGroupByOutputType>[]
          }
          count: {
            args: Prisma.JeuxMarqueCountArgs<ExtArgs>
            result: $Utils.Optional<JeuxMarqueCountAggregateOutputType> | number
          }
        }
      }
      Jeu: {
        payload: Prisma.$JeuPayload<ExtArgs>
        fields: Prisma.JeuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JeuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JeuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload>
          }
          findFirst: {
            args: Prisma.JeuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JeuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload>
          }
          findMany: {
            args: Prisma.JeuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload>[]
          }
          create: {
            args: Prisma.JeuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload>
          }
          createMany: {
            args: Prisma.JeuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JeuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload>[]
          }
          delete: {
            args: Prisma.JeuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload>
          }
          update: {
            args: Prisma.JeuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload>
          }
          deleteMany: {
            args: Prisma.JeuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JeuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JeuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JeuPayload>
          }
          aggregate: {
            args: Prisma.JeuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJeu>
          }
          groupBy: {
            args: Prisma.JeuGroupByArgs<ExtArgs>
            result: $Utils.Optional<JeuGroupByOutputType>[]
          }
          count: {
            args: Prisma.JeuCountArgs<ExtArgs>
            result: $Utils.Optional<JeuCountAggregateOutputType> | number
          }
        }
      }
      Depot: {
        payload: Prisma.$DepotPayload<ExtArgs>
        fields: Prisma.DepotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload>
          }
          findFirst: {
            args: Prisma.DepotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload>
          }
          findMany: {
            args: Prisma.DepotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload>[]
          }
          create: {
            args: Prisma.DepotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload>
          }
          createMany: {
            args: Prisma.DepotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload>[]
          }
          delete: {
            args: Prisma.DepotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload>
          }
          update: {
            args: Prisma.DepotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload>
          }
          deleteMany: {
            args: Prisma.DepotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotPayload>
          }
          aggregate: {
            args: Prisma.DepotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepot>
          }
          groupBy: {
            args: Prisma.DepotGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepotGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepotCountArgs<ExtArgs>
            result: $Utils.Optional<DepotCountAggregateOutputType> | number
          }
        }
      }
      Vendeur: {
        payload: Prisma.$VendeurPayload<ExtArgs>
        fields: Prisma.VendeurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendeurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendeurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload>
          }
          findFirst: {
            args: Prisma.VendeurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendeurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload>
          }
          findMany: {
            args: Prisma.VendeurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload>[]
          }
          create: {
            args: Prisma.VendeurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload>
          }
          createMany: {
            args: Prisma.VendeurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VendeurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload>[]
          }
          delete: {
            args: Prisma.VendeurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload>
          }
          update: {
            args: Prisma.VendeurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload>
          }
          deleteMany: {
            args: Prisma.VendeurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendeurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VendeurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendeurPayload>
          }
          aggregate: {
            args: Prisma.VendeurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVendeur>
          }
          groupBy: {
            args: Prisma.VendeurGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendeurGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendeurCountArgs<ExtArgs>
            result: $Utils.Optional<VendeurCountAggregateOutputType> | number
          }
        }
      }
      DepotJeu: {
        payload: Prisma.$DepotJeuPayload<ExtArgs>
        fields: Prisma.DepotJeuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepotJeuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepotJeuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload>
          }
          findFirst: {
            args: Prisma.DepotJeuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepotJeuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload>
          }
          findMany: {
            args: Prisma.DepotJeuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload>[]
          }
          create: {
            args: Prisma.DepotJeuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload>
          }
          createMany: {
            args: Prisma.DepotJeuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepotJeuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload>[]
          }
          delete: {
            args: Prisma.DepotJeuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload>
          }
          update: {
            args: Prisma.DepotJeuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload>
          }
          deleteMany: {
            args: Prisma.DepotJeuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepotJeuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepotJeuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepotJeuPayload>
          }
          aggregate: {
            args: Prisma.DepotJeuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepotJeu>
          }
          groupBy: {
            args: Prisma.DepotJeuGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepotJeuGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepotJeuCountArgs<ExtArgs>
            result: $Utils.Optional<DepotJeuCountAggregateOutputType> | number
          }
        }
      }
      Achat: {
        payload: Prisma.$AchatPayload<ExtArgs>
        fields: Prisma.AchatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload>
          }
          findFirst: {
            args: Prisma.AchatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload>
          }
          findMany: {
            args: Prisma.AchatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload>[]
          }
          create: {
            args: Prisma.AchatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload>
          }
          createMany: {
            args: Prisma.AchatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload>[]
          }
          delete: {
            args: Prisma.AchatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload>
          }
          update: {
            args: Prisma.AchatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload>
          }
          deleteMany: {
            args: Prisma.AchatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AchatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatPayload>
          }
          aggregate: {
            args: Prisma.AchatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchat>
          }
          groupBy: {
            args: Prisma.AchatGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchatGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchatCountArgs<ExtArgs>
            result: $Utils.Optional<AchatCountAggregateOutputType> | number
          }
        }
      }
      AchatJeu: {
        payload: Prisma.$AchatJeuPayload<ExtArgs>
        fields: Prisma.AchatJeuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchatJeuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchatJeuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload>
          }
          findFirst: {
            args: Prisma.AchatJeuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchatJeuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload>
          }
          findMany: {
            args: Prisma.AchatJeuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload>[]
          }
          create: {
            args: Prisma.AchatJeuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload>
          }
          createMany: {
            args: Prisma.AchatJeuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchatJeuCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload>[]
          }
          delete: {
            args: Prisma.AchatJeuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload>
          }
          update: {
            args: Prisma.AchatJeuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload>
          }
          deleteMany: {
            args: Prisma.AchatJeuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchatJeuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AchatJeuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchatJeuPayload>
          }
          aggregate: {
            args: Prisma.AchatJeuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchatJeu>
          }
          groupBy: {
            args: Prisma.AchatJeuGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchatJeuGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchatJeuCountArgs<ExtArgs>
            result: $Utils.Optional<AchatJeuCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Utilisateur: {
        payload: Prisma.$UtilisateurPayload<ExtArgs>
        fields: Prisma.UtilisateurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilisateurFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilisateurFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findFirst: {
            args: Prisma.UtilisateurFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilisateurFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          findMany: {
            args: Prisma.UtilisateurFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          create: {
            args: Prisma.UtilisateurCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          createMany: {
            args: Prisma.UtilisateurCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UtilisateurCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>[]
          }
          delete: {
            args: Prisma.UtilisateurDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          update: {
            args: Prisma.UtilisateurUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          deleteMany: {
            args: Prisma.UtilisateurDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UtilisateurUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UtilisateurUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UtilisateurPayload>
          }
          aggregate: {
            args: Prisma.UtilisateurAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUtilisateur>
          }
          groupBy: {
            args: Prisma.UtilisateurGroupByArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilisateurCountArgs<ExtArgs>
            result: $Utils.Optional<UtilisateurCountAggregateOutputType> | number
          }
        }
      }
      BilanVendeurSession: {
        payload: Prisma.$BilanVendeurSessionPayload<ExtArgs>
        fields: Prisma.BilanVendeurSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BilanVendeurSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BilanVendeurSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload>
          }
          findFirst: {
            args: Prisma.BilanVendeurSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BilanVendeurSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload>
          }
          findMany: {
            args: Prisma.BilanVendeurSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload>[]
          }
          create: {
            args: Prisma.BilanVendeurSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload>
          }
          createMany: {
            args: Prisma.BilanVendeurSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BilanVendeurSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload>[]
          }
          delete: {
            args: Prisma.BilanVendeurSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload>
          }
          update: {
            args: Prisma.BilanVendeurSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload>
          }
          deleteMany: {
            args: Prisma.BilanVendeurSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BilanVendeurSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BilanVendeurSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilanVendeurSessionPayload>
          }
          aggregate: {
            args: Prisma.BilanVendeurSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBilanVendeurSession>
          }
          groupBy: {
            args: Prisma.BilanVendeurSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<BilanVendeurSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.BilanVendeurSessionCountArgs<ExtArgs>
            result: $Utils.Optional<BilanVendeurSessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type JeuxMarqueCountOutputType
   */

  export type JeuxMarqueCountOutputType = {
    jeuxDepot: number
  }

  export type JeuxMarqueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jeuxDepot?: boolean | JeuxMarqueCountOutputTypeCountJeuxDepotArgs
  }

  // Custom InputTypes
  /**
   * JeuxMarqueCountOutputType without action
   */
  export type JeuxMarqueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarqueCountOutputType
     */
    select?: JeuxMarqueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JeuxMarqueCountOutputType without action
   */
  export type JeuxMarqueCountOutputTypeCountJeuxDepotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JeuWhereInput
  }


  /**
   * Count Type JeuCountOutputType
   */

  export type JeuCountOutputType = {
    achat_jeux: number
    depot_jeux: number
  }

  export type JeuCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    achat_jeux?: boolean | JeuCountOutputTypeCountAchat_jeuxArgs
    depot_jeux?: boolean | JeuCountOutputTypeCountDepot_jeuxArgs
  }

  // Custom InputTypes
  /**
   * JeuCountOutputType without action
   */
  export type JeuCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuCountOutputType
     */
    select?: JeuCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JeuCountOutputType without action
   */
  export type JeuCountOutputTypeCountAchat_jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchatJeuWhereInput
  }

  /**
   * JeuCountOutputType without action
   */
  export type JeuCountOutputTypeCountDepot_jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepotJeuWhereInput
  }


  /**
   * Count Type DepotCountOutputType
   */

  export type DepotCountOutputType = {
    jeux: number
    depot_jeux: number
  }

  export type DepotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jeux?: boolean | DepotCountOutputTypeCountJeuxArgs
    depot_jeux?: boolean | DepotCountOutputTypeCountDepot_jeuxArgs
  }

  // Custom InputTypes
  /**
   * DepotCountOutputType without action
   */
  export type DepotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotCountOutputType
     */
    select?: DepotCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepotCountOutputType without action
   */
  export type DepotCountOutputTypeCountJeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JeuWhereInput
  }

  /**
   * DepotCountOutputType without action
   */
  export type DepotCountOutputTypeCountDepot_jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepotJeuWhereInput
  }


  /**
   * Count Type VendeurCountOutputType
   */

  export type VendeurCountOutputType = {
    depots: number
    BilanVendeurSession: number
  }

  export type VendeurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    depots?: boolean | VendeurCountOutputTypeCountDepotsArgs
    BilanVendeurSession?: boolean | VendeurCountOutputTypeCountBilanVendeurSessionArgs
  }

  // Custom InputTypes
  /**
   * VendeurCountOutputType without action
   */
  export type VendeurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendeurCountOutputType
     */
    select?: VendeurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VendeurCountOutputType without action
   */
  export type VendeurCountOutputTypeCountDepotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepotWhereInput
  }

  /**
   * VendeurCountOutputType without action
   */
  export type VendeurCountOutputTypeCountBilanVendeurSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BilanVendeurSessionWhereInput
  }


  /**
   * Count Type AchatCountOutputType
   */

  export type AchatCountOutputType = {
    achat_jeux: number
  }

  export type AchatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    achat_jeux?: boolean | AchatCountOutputTypeCountAchat_jeuxArgs
  }

  // Custom InputTypes
  /**
   * AchatCountOutputType without action
   */
  export type AchatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatCountOutputType
     */
    select?: AchatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AchatCountOutputType without action
   */
  export type AchatCountOutputTypeCountAchat_jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchatJeuWhereInput
  }


  /**
   * Count Type SessionCountOutputType
   */

  export type SessionCountOutputType = {
    achats: number
    depots: number
    bilanVendeurSessions: number
  }

  export type SessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    achats?: boolean | SessionCountOutputTypeCountAchatsArgs
    depots?: boolean | SessionCountOutputTypeCountDepotsArgs
    bilanVendeurSessions?: boolean | SessionCountOutputTypeCountBilanVendeurSessionsArgs
  }

  // Custom InputTypes
  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountAchatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchatWhereInput
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountDepotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepotWhereInput
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountBilanVendeurSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BilanVendeurSessionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model JeuxMarque
   */

  export type AggregateJeuxMarque = {
    _count: JeuxMarqueCountAggregateOutputType | null
    _avg: JeuxMarqueAvgAggregateOutputType | null
    _sum: JeuxMarqueSumAggregateOutputType | null
    _min: JeuxMarqueMinAggregateOutputType | null
    _max: JeuxMarqueMaxAggregateOutputType | null
  }

  export type JeuxMarqueAvgAggregateOutputType = {
    JeuRef_id: number | null
  }

  export type JeuxMarqueSumAggregateOutputType = {
    JeuRef_id: number | null
  }

  export type JeuxMarqueMinAggregateOutputType = {
    JeuRef_id: number | null
    Nom: string | null
    Editeur: string | null
    Description: string | null
  }

  export type JeuxMarqueMaxAggregateOutputType = {
    JeuRef_id: number | null
    Nom: string | null
    Editeur: string | null
    Description: string | null
  }

  export type JeuxMarqueCountAggregateOutputType = {
    JeuRef_id: number
    Nom: number
    Editeur: number
    Description: number
    _all: number
  }


  export type JeuxMarqueAvgAggregateInputType = {
    JeuRef_id?: true
  }

  export type JeuxMarqueSumAggregateInputType = {
    JeuRef_id?: true
  }

  export type JeuxMarqueMinAggregateInputType = {
    JeuRef_id?: true
    Nom?: true
    Editeur?: true
    Description?: true
  }

  export type JeuxMarqueMaxAggregateInputType = {
    JeuRef_id?: true
    Nom?: true
    Editeur?: true
    Description?: true
  }

  export type JeuxMarqueCountAggregateInputType = {
    JeuRef_id?: true
    Nom?: true
    Editeur?: true
    Description?: true
    _all?: true
  }

  export type JeuxMarqueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JeuxMarque to aggregate.
     */
    where?: JeuxMarqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JeuxMarques to fetch.
     */
    orderBy?: JeuxMarqueOrderByWithRelationInput | JeuxMarqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JeuxMarqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JeuxMarques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JeuxMarques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JeuxMarques
    **/
    _count?: true | JeuxMarqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JeuxMarqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JeuxMarqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JeuxMarqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JeuxMarqueMaxAggregateInputType
  }

  export type GetJeuxMarqueAggregateType<T extends JeuxMarqueAggregateArgs> = {
        [P in keyof T & keyof AggregateJeuxMarque]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJeuxMarque[P]>
      : GetScalarType<T[P], AggregateJeuxMarque[P]>
  }




  export type JeuxMarqueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JeuxMarqueWhereInput
    orderBy?: JeuxMarqueOrderByWithAggregationInput | JeuxMarqueOrderByWithAggregationInput[]
    by: JeuxMarqueScalarFieldEnum[] | JeuxMarqueScalarFieldEnum
    having?: JeuxMarqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JeuxMarqueCountAggregateInputType | true
    _avg?: JeuxMarqueAvgAggregateInputType
    _sum?: JeuxMarqueSumAggregateInputType
    _min?: JeuxMarqueMinAggregateInputType
    _max?: JeuxMarqueMaxAggregateInputType
  }

  export type JeuxMarqueGroupByOutputType = {
    JeuRef_id: number
    Nom: string
    Editeur: string
    Description: string
    _count: JeuxMarqueCountAggregateOutputType | null
    _avg: JeuxMarqueAvgAggregateOutputType | null
    _sum: JeuxMarqueSumAggregateOutputType | null
    _min: JeuxMarqueMinAggregateOutputType | null
    _max: JeuxMarqueMaxAggregateOutputType | null
  }

  type GetJeuxMarqueGroupByPayload<T extends JeuxMarqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JeuxMarqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JeuxMarqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JeuxMarqueGroupByOutputType[P]>
            : GetScalarType<T[P], JeuxMarqueGroupByOutputType[P]>
        }
      >
    >


  export type JeuxMarqueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    JeuRef_id?: boolean
    Nom?: boolean
    Editeur?: boolean
    Description?: boolean
    jeuxDepot?: boolean | JeuxMarque$jeuxDepotArgs<ExtArgs>
    _count?: boolean | JeuxMarqueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jeuxMarque"]>

  export type JeuxMarqueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    JeuRef_id?: boolean
    Nom?: boolean
    Editeur?: boolean
    Description?: boolean
  }, ExtArgs["result"]["jeuxMarque"]>

  export type JeuxMarqueSelectScalar = {
    JeuRef_id?: boolean
    Nom?: boolean
    Editeur?: boolean
    Description?: boolean
  }

  export type JeuxMarqueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jeuxDepot?: boolean | JeuxMarque$jeuxDepotArgs<ExtArgs>
    _count?: boolean | JeuxMarqueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JeuxMarqueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $JeuxMarquePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JeuxMarque"
    objects: {
      jeuxDepot: Prisma.$JeuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      JeuRef_id: number
      Nom: string
      Editeur: string
      Description: string
    }, ExtArgs["result"]["jeuxMarque"]>
    composites: {}
  }

  type JeuxMarqueGetPayload<S extends boolean | null | undefined | JeuxMarqueDefaultArgs> = $Result.GetResult<Prisma.$JeuxMarquePayload, S>

  type JeuxMarqueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JeuxMarqueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JeuxMarqueCountAggregateInputType | true
    }

  export interface JeuxMarqueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JeuxMarque'], meta: { name: 'JeuxMarque' } }
    /**
     * Find zero or one JeuxMarque that matches the filter.
     * @param {JeuxMarqueFindUniqueArgs} args - Arguments to find a JeuxMarque
     * @example
     * // Get one JeuxMarque
     * const jeuxMarque = await prisma.jeuxMarque.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JeuxMarqueFindUniqueArgs>(args: SelectSubset<T, JeuxMarqueFindUniqueArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JeuxMarque that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JeuxMarqueFindUniqueOrThrowArgs} args - Arguments to find a JeuxMarque
     * @example
     * // Get one JeuxMarque
     * const jeuxMarque = await prisma.jeuxMarque.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JeuxMarqueFindUniqueOrThrowArgs>(args: SelectSubset<T, JeuxMarqueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JeuxMarque that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuxMarqueFindFirstArgs} args - Arguments to find a JeuxMarque
     * @example
     * // Get one JeuxMarque
     * const jeuxMarque = await prisma.jeuxMarque.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JeuxMarqueFindFirstArgs>(args?: SelectSubset<T, JeuxMarqueFindFirstArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JeuxMarque that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuxMarqueFindFirstOrThrowArgs} args - Arguments to find a JeuxMarque
     * @example
     * // Get one JeuxMarque
     * const jeuxMarque = await prisma.jeuxMarque.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JeuxMarqueFindFirstOrThrowArgs>(args?: SelectSubset<T, JeuxMarqueFindFirstOrThrowArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JeuxMarques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuxMarqueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JeuxMarques
     * const jeuxMarques = await prisma.jeuxMarque.findMany()
     * 
     * // Get first 10 JeuxMarques
     * const jeuxMarques = await prisma.jeuxMarque.findMany({ take: 10 })
     * 
     * // Only select the `JeuRef_id`
     * const jeuxMarqueWithJeuRef_idOnly = await prisma.jeuxMarque.findMany({ select: { JeuRef_id: true } })
     * 
     */
    findMany<T extends JeuxMarqueFindManyArgs>(args?: SelectSubset<T, JeuxMarqueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JeuxMarque.
     * @param {JeuxMarqueCreateArgs} args - Arguments to create a JeuxMarque.
     * @example
     * // Create one JeuxMarque
     * const JeuxMarque = await prisma.jeuxMarque.create({
     *   data: {
     *     // ... data to create a JeuxMarque
     *   }
     * })
     * 
     */
    create<T extends JeuxMarqueCreateArgs>(args: SelectSubset<T, JeuxMarqueCreateArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JeuxMarques.
     * @param {JeuxMarqueCreateManyArgs} args - Arguments to create many JeuxMarques.
     * @example
     * // Create many JeuxMarques
     * const jeuxMarque = await prisma.jeuxMarque.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JeuxMarqueCreateManyArgs>(args?: SelectSubset<T, JeuxMarqueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JeuxMarques and returns the data saved in the database.
     * @param {JeuxMarqueCreateManyAndReturnArgs} args - Arguments to create many JeuxMarques.
     * @example
     * // Create many JeuxMarques
     * const jeuxMarque = await prisma.jeuxMarque.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JeuxMarques and only return the `JeuRef_id`
     * const jeuxMarqueWithJeuRef_idOnly = await prisma.jeuxMarque.createManyAndReturn({ 
     *   select: { JeuRef_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JeuxMarqueCreateManyAndReturnArgs>(args?: SelectSubset<T, JeuxMarqueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JeuxMarque.
     * @param {JeuxMarqueDeleteArgs} args - Arguments to delete one JeuxMarque.
     * @example
     * // Delete one JeuxMarque
     * const JeuxMarque = await prisma.jeuxMarque.delete({
     *   where: {
     *     // ... filter to delete one JeuxMarque
     *   }
     * })
     * 
     */
    delete<T extends JeuxMarqueDeleteArgs>(args: SelectSubset<T, JeuxMarqueDeleteArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JeuxMarque.
     * @param {JeuxMarqueUpdateArgs} args - Arguments to update one JeuxMarque.
     * @example
     * // Update one JeuxMarque
     * const jeuxMarque = await prisma.jeuxMarque.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JeuxMarqueUpdateArgs>(args: SelectSubset<T, JeuxMarqueUpdateArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JeuxMarques.
     * @param {JeuxMarqueDeleteManyArgs} args - Arguments to filter JeuxMarques to delete.
     * @example
     * // Delete a few JeuxMarques
     * const { count } = await prisma.jeuxMarque.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JeuxMarqueDeleteManyArgs>(args?: SelectSubset<T, JeuxMarqueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JeuxMarques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuxMarqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JeuxMarques
     * const jeuxMarque = await prisma.jeuxMarque.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JeuxMarqueUpdateManyArgs>(args: SelectSubset<T, JeuxMarqueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JeuxMarque.
     * @param {JeuxMarqueUpsertArgs} args - Arguments to update or create a JeuxMarque.
     * @example
     * // Update or create a JeuxMarque
     * const jeuxMarque = await prisma.jeuxMarque.upsert({
     *   create: {
     *     // ... data to create a JeuxMarque
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JeuxMarque we want to update
     *   }
     * })
     */
    upsert<T extends JeuxMarqueUpsertArgs>(args: SelectSubset<T, JeuxMarqueUpsertArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JeuxMarques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuxMarqueCountArgs} args - Arguments to filter JeuxMarques to count.
     * @example
     * // Count the number of JeuxMarques
     * const count = await prisma.jeuxMarque.count({
     *   where: {
     *     // ... the filter for the JeuxMarques we want to count
     *   }
     * })
    **/
    count<T extends JeuxMarqueCountArgs>(
      args?: Subset<T, JeuxMarqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JeuxMarqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JeuxMarque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuxMarqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JeuxMarqueAggregateArgs>(args: Subset<T, JeuxMarqueAggregateArgs>): Prisma.PrismaPromise<GetJeuxMarqueAggregateType<T>>

    /**
     * Group by JeuxMarque.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuxMarqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JeuxMarqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JeuxMarqueGroupByArgs['orderBy'] }
        : { orderBy?: JeuxMarqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JeuxMarqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJeuxMarqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JeuxMarque model
   */
  readonly fields: JeuxMarqueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JeuxMarque.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JeuxMarqueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jeuxDepot<T extends JeuxMarque$jeuxDepotArgs<ExtArgs> = {}>(args?: Subset<T, JeuxMarque$jeuxDepotArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JeuxMarque model
   */ 
  interface JeuxMarqueFieldRefs {
    readonly JeuRef_id: FieldRef<"JeuxMarque", 'Int'>
    readonly Nom: FieldRef<"JeuxMarque", 'String'>
    readonly Editeur: FieldRef<"JeuxMarque", 'String'>
    readonly Description: FieldRef<"JeuxMarque", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JeuxMarque findUnique
   */
  export type JeuxMarqueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * Filter, which JeuxMarque to fetch.
     */
    where: JeuxMarqueWhereUniqueInput
  }

  /**
   * JeuxMarque findUniqueOrThrow
   */
  export type JeuxMarqueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * Filter, which JeuxMarque to fetch.
     */
    where: JeuxMarqueWhereUniqueInput
  }

  /**
   * JeuxMarque findFirst
   */
  export type JeuxMarqueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * Filter, which JeuxMarque to fetch.
     */
    where?: JeuxMarqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JeuxMarques to fetch.
     */
    orderBy?: JeuxMarqueOrderByWithRelationInput | JeuxMarqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JeuxMarques.
     */
    cursor?: JeuxMarqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JeuxMarques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JeuxMarques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JeuxMarques.
     */
    distinct?: JeuxMarqueScalarFieldEnum | JeuxMarqueScalarFieldEnum[]
  }

  /**
   * JeuxMarque findFirstOrThrow
   */
  export type JeuxMarqueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * Filter, which JeuxMarque to fetch.
     */
    where?: JeuxMarqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JeuxMarques to fetch.
     */
    orderBy?: JeuxMarqueOrderByWithRelationInput | JeuxMarqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JeuxMarques.
     */
    cursor?: JeuxMarqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JeuxMarques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JeuxMarques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JeuxMarques.
     */
    distinct?: JeuxMarqueScalarFieldEnum | JeuxMarqueScalarFieldEnum[]
  }

  /**
   * JeuxMarque findMany
   */
  export type JeuxMarqueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * Filter, which JeuxMarques to fetch.
     */
    where?: JeuxMarqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JeuxMarques to fetch.
     */
    orderBy?: JeuxMarqueOrderByWithRelationInput | JeuxMarqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JeuxMarques.
     */
    cursor?: JeuxMarqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JeuxMarques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JeuxMarques.
     */
    skip?: number
    distinct?: JeuxMarqueScalarFieldEnum | JeuxMarqueScalarFieldEnum[]
  }

  /**
   * JeuxMarque create
   */
  export type JeuxMarqueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * The data needed to create a JeuxMarque.
     */
    data: XOR<JeuxMarqueCreateInput, JeuxMarqueUncheckedCreateInput>
  }

  /**
   * JeuxMarque createMany
   */
  export type JeuxMarqueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JeuxMarques.
     */
    data: JeuxMarqueCreateManyInput | JeuxMarqueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JeuxMarque createManyAndReturn
   */
  export type JeuxMarqueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JeuxMarques.
     */
    data: JeuxMarqueCreateManyInput | JeuxMarqueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JeuxMarque update
   */
  export type JeuxMarqueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * The data needed to update a JeuxMarque.
     */
    data: XOR<JeuxMarqueUpdateInput, JeuxMarqueUncheckedUpdateInput>
    /**
     * Choose, which JeuxMarque to update.
     */
    where: JeuxMarqueWhereUniqueInput
  }

  /**
   * JeuxMarque updateMany
   */
  export type JeuxMarqueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JeuxMarques.
     */
    data: XOR<JeuxMarqueUpdateManyMutationInput, JeuxMarqueUncheckedUpdateManyInput>
    /**
     * Filter which JeuxMarques to update
     */
    where?: JeuxMarqueWhereInput
  }

  /**
   * JeuxMarque upsert
   */
  export type JeuxMarqueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * The filter to search for the JeuxMarque to update in case it exists.
     */
    where: JeuxMarqueWhereUniqueInput
    /**
     * In case the JeuxMarque found by the `where` argument doesn't exist, create a new JeuxMarque with this data.
     */
    create: XOR<JeuxMarqueCreateInput, JeuxMarqueUncheckedCreateInput>
    /**
     * In case the JeuxMarque was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JeuxMarqueUpdateInput, JeuxMarqueUncheckedUpdateInput>
  }

  /**
   * JeuxMarque delete
   */
  export type JeuxMarqueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    /**
     * Filter which JeuxMarque to delete.
     */
    where: JeuxMarqueWhereUniqueInput
  }

  /**
   * JeuxMarque deleteMany
   */
  export type JeuxMarqueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JeuxMarques to delete
     */
    where?: JeuxMarqueWhereInput
  }

  /**
   * JeuxMarque.jeuxDepot
   */
  export type JeuxMarque$jeuxDepotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    where?: JeuWhereInput
    orderBy?: JeuOrderByWithRelationInput | JeuOrderByWithRelationInput[]
    cursor?: JeuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JeuScalarFieldEnum | JeuScalarFieldEnum[]
  }

  /**
   * JeuxMarque without action
   */
  export type JeuxMarqueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
  }


  /**
   * Model Jeu
   */

  export type AggregateJeu = {
    _count: JeuCountAggregateOutputType | null
    _avg: JeuAvgAggregateOutputType | null
    _sum: JeuSumAggregateOutputType | null
    _min: JeuMinAggregateOutputType | null
    _max: JeuMaxAggregateOutputType | null
  }

  export type JeuAvgAggregateOutputType = {
    JeuID: number | null
    JeuRef_id: number | null
    depot_ID: number | null
    prix_unitaire: number | null
    quantite_disponible: number | null
  }

  export type JeuSumAggregateOutputType = {
    JeuID: number | null
    JeuRef_id: number | null
    depot_ID: number | null
    prix_unitaire: number | null
    quantite_disponible: number | null
  }

  export type JeuMinAggregateOutputType = {
    JeuID: number | null
    JeuRef_id: number | null
    depot_ID: number | null
    prix_unitaire: number | null
    mise_en_vente: boolean | null
    quantite_disponible: number | null
  }

  export type JeuMaxAggregateOutputType = {
    JeuID: number | null
    JeuRef_id: number | null
    depot_ID: number | null
    prix_unitaire: number | null
    mise_en_vente: boolean | null
    quantite_disponible: number | null
  }

  export type JeuCountAggregateOutputType = {
    JeuID: number
    JeuRef_id: number
    depot_ID: number
    prix_unitaire: number
    mise_en_vente: number
    quantite_disponible: number
    _all: number
  }


  export type JeuAvgAggregateInputType = {
    JeuID?: true
    JeuRef_id?: true
    depot_ID?: true
    prix_unitaire?: true
    quantite_disponible?: true
  }

  export type JeuSumAggregateInputType = {
    JeuID?: true
    JeuRef_id?: true
    depot_ID?: true
    prix_unitaire?: true
    quantite_disponible?: true
  }

  export type JeuMinAggregateInputType = {
    JeuID?: true
    JeuRef_id?: true
    depot_ID?: true
    prix_unitaire?: true
    mise_en_vente?: true
    quantite_disponible?: true
  }

  export type JeuMaxAggregateInputType = {
    JeuID?: true
    JeuRef_id?: true
    depot_ID?: true
    prix_unitaire?: true
    mise_en_vente?: true
    quantite_disponible?: true
  }

  export type JeuCountAggregateInputType = {
    JeuID?: true
    JeuRef_id?: true
    depot_ID?: true
    prix_unitaire?: true
    mise_en_vente?: true
    quantite_disponible?: true
    _all?: true
  }

  export type JeuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jeu to aggregate.
     */
    where?: JeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jeus to fetch.
     */
    orderBy?: JeuOrderByWithRelationInput | JeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jeus
    **/
    _count?: true | JeuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JeuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JeuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JeuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JeuMaxAggregateInputType
  }

  export type GetJeuAggregateType<T extends JeuAggregateArgs> = {
        [P in keyof T & keyof AggregateJeu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJeu[P]>
      : GetScalarType<T[P], AggregateJeu[P]>
  }




  export type JeuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JeuWhereInput
    orderBy?: JeuOrderByWithAggregationInput | JeuOrderByWithAggregationInput[]
    by: JeuScalarFieldEnum[] | JeuScalarFieldEnum
    having?: JeuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JeuCountAggregateInputType | true
    _avg?: JeuAvgAggregateInputType
    _sum?: JeuSumAggregateInputType
    _min?: JeuMinAggregateInputType
    _max?: JeuMaxAggregateInputType
  }

  export type JeuGroupByOutputType = {
    JeuID: number
    JeuRef_id: number
    depot_ID: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    _count: JeuCountAggregateOutputType | null
    _avg: JeuAvgAggregateOutputType | null
    _sum: JeuSumAggregateOutputType | null
    _min: JeuMinAggregateOutputType | null
    _max: JeuMaxAggregateOutputType | null
  }

  type GetJeuGroupByPayload<T extends JeuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JeuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JeuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JeuGroupByOutputType[P]>
            : GetScalarType<T[P], JeuGroupByOutputType[P]>
        }
      >
    >


  export type JeuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    JeuID?: boolean
    JeuRef_id?: boolean
    depot_ID?: boolean
    prix_unitaire?: boolean
    mise_en_vente?: boolean
    quantite_disponible?: boolean
    depot?: boolean | DepotDefaultArgs<ExtArgs>
    jeuxMarque?: boolean | Jeu$jeuxMarqueArgs<ExtArgs>
    achat_jeux?: boolean | Jeu$achat_jeuxArgs<ExtArgs>
    depot_jeux?: boolean | Jeu$depot_jeuxArgs<ExtArgs>
    _count?: boolean | JeuCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jeu"]>

  export type JeuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    JeuID?: boolean
    JeuRef_id?: boolean
    depot_ID?: boolean
    prix_unitaire?: boolean
    mise_en_vente?: boolean
    quantite_disponible?: boolean
    depot?: boolean | DepotDefaultArgs<ExtArgs>
    jeuxMarque?: boolean | Jeu$jeuxMarqueArgs<ExtArgs>
  }, ExtArgs["result"]["jeu"]>

  export type JeuSelectScalar = {
    JeuID?: boolean
    JeuRef_id?: boolean
    depot_ID?: boolean
    prix_unitaire?: boolean
    mise_en_vente?: boolean
    quantite_disponible?: boolean
  }

  export type JeuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    depot?: boolean | DepotDefaultArgs<ExtArgs>
    jeuxMarque?: boolean | Jeu$jeuxMarqueArgs<ExtArgs>
    achat_jeux?: boolean | Jeu$achat_jeuxArgs<ExtArgs>
    depot_jeux?: boolean | Jeu$depot_jeuxArgs<ExtArgs>
    _count?: boolean | JeuCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JeuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    depot?: boolean | DepotDefaultArgs<ExtArgs>
    jeuxMarque?: boolean | Jeu$jeuxMarqueArgs<ExtArgs>
  }

  export type $JeuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jeu"
    objects: {
      depot: Prisma.$DepotPayload<ExtArgs>
      jeuxMarque: Prisma.$JeuxMarquePayload<ExtArgs> | null
      achat_jeux: Prisma.$AchatJeuPayload<ExtArgs>[]
      depot_jeux: Prisma.$DepotJeuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      JeuID: number
      JeuRef_id: number
      depot_ID: number
      prix_unitaire: number
      mise_en_vente: boolean
      quantite_disponible: number
    }, ExtArgs["result"]["jeu"]>
    composites: {}
  }

  type JeuGetPayload<S extends boolean | null | undefined | JeuDefaultArgs> = $Result.GetResult<Prisma.$JeuPayload, S>

  type JeuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JeuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JeuCountAggregateInputType | true
    }

  export interface JeuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jeu'], meta: { name: 'Jeu' } }
    /**
     * Find zero or one Jeu that matches the filter.
     * @param {JeuFindUniqueArgs} args - Arguments to find a Jeu
     * @example
     * // Get one Jeu
     * const jeu = await prisma.jeu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JeuFindUniqueArgs>(args: SelectSubset<T, JeuFindUniqueArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Jeu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JeuFindUniqueOrThrowArgs} args - Arguments to find a Jeu
     * @example
     * // Get one Jeu
     * const jeu = await prisma.jeu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JeuFindUniqueOrThrowArgs>(args: SelectSubset<T, JeuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Jeu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuFindFirstArgs} args - Arguments to find a Jeu
     * @example
     * // Get one Jeu
     * const jeu = await prisma.jeu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JeuFindFirstArgs>(args?: SelectSubset<T, JeuFindFirstArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Jeu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuFindFirstOrThrowArgs} args - Arguments to find a Jeu
     * @example
     * // Get one Jeu
     * const jeu = await prisma.jeu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JeuFindFirstOrThrowArgs>(args?: SelectSubset<T, JeuFindFirstOrThrowArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jeus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jeus
     * const jeus = await prisma.jeu.findMany()
     * 
     * // Get first 10 Jeus
     * const jeus = await prisma.jeu.findMany({ take: 10 })
     * 
     * // Only select the `JeuID`
     * const jeuWithJeuIDOnly = await prisma.jeu.findMany({ select: { JeuID: true } })
     * 
     */
    findMany<T extends JeuFindManyArgs>(args?: SelectSubset<T, JeuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Jeu.
     * @param {JeuCreateArgs} args - Arguments to create a Jeu.
     * @example
     * // Create one Jeu
     * const Jeu = await prisma.jeu.create({
     *   data: {
     *     // ... data to create a Jeu
     *   }
     * })
     * 
     */
    create<T extends JeuCreateArgs>(args: SelectSubset<T, JeuCreateArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jeus.
     * @param {JeuCreateManyArgs} args - Arguments to create many Jeus.
     * @example
     * // Create many Jeus
     * const jeu = await prisma.jeu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JeuCreateManyArgs>(args?: SelectSubset<T, JeuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jeus and returns the data saved in the database.
     * @param {JeuCreateManyAndReturnArgs} args - Arguments to create many Jeus.
     * @example
     * // Create many Jeus
     * const jeu = await prisma.jeu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jeus and only return the `JeuID`
     * const jeuWithJeuIDOnly = await prisma.jeu.createManyAndReturn({ 
     *   select: { JeuID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JeuCreateManyAndReturnArgs>(args?: SelectSubset<T, JeuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Jeu.
     * @param {JeuDeleteArgs} args - Arguments to delete one Jeu.
     * @example
     * // Delete one Jeu
     * const Jeu = await prisma.jeu.delete({
     *   where: {
     *     // ... filter to delete one Jeu
     *   }
     * })
     * 
     */
    delete<T extends JeuDeleteArgs>(args: SelectSubset<T, JeuDeleteArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Jeu.
     * @param {JeuUpdateArgs} args - Arguments to update one Jeu.
     * @example
     * // Update one Jeu
     * const jeu = await prisma.jeu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JeuUpdateArgs>(args: SelectSubset<T, JeuUpdateArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jeus.
     * @param {JeuDeleteManyArgs} args - Arguments to filter Jeus to delete.
     * @example
     * // Delete a few Jeus
     * const { count } = await prisma.jeu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JeuDeleteManyArgs>(args?: SelectSubset<T, JeuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jeus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jeus
     * const jeu = await prisma.jeu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JeuUpdateManyArgs>(args: SelectSubset<T, JeuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jeu.
     * @param {JeuUpsertArgs} args - Arguments to update or create a Jeu.
     * @example
     * // Update or create a Jeu
     * const jeu = await prisma.jeu.upsert({
     *   create: {
     *     // ... data to create a Jeu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jeu we want to update
     *   }
     * })
     */
    upsert<T extends JeuUpsertArgs>(args: SelectSubset<T, JeuUpsertArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jeus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuCountArgs} args - Arguments to filter Jeus to count.
     * @example
     * // Count the number of Jeus
     * const count = await prisma.jeu.count({
     *   where: {
     *     // ... the filter for the Jeus we want to count
     *   }
     * })
    **/
    count<T extends JeuCountArgs>(
      args?: Subset<T, JeuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JeuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jeu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JeuAggregateArgs>(args: Subset<T, JeuAggregateArgs>): Prisma.PrismaPromise<GetJeuAggregateType<T>>

    /**
     * Group by Jeu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JeuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JeuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JeuGroupByArgs['orderBy'] }
        : { orderBy?: JeuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JeuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJeuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jeu model
   */
  readonly fields: JeuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jeu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JeuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    depot<T extends DepotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepotDefaultArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jeuxMarque<T extends Jeu$jeuxMarqueArgs<ExtArgs> = {}>(args?: Subset<T, Jeu$jeuxMarqueArgs<ExtArgs>>): Prisma__JeuxMarqueClient<$Result.GetResult<Prisma.$JeuxMarquePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    achat_jeux<T extends Jeu$achat_jeuxArgs<ExtArgs> = {}>(args?: Subset<T, Jeu$achat_jeuxArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "findMany"> | Null>
    depot_jeux<T extends Jeu$depot_jeuxArgs<ExtArgs> = {}>(args?: Subset<T, Jeu$depot_jeuxArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Jeu model
   */ 
  interface JeuFieldRefs {
    readonly JeuID: FieldRef<"Jeu", 'Int'>
    readonly JeuRef_id: FieldRef<"Jeu", 'Int'>
    readonly depot_ID: FieldRef<"Jeu", 'Int'>
    readonly prix_unitaire: FieldRef<"Jeu", 'Float'>
    readonly mise_en_vente: FieldRef<"Jeu", 'Boolean'>
    readonly quantite_disponible: FieldRef<"Jeu", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Jeu findUnique
   */
  export type JeuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * Filter, which Jeu to fetch.
     */
    where: JeuWhereUniqueInput
  }

  /**
   * Jeu findUniqueOrThrow
   */
  export type JeuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * Filter, which Jeu to fetch.
     */
    where: JeuWhereUniqueInput
  }

  /**
   * Jeu findFirst
   */
  export type JeuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * Filter, which Jeu to fetch.
     */
    where?: JeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jeus to fetch.
     */
    orderBy?: JeuOrderByWithRelationInput | JeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jeus.
     */
    cursor?: JeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jeus.
     */
    distinct?: JeuScalarFieldEnum | JeuScalarFieldEnum[]
  }

  /**
   * Jeu findFirstOrThrow
   */
  export type JeuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * Filter, which Jeu to fetch.
     */
    where?: JeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jeus to fetch.
     */
    orderBy?: JeuOrderByWithRelationInput | JeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jeus.
     */
    cursor?: JeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jeus.
     */
    distinct?: JeuScalarFieldEnum | JeuScalarFieldEnum[]
  }

  /**
   * Jeu findMany
   */
  export type JeuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * Filter, which Jeus to fetch.
     */
    where?: JeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jeus to fetch.
     */
    orderBy?: JeuOrderByWithRelationInput | JeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jeus.
     */
    cursor?: JeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jeus.
     */
    skip?: number
    distinct?: JeuScalarFieldEnum | JeuScalarFieldEnum[]
  }

  /**
   * Jeu create
   */
  export type JeuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * The data needed to create a Jeu.
     */
    data: XOR<JeuCreateInput, JeuUncheckedCreateInput>
  }

  /**
   * Jeu createMany
   */
  export type JeuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jeus.
     */
    data: JeuCreateManyInput | JeuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Jeu createManyAndReturn
   */
  export type JeuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Jeus.
     */
    data: JeuCreateManyInput | JeuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Jeu update
   */
  export type JeuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * The data needed to update a Jeu.
     */
    data: XOR<JeuUpdateInput, JeuUncheckedUpdateInput>
    /**
     * Choose, which Jeu to update.
     */
    where: JeuWhereUniqueInput
  }

  /**
   * Jeu updateMany
   */
  export type JeuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jeus.
     */
    data: XOR<JeuUpdateManyMutationInput, JeuUncheckedUpdateManyInput>
    /**
     * Filter which Jeus to update
     */
    where?: JeuWhereInput
  }

  /**
   * Jeu upsert
   */
  export type JeuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * The filter to search for the Jeu to update in case it exists.
     */
    where: JeuWhereUniqueInput
    /**
     * In case the Jeu found by the `where` argument doesn't exist, create a new Jeu with this data.
     */
    create: XOR<JeuCreateInput, JeuUncheckedCreateInput>
    /**
     * In case the Jeu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JeuUpdateInput, JeuUncheckedUpdateInput>
  }

  /**
   * Jeu delete
   */
  export type JeuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    /**
     * Filter which Jeu to delete.
     */
    where: JeuWhereUniqueInput
  }

  /**
   * Jeu deleteMany
   */
  export type JeuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jeus to delete
     */
    where?: JeuWhereInput
  }

  /**
   * Jeu.jeuxMarque
   */
  export type Jeu$jeuxMarqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JeuxMarque
     */
    select?: JeuxMarqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuxMarqueInclude<ExtArgs> | null
    where?: JeuxMarqueWhereInput
  }

  /**
   * Jeu.achat_jeux
   */
  export type Jeu$achat_jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    where?: AchatJeuWhereInput
    orderBy?: AchatJeuOrderByWithRelationInput | AchatJeuOrderByWithRelationInput[]
    cursor?: AchatJeuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AchatJeuScalarFieldEnum | AchatJeuScalarFieldEnum[]
  }

  /**
   * Jeu.depot_jeux
   */
  export type Jeu$depot_jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    where?: DepotJeuWhereInput
    orderBy?: DepotJeuOrderByWithRelationInput | DepotJeuOrderByWithRelationInput[]
    cursor?: DepotJeuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepotJeuScalarFieldEnum | DepotJeuScalarFieldEnum[]
  }

  /**
   * Jeu without action
   */
  export type JeuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
  }


  /**
   * Model Depot
   */

  export type AggregateDepot = {
    _count: DepotCountAggregateOutputType | null
    _avg: DepotAvgAggregateOutputType | null
    _sum: DepotSumAggregateOutputType | null
    _min: DepotMinAggregateOutputType | null
    _max: DepotMaxAggregateOutputType | null
  }

  export type DepotAvgAggregateOutputType = {
    ID_depot: number | null
    VendeurID: number | null
    id_session: number | null
    comission_depot_total: number | null
  }

  export type DepotSumAggregateOutputType = {
    ID_depot: number | null
    VendeurID: number | null
    id_session: number | null
    comission_depot_total: number | null
  }

  export type DepotMinAggregateOutputType = {
    ID_depot: number | null
    VendeurID: number | null
    date_depot: Date | null
    id_session: number | null
    comission_depot_total: number | null
  }

  export type DepotMaxAggregateOutputType = {
    ID_depot: number | null
    VendeurID: number | null
    date_depot: Date | null
    id_session: number | null
    comission_depot_total: number | null
  }

  export type DepotCountAggregateOutputType = {
    ID_depot: number
    VendeurID: number
    date_depot: number
    id_session: number
    comission_depot_total: number
    _all: number
  }


  export type DepotAvgAggregateInputType = {
    ID_depot?: true
    VendeurID?: true
    id_session?: true
    comission_depot_total?: true
  }

  export type DepotSumAggregateInputType = {
    ID_depot?: true
    VendeurID?: true
    id_session?: true
    comission_depot_total?: true
  }

  export type DepotMinAggregateInputType = {
    ID_depot?: true
    VendeurID?: true
    date_depot?: true
    id_session?: true
    comission_depot_total?: true
  }

  export type DepotMaxAggregateInputType = {
    ID_depot?: true
    VendeurID?: true
    date_depot?: true
    id_session?: true
    comission_depot_total?: true
  }

  export type DepotCountAggregateInputType = {
    ID_depot?: true
    VendeurID?: true
    date_depot?: true
    id_session?: true
    comission_depot_total?: true
    _all?: true
  }

  export type DepotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Depot to aggregate.
     */
    where?: DepotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Depots to fetch.
     */
    orderBy?: DepotOrderByWithRelationInput | DepotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Depots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Depots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Depots
    **/
    _count?: true | DepotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepotMaxAggregateInputType
  }

  export type GetDepotAggregateType<T extends DepotAggregateArgs> = {
        [P in keyof T & keyof AggregateDepot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepot[P]>
      : GetScalarType<T[P], AggregateDepot[P]>
  }




  export type DepotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepotWhereInput
    orderBy?: DepotOrderByWithAggregationInput | DepotOrderByWithAggregationInput[]
    by: DepotScalarFieldEnum[] | DepotScalarFieldEnum
    having?: DepotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepotCountAggregateInputType | true
    _avg?: DepotAvgAggregateInputType
    _sum?: DepotSumAggregateInputType
    _min?: DepotMinAggregateInputType
    _max?: DepotMaxAggregateInputType
  }

  export type DepotGroupByOutputType = {
    ID_depot: number
    VendeurID: number
    date_depot: Date
    id_session: number
    comission_depot_total: number
    _count: DepotCountAggregateOutputType | null
    _avg: DepotAvgAggregateOutputType | null
    _sum: DepotSumAggregateOutputType | null
    _min: DepotMinAggregateOutputType | null
    _max: DepotMaxAggregateOutputType | null
  }

  type GetDepotGroupByPayload<T extends DepotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepotGroupByOutputType[P]>
            : GetScalarType<T[P], DepotGroupByOutputType[P]>
        }
      >
    >


  export type DepotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID_depot?: boolean
    VendeurID?: boolean
    date_depot?: boolean
    id_session?: boolean
    comission_depot_total?: boolean
    vendeur?: boolean | VendeurDefaultArgs<ExtArgs>
    session?: boolean | SessionDefaultArgs<ExtArgs>
    jeux?: boolean | Depot$jeuxArgs<ExtArgs>
    depot_jeux?: boolean | Depot$depot_jeuxArgs<ExtArgs>
    _count?: boolean | DepotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["depot"]>

  export type DepotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID_depot?: boolean
    VendeurID?: boolean
    date_depot?: boolean
    id_session?: boolean
    comission_depot_total?: boolean
    vendeur?: boolean | VendeurDefaultArgs<ExtArgs>
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["depot"]>

  export type DepotSelectScalar = {
    ID_depot?: boolean
    VendeurID?: boolean
    date_depot?: boolean
    id_session?: boolean
    comission_depot_total?: boolean
  }

  export type DepotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendeur?: boolean | VendeurDefaultArgs<ExtArgs>
    session?: boolean | SessionDefaultArgs<ExtArgs>
    jeux?: boolean | Depot$jeuxArgs<ExtArgs>
    depot_jeux?: boolean | Depot$depot_jeuxArgs<ExtArgs>
    _count?: boolean | DepotCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendeur?: boolean | VendeurDefaultArgs<ExtArgs>
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }

  export type $DepotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Depot"
    objects: {
      vendeur: Prisma.$VendeurPayload<ExtArgs>
      session: Prisma.$SessionPayload<ExtArgs>
      jeux: Prisma.$JeuPayload<ExtArgs>[]
      depot_jeux: Prisma.$DepotJeuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID_depot: number
      VendeurID: number
      date_depot: Date
      id_session: number
      comission_depot_total: number
    }, ExtArgs["result"]["depot"]>
    composites: {}
  }

  type DepotGetPayload<S extends boolean | null | undefined | DepotDefaultArgs> = $Result.GetResult<Prisma.$DepotPayload, S>

  type DepotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepotCountAggregateInputType | true
    }

  export interface DepotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Depot'], meta: { name: 'Depot' } }
    /**
     * Find zero or one Depot that matches the filter.
     * @param {DepotFindUniqueArgs} args - Arguments to find a Depot
     * @example
     * // Get one Depot
     * const depot = await prisma.depot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepotFindUniqueArgs>(args: SelectSubset<T, DepotFindUniqueArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Depot that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepotFindUniqueOrThrowArgs} args - Arguments to find a Depot
     * @example
     * // Get one Depot
     * const depot = await prisma.depot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepotFindUniqueOrThrowArgs>(args: SelectSubset<T, DepotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Depot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotFindFirstArgs} args - Arguments to find a Depot
     * @example
     * // Get one Depot
     * const depot = await prisma.depot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepotFindFirstArgs>(args?: SelectSubset<T, DepotFindFirstArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Depot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotFindFirstOrThrowArgs} args - Arguments to find a Depot
     * @example
     * // Get one Depot
     * const depot = await prisma.depot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepotFindFirstOrThrowArgs>(args?: SelectSubset<T, DepotFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Depots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Depots
     * const depots = await prisma.depot.findMany()
     * 
     * // Get first 10 Depots
     * const depots = await prisma.depot.findMany({ take: 10 })
     * 
     * // Only select the `ID_depot`
     * const depotWithID_depotOnly = await prisma.depot.findMany({ select: { ID_depot: true } })
     * 
     */
    findMany<T extends DepotFindManyArgs>(args?: SelectSubset<T, DepotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Depot.
     * @param {DepotCreateArgs} args - Arguments to create a Depot.
     * @example
     * // Create one Depot
     * const Depot = await prisma.depot.create({
     *   data: {
     *     // ... data to create a Depot
     *   }
     * })
     * 
     */
    create<T extends DepotCreateArgs>(args: SelectSubset<T, DepotCreateArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Depots.
     * @param {DepotCreateManyArgs} args - Arguments to create many Depots.
     * @example
     * // Create many Depots
     * const depot = await prisma.depot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepotCreateManyArgs>(args?: SelectSubset<T, DepotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Depots and returns the data saved in the database.
     * @param {DepotCreateManyAndReturnArgs} args - Arguments to create many Depots.
     * @example
     * // Create many Depots
     * const depot = await prisma.depot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Depots and only return the `ID_depot`
     * const depotWithID_depotOnly = await prisma.depot.createManyAndReturn({ 
     *   select: { ID_depot: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepotCreateManyAndReturnArgs>(args?: SelectSubset<T, DepotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Depot.
     * @param {DepotDeleteArgs} args - Arguments to delete one Depot.
     * @example
     * // Delete one Depot
     * const Depot = await prisma.depot.delete({
     *   where: {
     *     // ... filter to delete one Depot
     *   }
     * })
     * 
     */
    delete<T extends DepotDeleteArgs>(args: SelectSubset<T, DepotDeleteArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Depot.
     * @param {DepotUpdateArgs} args - Arguments to update one Depot.
     * @example
     * // Update one Depot
     * const depot = await prisma.depot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepotUpdateArgs>(args: SelectSubset<T, DepotUpdateArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Depots.
     * @param {DepotDeleteManyArgs} args - Arguments to filter Depots to delete.
     * @example
     * // Delete a few Depots
     * const { count } = await prisma.depot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepotDeleteManyArgs>(args?: SelectSubset<T, DepotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Depots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Depots
     * const depot = await prisma.depot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepotUpdateManyArgs>(args: SelectSubset<T, DepotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Depot.
     * @param {DepotUpsertArgs} args - Arguments to update or create a Depot.
     * @example
     * // Update or create a Depot
     * const depot = await prisma.depot.upsert({
     *   create: {
     *     // ... data to create a Depot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Depot we want to update
     *   }
     * })
     */
    upsert<T extends DepotUpsertArgs>(args: SelectSubset<T, DepotUpsertArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Depots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotCountArgs} args - Arguments to filter Depots to count.
     * @example
     * // Count the number of Depots
     * const count = await prisma.depot.count({
     *   where: {
     *     // ... the filter for the Depots we want to count
     *   }
     * })
    **/
    count<T extends DepotCountArgs>(
      args?: Subset<T, DepotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Depot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepotAggregateArgs>(args: Subset<T, DepotAggregateArgs>): Prisma.PrismaPromise<GetDepotAggregateType<T>>

    /**
     * Group by Depot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepotGroupByArgs['orderBy'] }
        : { orderBy?: DepotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Depot model
   */
  readonly fields: DepotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Depot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendeur<T extends VendeurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendeurDefaultArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jeux<T extends Depot$jeuxArgs<ExtArgs> = {}>(args?: Subset<T, Depot$jeuxArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findMany"> | Null>
    depot_jeux<T extends Depot$depot_jeuxArgs<ExtArgs> = {}>(args?: Subset<T, Depot$depot_jeuxArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Depot model
   */ 
  interface DepotFieldRefs {
    readonly ID_depot: FieldRef<"Depot", 'Int'>
    readonly VendeurID: FieldRef<"Depot", 'Int'>
    readonly date_depot: FieldRef<"Depot", 'DateTime'>
    readonly id_session: FieldRef<"Depot", 'Int'>
    readonly comission_depot_total: FieldRef<"Depot", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Depot findUnique
   */
  export type DepotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * Filter, which Depot to fetch.
     */
    where: DepotWhereUniqueInput
  }

  /**
   * Depot findUniqueOrThrow
   */
  export type DepotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * Filter, which Depot to fetch.
     */
    where: DepotWhereUniqueInput
  }

  /**
   * Depot findFirst
   */
  export type DepotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * Filter, which Depot to fetch.
     */
    where?: DepotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Depots to fetch.
     */
    orderBy?: DepotOrderByWithRelationInput | DepotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Depots.
     */
    cursor?: DepotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Depots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Depots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Depots.
     */
    distinct?: DepotScalarFieldEnum | DepotScalarFieldEnum[]
  }

  /**
   * Depot findFirstOrThrow
   */
  export type DepotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * Filter, which Depot to fetch.
     */
    where?: DepotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Depots to fetch.
     */
    orderBy?: DepotOrderByWithRelationInput | DepotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Depots.
     */
    cursor?: DepotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Depots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Depots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Depots.
     */
    distinct?: DepotScalarFieldEnum | DepotScalarFieldEnum[]
  }

  /**
   * Depot findMany
   */
  export type DepotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * Filter, which Depots to fetch.
     */
    where?: DepotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Depots to fetch.
     */
    orderBy?: DepotOrderByWithRelationInput | DepotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Depots.
     */
    cursor?: DepotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Depots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Depots.
     */
    skip?: number
    distinct?: DepotScalarFieldEnum | DepotScalarFieldEnum[]
  }

  /**
   * Depot create
   */
  export type DepotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * The data needed to create a Depot.
     */
    data: XOR<DepotCreateInput, DepotUncheckedCreateInput>
  }

  /**
   * Depot createMany
   */
  export type DepotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Depots.
     */
    data: DepotCreateManyInput | DepotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Depot createManyAndReturn
   */
  export type DepotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Depots.
     */
    data: DepotCreateManyInput | DepotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Depot update
   */
  export type DepotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * The data needed to update a Depot.
     */
    data: XOR<DepotUpdateInput, DepotUncheckedUpdateInput>
    /**
     * Choose, which Depot to update.
     */
    where: DepotWhereUniqueInput
  }

  /**
   * Depot updateMany
   */
  export type DepotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Depots.
     */
    data: XOR<DepotUpdateManyMutationInput, DepotUncheckedUpdateManyInput>
    /**
     * Filter which Depots to update
     */
    where?: DepotWhereInput
  }

  /**
   * Depot upsert
   */
  export type DepotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * The filter to search for the Depot to update in case it exists.
     */
    where: DepotWhereUniqueInput
    /**
     * In case the Depot found by the `where` argument doesn't exist, create a new Depot with this data.
     */
    create: XOR<DepotCreateInput, DepotUncheckedCreateInput>
    /**
     * In case the Depot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepotUpdateInput, DepotUncheckedUpdateInput>
  }

  /**
   * Depot delete
   */
  export type DepotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    /**
     * Filter which Depot to delete.
     */
    where: DepotWhereUniqueInput
  }

  /**
   * Depot deleteMany
   */
  export type DepotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Depots to delete
     */
    where?: DepotWhereInput
  }

  /**
   * Depot.jeux
   */
  export type Depot$jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jeu
     */
    select?: JeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JeuInclude<ExtArgs> | null
    where?: JeuWhereInput
    orderBy?: JeuOrderByWithRelationInput | JeuOrderByWithRelationInput[]
    cursor?: JeuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JeuScalarFieldEnum | JeuScalarFieldEnum[]
  }

  /**
   * Depot.depot_jeux
   */
  export type Depot$depot_jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    where?: DepotJeuWhereInput
    orderBy?: DepotJeuOrderByWithRelationInput | DepotJeuOrderByWithRelationInput[]
    cursor?: DepotJeuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepotJeuScalarFieldEnum | DepotJeuScalarFieldEnum[]
  }

  /**
   * Depot without action
   */
  export type DepotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
  }


  /**
   * Model Vendeur
   */

  export type AggregateVendeur = {
    _count: VendeurCountAggregateOutputType | null
    _avg: VendeurAvgAggregateOutputType | null
    _sum: VendeurSumAggregateOutputType | null
    _min: VendeurMinAggregateOutputType | null
    _max: VendeurMaxAggregateOutputType | null
  }

  export type VendeurAvgAggregateOutputType = {
    VendeurID: number | null
  }

  export type VendeurSumAggregateOutputType = {
    VendeurID: number | null
  }

  export type VendeurMinAggregateOutputType = {
    VendeurID: number | null
    Nom: string | null
    Email: string | null
    Telephone: string | null
  }

  export type VendeurMaxAggregateOutputType = {
    VendeurID: number | null
    Nom: string | null
    Email: string | null
    Telephone: string | null
  }

  export type VendeurCountAggregateOutputType = {
    VendeurID: number
    Nom: number
    Email: number
    Telephone: number
    _all: number
  }


  export type VendeurAvgAggregateInputType = {
    VendeurID?: true
  }

  export type VendeurSumAggregateInputType = {
    VendeurID?: true
  }

  export type VendeurMinAggregateInputType = {
    VendeurID?: true
    Nom?: true
    Email?: true
    Telephone?: true
  }

  export type VendeurMaxAggregateInputType = {
    VendeurID?: true
    Nom?: true
    Email?: true
    Telephone?: true
  }

  export type VendeurCountAggregateInputType = {
    VendeurID?: true
    Nom?: true
    Email?: true
    Telephone?: true
    _all?: true
  }

  export type VendeurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendeur to aggregate.
     */
    where?: VendeurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendeurs to fetch.
     */
    orderBy?: VendeurOrderByWithRelationInput | VendeurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendeurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendeurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendeurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendeurs
    **/
    _count?: true | VendeurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendeurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendeurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendeurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendeurMaxAggregateInputType
  }

  export type GetVendeurAggregateType<T extends VendeurAggregateArgs> = {
        [P in keyof T & keyof AggregateVendeur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendeur[P]>
      : GetScalarType<T[P], AggregateVendeur[P]>
  }




  export type VendeurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendeurWhereInput
    orderBy?: VendeurOrderByWithAggregationInput | VendeurOrderByWithAggregationInput[]
    by: VendeurScalarFieldEnum[] | VendeurScalarFieldEnum
    having?: VendeurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendeurCountAggregateInputType | true
    _avg?: VendeurAvgAggregateInputType
    _sum?: VendeurSumAggregateInputType
    _min?: VendeurMinAggregateInputType
    _max?: VendeurMaxAggregateInputType
  }

  export type VendeurGroupByOutputType = {
    VendeurID: number
    Nom: string
    Email: string
    Telephone: string
    _count: VendeurCountAggregateOutputType | null
    _avg: VendeurAvgAggregateOutputType | null
    _sum: VendeurSumAggregateOutputType | null
    _min: VendeurMinAggregateOutputType | null
    _max: VendeurMaxAggregateOutputType | null
  }

  type GetVendeurGroupByPayload<T extends VendeurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendeurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendeurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendeurGroupByOutputType[P]>
            : GetScalarType<T[P], VendeurGroupByOutputType[P]>
        }
      >
    >


  export type VendeurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    VendeurID?: boolean
    Nom?: boolean
    Email?: boolean
    Telephone?: boolean
    depots?: boolean | Vendeur$depotsArgs<ExtArgs>
    BilanVendeurSession?: boolean | Vendeur$BilanVendeurSessionArgs<ExtArgs>
    _count?: boolean | VendeurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vendeur"]>

  export type VendeurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    VendeurID?: boolean
    Nom?: boolean
    Email?: boolean
    Telephone?: boolean
  }, ExtArgs["result"]["vendeur"]>

  export type VendeurSelectScalar = {
    VendeurID?: boolean
    Nom?: boolean
    Email?: boolean
    Telephone?: boolean
  }

  export type VendeurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    depots?: boolean | Vendeur$depotsArgs<ExtArgs>
    BilanVendeurSession?: boolean | Vendeur$BilanVendeurSessionArgs<ExtArgs>
    _count?: boolean | VendeurCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VendeurIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VendeurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vendeur"
    objects: {
      depots: Prisma.$DepotPayload<ExtArgs>[]
      BilanVendeurSession: Prisma.$BilanVendeurSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      VendeurID: number
      Nom: string
      Email: string
      Telephone: string
    }, ExtArgs["result"]["vendeur"]>
    composites: {}
  }

  type VendeurGetPayload<S extends boolean | null | undefined | VendeurDefaultArgs> = $Result.GetResult<Prisma.$VendeurPayload, S>

  type VendeurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VendeurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VendeurCountAggregateInputType | true
    }

  export interface VendeurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendeur'], meta: { name: 'Vendeur' } }
    /**
     * Find zero or one Vendeur that matches the filter.
     * @param {VendeurFindUniqueArgs} args - Arguments to find a Vendeur
     * @example
     * // Get one Vendeur
     * const vendeur = await prisma.vendeur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendeurFindUniqueArgs>(args: SelectSubset<T, VendeurFindUniqueArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vendeur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VendeurFindUniqueOrThrowArgs} args - Arguments to find a Vendeur
     * @example
     * // Get one Vendeur
     * const vendeur = await prisma.vendeur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendeurFindUniqueOrThrowArgs>(args: SelectSubset<T, VendeurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vendeur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendeurFindFirstArgs} args - Arguments to find a Vendeur
     * @example
     * // Get one Vendeur
     * const vendeur = await prisma.vendeur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendeurFindFirstArgs>(args?: SelectSubset<T, VendeurFindFirstArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vendeur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendeurFindFirstOrThrowArgs} args - Arguments to find a Vendeur
     * @example
     * // Get one Vendeur
     * const vendeur = await prisma.vendeur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendeurFindFirstOrThrowArgs>(args?: SelectSubset<T, VendeurFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vendeurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendeurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendeurs
     * const vendeurs = await prisma.vendeur.findMany()
     * 
     * // Get first 10 Vendeurs
     * const vendeurs = await prisma.vendeur.findMany({ take: 10 })
     * 
     * // Only select the `VendeurID`
     * const vendeurWithVendeurIDOnly = await prisma.vendeur.findMany({ select: { VendeurID: true } })
     * 
     */
    findMany<T extends VendeurFindManyArgs>(args?: SelectSubset<T, VendeurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vendeur.
     * @param {VendeurCreateArgs} args - Arguments to create a Vendeur.
     * @example
     * // Create one Vendeur
     * const Vendeur = await prisma.vendeur.create({
     *   data: {
     *     // ... data to create a Vendeur
     *   }
     * })
     * 
     */
    create<T extends VendeurCreateArgs>(args: SelectSubset<T, VendeurCreateArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vendeurs.
     * @param {VendeurCreateManyArgs} args - Arguments to create many Vendeurs.
     * @example
     * // Create many Vendeurs
     * const vendeur = await prisma.vendeur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendeurCreateManyArgs>(args?: SelectSubset<T, VendeurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vendeurs and returns the data saved in the database.
     * @param {VendeurCreateManyAndReturnArgs} args - Arguments to create many Vendeurs.
     * @example
     * // Create many Vendeurs
     * const vendeur = await prisma.vendeur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vendeurs and only return the `VendeurID`
     * const vendeurWithVendeurIDOnly = await prisma.vendeur.createManyAndReturn({ 
     *   select: { VendeurID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VendeurCreateManyAndReturnArgs>(args?: SelectSubset<T, VendeurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Vendeur.
     * @param {VendeurDeleteArgs} args - Arguments to delete one Vendeur.
     * @example
     * // Delete one Vendeur
     * const Vendeur = await prisma.vendeur.delete({
     *   where: {
     *     // ... filter to delete one Vendeur
     *   }
     * })
     * 
     */
    delete<T extends VendeurDeleteArgs>(args: SelectSubset<T, VendeurDeleteArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vendeur.
     * @param {VendeurUpdateArgs} args - Arguments to update one Vendeur.
     * @example
     * // Update one Vendeur
     * const vendeur = await prisma.vendeur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendeurUpdateArgs>(args: SelectSubset<T, VendeurUpdateArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vendeurs.
     * @param {VendeurDeleteManyArgs} args - Arguments to filter Vendeurs to delete.
     * @example
     * // Delete a few Vendeurs
     * const { count } = await prisma.vendeur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendeurDeleteManyArgs>(args?: SelectSubset<T, VendeurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendeurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendeurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendeurs
     * const vendeur = await prisma.vendeur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendeurUpdateManyArgs>(args: SelectSubset<T, VendeurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendeur.
     * @param {VendeurUpsertArgs} args - Arguments to update or create a Vendeur.
     * @example
     * // Update or create a Vendeur
     * const vendeur = await prisma.vendeur.upsert({
     *   create: {
     *     // ... data to create a Vendeur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendeur we want to update
     *   }
     * })
     */
    upsert<T extends VendeurUpsertArgs>(args: SelectSubset<T, VendeurUpsertArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vendeurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendeurCountArgs} args - Arguments to filter Vendeurs to count.
     * @example
     * // Count the number of Vendeurs
     * const count = await prisma.vendeur.count({
     *   where: {
     *     // ... the filter for the Vendeurs we want to count
     *   }
     * })
    **/
    count<T extends VendeurCountArgs>(
      args?: Subset<T, VendeurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendeurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendeur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendeurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendeurAggregateArgs>(args: Subset<T, VendeurAggregateArgs>): Prisma.PrismaPromise<GetVendeurAggregateType<T>>

    /**
     * Group by Vendeur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendeurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendeurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendeurGroupByArgs['orderBy'] }
        : { orderBy?: VendeurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendeurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendeurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vendeur model
   */
  readonly fields: VendeurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendeur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendeurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    depots<T extends Vendeur$depotsArgs<ExtArgs> = {}>(args?: Subset<T, Vendeur$depotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findMany"> | Null>
    BilanVendeurSession<T extends Vendeur$BilanVendeurSessionArgs<ExtArgs> = {}>(args?: Subset<T, Vendeur$BilanVendeurSessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vendeur model
   */ 
  interface VendeurFieldRefs {
    readonly VendeurID: FieldRef<"Vendeur", 'Int'>
    readonly Nom: FieldRef<"Vendeur", 'String'>
    readonly Email: FieldRef<"Vendeur", 'String'>
    readonly Telephone: FieldRef<"Vendeur", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vendeur findUnique
   */
  export type VendeurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * Filter, which Vendeur to fetch.
     */
    where: VendeurWhereUniqueInput
  }

  /**
   * Vendeur findUniqueOrThrow
   */
  export type VendeurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * Filter, which Vendeur to fetch.
     */
    where: VendeurWhereUniqueInput
  }

  /**
   * Vendeur findFirst
   */
  export type VendeurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * Filter, which Vendeur to fetch.
     */
    where?: VendeurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendeurs to fetch.
     */
    orderBy?: VendeurOrderByWithRelationInput | VendeurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendeurs.
     */
    cursor?: VendeurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendeurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendeurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendeurs.
     */
    distinct?: VendeurScalarFieldEnum | VendeurScalarFieldEnum[]
  }

  /**
   * Vendeur findFirstOrThrow
   */
  export type VendeurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * Filter, which Vendeur to fetch.
     */
    where?: VendeurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendeurs to fetch.
     */
    orderBy?: VendeurOrderByWithRelationInput | VendeurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendeurs.
     */
    cursor?: VendeurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendeurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendeurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendeurs.
     */
    distinct?: VendeurScalarFieldEnum | VendeurScalarFieldEnum[]
  }

  /**
   * Vendeur findMany
   */
  export type VendeurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * Filter, which Vendeurs to fetch.
     */
    where?: VendeurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendeurs to fetch.
     */
    orderBy?: VendeurOrderByWithRelationInput | VendeurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendeurs.
     */
    cursor?: VendeurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendeurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendeurs.
     */
    skip?: number
    distinct?: VendeurScalarFieldEnum | VendeurScalarFieldEnum[]
  }

  /**
   * Vendeur create
   */
  export type VendeurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendeur.
     */
    data: XOR<VendeurCreateInput, VendeurUncheckedCreateInput>
  }

  /**
   * Vendeur createMany
   */
  export type VendeurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendeurs.
     */
    data: VendeurCreateManyInput | VendeurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendeur createManyAndReturn
   */
  export type VendeurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Vendeurs.
     */
    data: VendeurCreateManyInput | VendeurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vendeur update
   */
  export type VendeurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendeur.
     */
    data: XOR<VendeurUpdateInput, VendeurUncheckedUpdateInput>
    /**
     * Choose, which Vendeur to update.
     */
    where: VendeurWhereUniqueInput
  }

  /**
   * Vendeur updateMany
   */
  export type VendeurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendeurs.
     */
    data: XOR<VendeurUpdateManyMutationInput, VendeurUncheckedUpdateManyInput>
    /**
     * Filter which Vendeurs to update
     */
    where?: VendeurWhereInput
  }

  /**
   * Vendeur upsert
   */
  export type VendeurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendeur to update in case it exists.
     */
    where: VendeurWhereUniqueInput
    /**
     * In case the Vendeur found by the `where` argument doesn't exist, create a new Vendeur with this data.
     */
    create: XOR<VendeurCreateInput, VendeurUncheckedCreateInput>
    /**
     * In case the Vendeur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendeurUpdateInput, VendeurUncheckedUpdateInput>
  }

  /**
   * Vendeur delete
   */
  export type VendeurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
    /**
     * Filter which Vendeur to delete.
     */
    where: VendeurWhereUniqueInput
  }

  /**
   * Vendeur deleteMany
   */
  export type VendeurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendeurs to delete
     */
    where?: VendeurWhereInput
  }

  /**
   * Vendeur.depots
   */
  export type Vendeur$depotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    where?: DepotWhereInput
    orderBy?: DepotOrderByWithRelationInput | DepotOrderByWithRelationInput[]
    cursor?: DepotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepotScalarFieldEnum | DepotScalarFieldEnum[]
  }

  /**
   * Vendeur.BilanVendeurSession
   */
  export type Vendeur$BilanVendeurSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    where?: BilanVendeurSessionWhereInput
    orderBy?: BilanVendeurSessionOrderByWithRelationInput | BilanVendeurSessionOrderByWithRelationInput[]
    cursor?: BilanVendeurSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BilanVendeurSessionScalarFieldEnum | BilanVendeurSessionScalarFieldEnum[]
  }

  /**
   * Vendeur without action
   */
  export type VendeurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendeur
     */
    select?: VendeurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendeurInclude<ExtArgs> | null
  }


  /**
   * Model DepotJeu
   */

  export type AggregateDepotJeu = {
    _count: DepotJeuCountAggregateOutputType | null
    _avg: DepotJeuAvgAggregateOutputType | null
    _sum: DepotJeuSumAggregateOutputType | null
    _min: DepotJeuMinAggregateOutputType | null
    _max: DepotJeuMaxAggregateOutputType | null
  }

  export type DepotJeuAvgAggregateOutputType = {
    depot_ID: number | null
    JeuID: number | null
    quantite_depose: number | null
    comission_depot: number | null
  }

  export type DepotJeuSumAggregateOutputType = {
    depot_ID: number | null
    JeuID: number | null
    quantite_depose: number | null
    comission_depot: number | null
  }

  export type DepotJeuMinAggregateOutputType = {
    depot_ID: number | null
    JeuID: number | null
    quantite_depose: number | null
    comission_depot: number | null
  }

  export type DepotJeuMaxAggregateOutputType = {
    depot_ID: number | null
    JeuID: number | null
    quantite_depose: number | null
    comission_depot: number | null
  }

  export type DepotJeuCountAggregateOutputType = {
    depot_ID: number
    JeuID: number
    quantite_depose: number
    comission_depot: number
    _all: number
  }


  export type DepotJeuAvgAggregateInputType = {
    depot_ID?: true
    JeuID?: true
    quantite_depose?: true
    comission_depot?: true
  }

  export type DepotJeuSumAggregateInputType = {
    depot_ID?: true
    JeuID?: true
    quantite_depose?: true
    comission_depot?: true
  }

  export type DepotJeuMinAggregateInputType = {
    depot_ID?: true
    JeuID?: true
    quantite_depose?: true
    comission_depot?: true
  }

  export type DepotJeuMaxAggregateInputType = {
    depot_ID?: true
    JeuID?: true
    quantite_depose?: true
    comission_depot?: true
  }

  export type DepotJeuCountAggregateInputType = {
    depot_ID?: true
    JeuID?: true
    quantite_depose?: true
    comission_depot?: true
    _all?: true
  }

  export type DepotJeuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepotJeu to aggregate.
     */
    where?: DepotJeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepotJeus to fetch.
     */
    orderBy?: DepotJeuOrderByWithRelationInput | DepotJeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepotJeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepotJeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepotJeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepotJeus
    **/
    _count?: true | DepotJeuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepotJeuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepotJeuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepotJeuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepotJeuMaxAggregateInputType
  }

  export type GetDepotJeuAggregateType<T extends DepotJeuAggregateArgs> = {
        [P in keyof T & keyof AggregateDepotJeu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepotJeu[P]>
      : GetScalarType<T[P], AggregateDepotJeu[P]>
  }




  export type DepotJeuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepotJeuWhereInput
    orderBy?: DepotJeuOrderByWithAggregationInput | DepotJeuOrderByWithAggregationInput[]
    by: DepotJeuScalarFieldEnum[] | DepotJeuScalarFieldEnum
    having?: DepotJeuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepotJeuCountAggregateInputType | true
    _avg?: DepotJeuAvgAggregateInputType
    _sum?: DepotJeuSumAggregateInputType
    _min?: DepotJeuMinAggregateInputType
    _max?: DepotJeuMaxAggregateInputType
  }

  export type DepotJeuGroupByOutputType = {
    depot_ID: number
    JeuID: number
    quantite_depose: number
    comission_depot: number
    _count: DepotJeuCountAggregateOutputType | null
    _avg: DepotJeuAvgAggregateOutputType | null
    _sum: DepotJeuSumAggregateOutputType | null
    _min: DepotJeuMinAggregateOutputType | null
    _max: DepotJeuMaxAggregateOutputType | null
  }

  type GetDepotJeuGroupByPayload<T extends DepotJeuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepotJeuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepotJeuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepotJeuGroupByOutputType[P]>
            : GetScalarType<T[P], DepotJeuGroupByOutputType[P]>
        }
      >
    >


  export type DepotJeuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    depot_ID?: boolean
    JeuID?: boolean
    quantite_depose?: boolean
    comission_depot?: boolean
    depot?: boolean | DepotDefaultArgs<ExtArgs>
    jeu?: boolean | JeuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["depotJeu"]>

  export type DepotJeuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    depot_ID?: boolean
    JeuID?: boolean
    quantite_depose?: boolean
    comission_depot?: boolean
    depot?: boolean | DepotDefaultArgs<ExtArgs>
    jeu?: boolean | JeuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["depotJeu"]>

  export type DepotJeuSelectScalar = {
    depot_ID?: boolean
    JeuID?: boolean
    quantite_depose?: boolean
    comission_depot?: boolean
  }

  export type DepotJeuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    depot?: boolean | DepotDefaultArgs<ExtArgs>
    jeu?: boolean | JeuDefaultArgs<ExtArgs>
  }
  export type DepotJeuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    depot?: boolean | DepotDefaultArgs<ExtArgs>
    jeu?: boolean | JeuDefaultArgs<ExtArgs>
  }

  export type $DepotJeuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepotJeu"
    objects: {
      depot: Prisma.$DepotPayload<ExtArgs>
      jeu: Prisma.$JeuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      depot_ID: number
      JeuID: number
      quantite_depose: number
      comission_depot: number
    }, ExtArgs["result"]["depotJeu"]>
    composites: {}
  }

  type DepotJeuGetPayload<S extends boolean | null | undefined | DepotJeuDefaultArgs> = $Result.GetResult<Prisma.$DepotJeuPayload, S>

  type DepotJeuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepotJeuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepotJeuCountAggregateInputType | true
    }

  export interface DepotJeuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepotJeu'], meta: { name: 'DepotJeu' } }
    /**
     * Find zero or one DepotJeu that matches the filter.
     * @param {DepotJeuFindUniqueArgs} args - Arguments to find a DepotJeu
     * @example
     * // Get one DepotJeu
     * const depotJeu = await prisma.depotJeu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepotJeuFindUniqueArgs>(args: SelectSubset<T, DepotJeuFindUniqueArgs<ExtArgs>>): Prisma__DepotJeuClient<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DepotJeu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepotJeuFindUniqueOrThrowArgs} args - Arguments to find a DepotJeu
     * @example
     * // Get one DepotJeu
     * const depotJeu = await prisma.depotJeu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepotJeuFindUniqueOrThrowArgs>(args: SelectSubset<T, DepotJeuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepotJeuClient<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DepotJeu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotJeuFindFirstArgs} args - Arguments to find a DepotJeu
     * @example
     * // Get one DepotJeu
     * const depotJeu = await prisma.depotJeu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepotJeuFindFirstArgs>(args?: SelectSubset<T, DepotJeuFindFirstArgs<ExtArgs>>): Prisma__DepotJeuClient<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DepotJeu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotJeuFindFirstOrThrowArgs} args - Arguments to find a DepotJeu
     * @example
     * // Get one DepotJeu
     * const depotJeu = await prisma.depotJeu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepotJeuFindFirstOrThrowArgs>(args?: SelectSubset<T, DepotJeuFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepotJeuClient<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DepotJeus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotJeuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepotJeus
     * const depotJeus = await prisma.depotJeu.findMany()
     * 
     * // Get first 10 DepotJeus
     * const depotJeus = await prisma.depotJeu.findMany({ take: 10 })
     * 
     * // Only select the `depot_ID`
     * const depotJeuWithDepot_IDOnly = await prisma.depotJeu.findMany({ select: { depot_ID: true } })
     * 
     */
    findMany<T extends DepotJeuFindManyArgs>(args?: SelectSubset<T, DepotJeuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DepotJeu.
     * @param {DepotJeuCreateArgs} args - Arguments to create a DepotJeu.
     * @example
     * // Create one DepotJeu
     * const DepotJeu = await prisma.depotJeu.create({
     *   data: {
     *     // ... data to create a DepotJeu
     *   }
     * })
     * 
     */
    create<T extends DepotJeuCreateArgs>(args: SelectSubset<T, DepotJeuCreateArgs<ExtArgs>>): Prisma__DepotJeuClient<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DepotJeus.
     * @param {DepotJeuCreateManyArgs} args - Arguments to create many DepotJeus.
     * @example
     * // Create many DepotJeus
     * const depotJeu = await prisma.depotJeu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepotJeuCreateManyArgs>(args?: SelectSubset<T, DepotJeuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepotJeus and returns the data saved in the database.
     * @param {DepotJeuCreateManyAndReturnArgs} args - Arguments to create many DepotJeus.
     * @example
     * // Create many DepotJeus
     * const depotJeu = await prisma.depotJeu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepotJeus and only return the `depot_ID`
     * const depotJeuWithDepot_IDOnly = await prisma.depotJeu.createManyAndReturn({ 
     *   select: { depot_ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepotJeuCreateManyAndReturnArgs>(args?: SelectSubset<T, DepotJeuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DepotJeu.
     * @param {DepotJeuDeleteArgs} args - Arguments to delete one DepotJeu.
     * @example
     * // Delete one DepotJeu
     * const DepotJeu = await prisma.depotJeu.delete({
     *   where: {
     *     // ... filter to delete one DepotJeu
     *   }
     * })
     * 
     */
    delete<T extends DepotJeuDeleteArgs>(args: SelectSubset<T, DepotJeuDeleteArgs<ExtArgs>>): Prisma__DepotJeuClient<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DepotJeu.
     * @param {DepotJeuUpdateArgs} args - Arguments to update one DepotJeu.
     * @example
     * // Update one DepotJeu
     * const depotJeu = await prisma.depotJeu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepotJeuUpdateArgs>(args: SelectSubset<T, DepotJeuUpdateArgs<ExtArgs>>): Prisma__DepotJeuClient<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DepotJeus.
     * @param {DepotJeuDeleteManyArgs} args - Arguments to filter DepotJeus to delete.
     * @example
     * // Delete a few DepotJeus
     * const { count } = await prisma.depotJeu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepotJeuDeleteManyArgs>(args?: SelectSubset<T, DepotJeuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepotJeus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotJeuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepotJeus
     * const depotJeu = await prisma.depotJeu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepotJeuUpdateManyArgs>(args: SelectSubset<T, DepotJeuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DepotJeu.
     * @param {DepotJeuUpsertArgs} args - Arguments to update or create a DepotJeu.
     * @example
     * // Update or create a DepotJeu
     * const depotJeu = await prisma.depotJeu.upsert({
     *   create: {
     *     // ... data to create a DepotJeu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepotJeu we want to update
     *   }
     * })
     */
    upsert<T extends DepotJeuUpsertArgs>(args: SelectSubset<T, DepotJeuUpsertArgs<ExtArgs>>): Prisma__DepotJeuClient<$Result.GetResult<Prisma.$DepotJeuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DepotJeus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotJeuCountArgs} args - Arguments to filter DepotJeus to count.
     * @example
     * // Count the number of DepotJeus
     * const count = await prisma.depotJeu.count({
     *   where: {
     *     // ... the filter for the DepotJeus we want to count
     *   }
     * })
    **/
    count<T extends DepotJeuCountArgs>(
      args?: Subset<T, DepotJeuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepotJeuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepotJeu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotJeuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepotJeuAggregateArgs>(args: Subset<T, DepotJeuAggregateArgs>): Prisma.PrismaPromise<GetDepotJeuAggregateType<T>>

    /**
     * Group by DepotJeu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepotJeuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepotJeuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepotJeuGroupByArgs['orderBy'] }
        : { orderBy?: DepotJeuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepotJeuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepotJeuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepotJeu model
   */
  readonly fields: DepotJeuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepotJeu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepotJeuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    depot<T extends DepotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepotDefaultArgs<ExtArgs>>): Prisma__DepotClient<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jeu<T extends JeuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JeuDefaultArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepotJeu model
   */ 
  interface DepotJeuFieldRefs {
    readonly depot_ID: FieldRef<"DepotJeu", 'Int'>
    readonly JeuID: FieldRef<"DepotJeu", 'Int'>
    readonly quantite_depose: FieldRef<"DepotJeu", 'Int'>
    readonly comission_depot: FieldRef<"DepotJeu", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * DepotJeu findUnique
   */
  export type DepotJeuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * Filter, which DepotJeu to fetch.
     */
    where: DepotJeuWhereUniqueInput
  }

  /**
   * DepotJeu findUniqueOrThrow
   */
  export type DepotJeuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * Filter, which DepotJeu to fetch.
     */
    where: DepotJeuWhereUniqueInput
  }

  /**
   * DepotJeu findFirst
   */
  export type DepotJeuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * Filter, which DepotJeu to fetch.
     */
    where?: DepotJeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepotJeus to fetch.
     */
    orderBy?: DepotJeuOrderByWithRelationInput | DepotJeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepotJeus.
     */
    cursor?: DepotJeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepotJeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepotJeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepotJeus.
     */
    distinct?: DepotJeuScalarFieldEnum | DepotJeuScalarFieldEnum[]
  }

  /**
   * DepotJeu findFirstOrThrow
   */
  export type DepotJeuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * Filter, which DepotJeu to fetch.
     */
    where?: DepotJeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepotJeus to fetch.
     */
    orderBy?: DepotJeuOrderByWithRelationInput | DepotJeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepotJeus.
     */
    cursor?: DepotJeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepotJeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepotJeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepotJeus.
     */
    distinct?: DepotJeuScalarFieldEnum | DepotJeuScalarFieldEnum[]
  }

  /**
   * DepotJeu findMany
   */
  export type DepotJeuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * Filter, which DepotJeus to fetch.
     */
    where?: DepotJeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepotJeus to fetch.
     */
    orderBy?: DepotJeuOrderByWithRelationInput | DepotJeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepotJeus.
     */
    cursor?: DepotJeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepotJeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepotJeus.
     */
    skip?: number
    distinct?: DepotJeuScalarFieldEnum | DepotJeuScalarFieldEnum[]
  }

  /**
   * DepotJeu create
   */
  export type DepotJeuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * The data needed to create a DepotJeu.
     */
    data: XOR<DepotJeuCreateInput, DepotJeuUncheckedCreateInput>
  }

  /**
   * DepotJeu createMany
   */
  export type DepotJeuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepotJeus.
     */
    data: DepotJeuCreateManyInput | DepotJeuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepotJeu createManyAndReturn
   */
  export type DepotJeuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DepotJeus.
     */
    data: DepotJeuCreateManyInput | DepotJeuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepotJeu update
   */
  export type DepotJeuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * The data needed to update a DepotJeu.
     */
    data: XOR<DepotJeuUpdateInput, DepotJeuUncheckedUpdateInput>
    /**
     * Choose, which DepotJeu to update.
     */
    where: DepotJeuWhereUniqueInput
  }

  /**
   * DepotJeu updateMany
   */
  export type DepotJeuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepotJeus.
     */
    data: XOR<DepotJeuUpdateManyMutationInput, DepotJeuUncheckedUpdateManyInput>
    /**
     * Filter which DepotJeus to update
     */
    where?: DepotJeuWhereInput
  }

  /**
   * DepotJeu upsert
   */
  export type DepotJeuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * The filter to search for the DepotJeu to update in case it exists.
     */
    where: DepotJeuWhereUniqueInput
    /**
     * In case the DepotJeu found by the `where` argument doesn't exist, create a new DepotJeu with this data.
     */
    create: XOR<DepotJeuCreateInput, DepotJeuUncheckedCreateInput>
    /**
     * In case the DepotJeu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepotJeuUpdateInput, DepotJeuUncheckedUpdateInput>
  }

  /**
   * DepotJeu delete
   */
  export type DepotJeuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
    /**
     * Filter which DepotJeu to delete.
     */
    where: DepotJeuWhereUniqueInput
  }

  /**
   * DepotJeu deleteMany
   */
  export type DepotJeuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepotJeus to delete
     */
    where?: DepotJeuWhereInput
  }

  /**
   * DepotJeu without action
   */
  export type DepotJeuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepotJeu
     */
    select?: DepotJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotJeuInclude<ExtArgs> | null
  }


  /**
   * Model Achat
   */

  export type AggregateAchat = {
    _count: AchatCountAggregateOutputType | null
    _avg: AchatAvgAggregateOutputType | null
    _sum: AchatSumAggregateOutputType | null
    _min: AchatMinAggregateOutputType | null
    _max: AchatMaxAggregateOutputType | null
  }

  export type AchatAvgAggregateOutputType = {
    AchatID: number | null
    Total_paye: number | null
    id_session: number | null
    comission_vente_total: number | null
  }

  export type AchatSumAggregateOutputType = {
    AchatID: number | null
    Total_paye: number | null
    id_session: number | null
    comission_vente_total: number | null
  }

  export type AchatMinAggregateOutputType = {
    AchatID: number | null
    Total_paye: number | null
    id_session: number | null
    DateAchat: Date | null
    comission_vente_total: number | null
  }

  export type AchatMaxAggregateOutputType = {
    AchatID: number | null
    Total_paye: number | null
    id_session: number | null
    DateAchat: Date | null
    comission_vente_total: number | null
  }

  export type AchatCountAggregateOutputType = {
    AchatID: number
    Total_paye: number
    id_session: number
    DateAchat: number
    comission_vente_total: number
    _all: number
  }


  export type AchatAvgAggregateInputType = {
    AchatID?: true
    Total_paye?: true
    id_session?: true
    comission_vente_total?: true
  }

  export type AchatSumAggregateInputType = {
    AchatID?: true
    Total_paye?: true
    id_session?: true
    comission_vente_total?: true
  }

  export type AchatMinAggregateInputType = {
    AchatID?: true
    Total_paye?: true
    id_session?: true
    DateAchat?: true
    comission_vente_total?: true
  }

  export type AchatMaxAggregateInputType = {
    AchatID?: true
    Total_paye?: true
    id_session?: true
    DateAchat?: true
    comission_vente_total?: true
  }

  export type AchatCountAggregateInputType = {
    AchatID?: true
    Total_paye?: true
    id_session?: true
    DateAchat?: true
    comission_vente_total?: true
    _all?: true
  }

  export type AchatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achat to aggregate.
     */
    where?: AchatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achats to fetch.
     */
    orderBy?: AchatOrderByWithRelationInput | AchatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achats
    **/
    _count?: true | AchatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchatMaxAggregateInputType
  }

  export type GetAchatAggregateType<T extends AchatAggregateArgs> = {
        [P in keyof T & keyof AggregateAchat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchat[P]>
      : GetScalarType<T[P], AggregateAchat[P]>
  }




  export type AchatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchatWhereInput
    orderBy?: AchatOrderByWithAggregationInput | AchatOrderByWithAggregationInput[]
    by: AchatScalarFieldEnum[] | AchatScalarFieldEnum
    having?: AchatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchatCountAggregateInputType | true
    _avg?: AchatAvgAggregateInputType
    _sum?: AchatSumAggregateInputType
    _min?: AchatMinAggregateInputType
    _max?: AchatMaxAggregateInputType
  }

  export type AchatGroupByOutputType = {
    AchatID: number
    Total_paye: number
    id_session: number
    DateAchat: Date
    comission_vente_total: number
    _count: AchatCountAggregateOutputType | null
    _avg: AchatAvgAggregateOutputType | null
    _sum: AchatSumAggregateOutputType | null
    _min: AchatMinAggregateOutputType | null
    _max: AchatMaxAggregateOutputType | null
  }

  type GetAchatGroupByPayload<T extends AchatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchatGroupByOutputType[P]>
            : GetScalarType<T[P], AchatGroupByOutputType[P]>
        }
      >
    >


  export type AchatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AchatID?: boolean
    Total_paye?: boolean
    id_session?: boolean
    DateAchat?: boolean
    comission_vente_total?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
    achat_jeux?: boolean | Achat$achat_jeuxArgs<ExtArgs>
    _count?: boolean | AchatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achat"]>

  export type AchatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AchatID?: boolean
    Total_paye?: boolean
    id_session?: boolean
    DateAchat?: boolean
    comission_vente_total?: boolean
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achat"]>

  export type AchatSelectScalar = {
    AchatID?: boolean
    Total_paye?: boolean
    id_session?: boolean
    DateAchat?: boolean
    comission_vente_total?: boolean
  }

  export type AchatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
    achat_jeux?: boolean | Achat$achat_jeuxArgs<ExtArgs>
    _count?: boolean | AchatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AchatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }

  export type $AchatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achat"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs>
      achat_jeux: Prisma.$AchatJeuPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      AchatID: number
      Total_paye: number
      id_session: number
      DateAchat: Date
      comission_vente_total: number
    }, ExtArgs["result"]["achat"]>
    composites: {}
  }

  type AchatGetPayload<S extends boolean | null | undefined | AchatDefaultArgs> = $Result.GetResult<Prisma.$AchatPayload, S>

  type AchatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AchatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AchatCountAggregateInputType | true
    }

  export interface AchatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achat'], meta: { name: 'Achat' } }
    /**
     * Find zero or one Achat that matches the filter.
     * @param {AchatFindUniqueArgs} args - Arguments to find a Achat
     * @example
     * // Get one Achat
     * const achat = await prisma.achat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchatFindUniqueArgs>(args: SelectSubset<T, AchatFindUniqueArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Achat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AchatFindUniqueOrThrowArgs} args - Arguments to find a Achat
     * @example
     * // Get one Achat
     * const achat = await prisma.achat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchatFindUniqueOrThrowArgs>(args: SelectSubset<T, AchatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Achat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatFindFirstArgs} args - Arguments to find a Achat
     * @example
     * // Get one Achat
     * const achat = await prisma.achat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchatFindFirstArgs>(args?: SelectSubset<T, AchatFindFirstArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Achat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatFindFirstOrThrowArgs} args - Arguments to find a Achat
     * @example
     * // Get one Achat
     * const achat = await prisma.achat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchatFindFirstOrThrowArgs>(args?: SelectSubset<T, AchatFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Achats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achats
     * const achats = await prisma.achat.findMany()
     * 
     * // Get first 10 Achats
     * const achats = await prisma.achat.findMany({ take: 10 })
     * 
     * // Only select the `AchatID`
     * const achatWithAchatIDOnly = await prisma.achat.findMany({ select: { AchatID: true } })
     * 
     */
    findMany<T extends AchatFindManyArgs>(args?: SelectSubset<T, AchatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Achat.
     * @param {AchatCreateArgs} args - Arguments to create a Achat.
     * @example
     * // Create one Achat
     * const Achat = await prisma.achat.create({
     *   data: {
     *     // ... data to create a Achat
     *   }
     * })
     * 
     */
    create<T extends AchatCreateArgs>(args: SelectSubset<T, AchatCreateArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Achats.
     * @param {AchatCreateManyArgs} args - Arguments to create many Achats.
     * @example
     * // Create many Achats
     * const achat = await prisma.achat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchatCreateManyArgs>(args?: SelectSubset<T, AchatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achats and returns the data saved in the database.
     * @param {AchatCreateManyAndReturnArgs} args - Arguments to create many Achats.
     * @example
     * // Create many Achats
     * const achat = await prisma.achat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achats and only return the `AchatID`
     * const achatWithAchatIDOnly = await prisma.achat.createManyAndReturn({ 
     *   select: { AchatID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchatCreateManyAndReturnArgs>(args?: SelectSubset<T, AchatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Achat.
     * @param {AchatDeleteArgs} args - Arguments to delete one Achat.
     * @example
     * // Delete one Achat
     * const Achat = await prisma.achat.delete({
     *   where: {
     *     // ... filter to delete one Achat
     *   }
     * })
     * 
     */
    delete<T extends AchatDeleteArgs>(args: SelectSubset<T, AchatDeleteArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Achat.
     * @param {AchatUpdateArgs} args - Arguments to update one Achat.
     * @example
     * // Update one Achat
     * const achat = await prisma.achat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchatUpdateArgs>(args: SelectSubset<T, AchatUpdateArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Achats.
     * @param {AchatDeleteManyArgs} args - Arguments to filter Achats to delete.
     * @example
     * // Delete a few Achats
     * const { count } = await prisma.achat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchatDeleteManyArgs>(args?: SelectSubset<T, AchatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achats
     * const achat = await prisma.achat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchatUpdateManyArgs>(args: SelectSubset<T, AchatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Achat.
     * @param {AchatUpsertArgs} args - Arguments to update or create a Achat.
     * @example
     * // Update or create a Achat
     * const achat = await prisma.achat.upsert({
     *   create: {
     *     // ... data to create a Achat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achat we want to update
     *   }
     * })
     */
    upsert<T extends AchatUpsertArgs>(args: SelectSubset<T, AchatUpsertArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Achats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatCountArgs} args - Arguments to filter Achats to count.
     * @example
     * // Count the number of Achats
     * const count = await prisma.achat.count({
     *   where: {
     *     // ... the filter for the Achats we want to count
     *   }
     * })
    **/
    count<T extends AchatCountArgs>(
      args?: Subset<T, AchatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchatAggregateArgs>(args: Subset<T, AchatAggregateArgs>): Prisma.PrismaPromise<GetAchatAggregateType<T>>

    /**
     * Group by Achat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchatGroupByArgs['orderBy'] }
        : { orderBy?: AchatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achat model
   */
  readonly fields: AchatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    achat_jeux<T extends Achat$achat_jeuxArgs<ExtArgs> = {}>(args?: Subset<T, Achat$achat_jeuxArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achat model
   */ 
  interface AchatFieldRefs {
    readonly AchatID: FieldRef<"Achat", 'Int'>
    readonly Total_paye: FieldRef<"Achat", 'Float'>
    readonly id_session: FieldRef<"Achat", 'Int'>
    readonly DateAchat: FieldRef<"Achat", 'DateTime'>
    readonly comission_vente_total: FieldRef<"Achat", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Achat findUnique
   */
  export type AchatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * Filter, which Achat to fetch.
     */
    where: AchatWhereUniqueInput
  }

  /**
   * Achat findUniqueOrThrow
   */
  export type AchatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * Filter, which Achat to fetch.
     */
    where: AchatWhereUniqueInput
  }

  /**
   * Achat findFirst
   */
  export type AchatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * Filter, which Achat to fetch.
     */
    where?: AchatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achats to fetch.
     */
    orderBy?: AchatOrderByWithRelationInput | AchatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achats.
     */
    cursor?: AchatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achats.
     */
    distinct?: AchatScalarFieldEnum | AchatScalarFieldEnum[]
  }

  /**
   * Achat findFirstOrThrow
   */
  export type AchatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * Filter, which Achat to fetch.
     */
    where?: AchatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achats to fetch.
     */
    orderBy?: AchatOrderByWithRelationInput | AchatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achats.
     */
    cursor?: AchatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achats.
     */
    distinct?: AchatScalarFieldEnum | AchatScalarFieldEnum[]
  }

  /**
   * Achat findMany
   */
  export type AchatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * Filter, which Achats to fetch.
     */
    where?: AchatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achats to fetch.
     */
    orderBy?: AchatOrderByWithRelationInput | AchatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achats.
     */
    cursor?: AchatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achats.
     */
    skip?: number
    distinct?: AchatScalarFieldEnum | AchatScalarFieldEnum[]
  }

  /**
   * Achat create
   */
  export type AchatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * The data needed to create a Achat.
     */
    data: XOR<AchatCreateInput, AchatUncheckedCreateInput>
  }

  /**
   * Achat createMany
   */
  export type AchatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achats.
     */
    data: AchatCreateManyInput | AchatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achat createManyAndReturn
   */
  export type AchatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Achats.
     */
    data: AchatCreateManyInput | AchatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Achat update
   */
  export type AchatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * The data needed to update a Achat.
     */
    data: XOR<AchatUpdateInput, AchatUncheckedUpdateInput>
    /**
     * Choose, which Achat to update.
     */
    where: AchatWhereUniqueInput
  }

  /**
   * Achat updateMany
   */
  export type AchatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achats.
     */
    data: XOR<AchatUpdateManyMutationInput, AchatUncheckedUpdateManyInput>
    /**
     * Filter which Achats to update
     */
    where?: AchatWhereInput
  }

  /**
   * Achat upsert
   */
  export type AchatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * The filter to search for the Achat to update in case it exists.
     */
    where: AchatWhereUniqueInput
    /**
     * In case the Achat found by the `where` argument doesn't exist, create a new Achat with this data.
     */
    create: XOR<AchatCreateInput, AchatUncheckedCreateInput>
    /**
     * In case the Achat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchatUpdateInput, AchatUncheckedUpdateInput>
  }

  /**
   * Achat delete
   */
  export type AchatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    /**
     * Filter which Achat to delete.
     */
    where: AchatWhereUniqueInput
  }

  /**
   * Achat deleteMany
   */
  export type AchatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achats to delete
     */
    where?: AchatWhereInput
  }

  /**
   * Achat.achat_jeux
   */
  export type Achat$achat_jeuxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    where?: AchatJeuWhereInput
    orderBy?: AchatJeuOrderByWithRelationInput | AchatJeuOrderByWithRelationInput[]
    cursor?: AchatJeuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AchatJeuScalarFieldEnum | AchatJeuScalarFieldEnum[]
  }

  /**
   * Achat without action
   */
  export type AchatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
  }


  /**
   * Model AchatJeu
   */

  export type AggregateAchatJeu = {
    _count: AchatJeuCountAggregateOutputType | null
    _avg: AchatJeuAvgAggregateOutputType | null
    _sum: AchatJeuSumAggregateOutputType | null
    _min: AchatJeuMinAggregateOutputType | null
    _max: AchatJeuMaxAggregateOutputType | null
  }

  export type AchatJeuAvgAggregateOutputType = {
    AchatID: number | null
    JeuID: number | null
    comission_vente: number | null
    quantite_achete: number | null
  }

  export type AchatJeuSumAggregateOutputType = {
    AchatID: number | null
    JeuID: number | null
    comission_vente: number | null
    quantite_achete: number | null
  }

  export type AchatJeuMinAggregateOutputType = {
    AchatID: number | null
    JeuID: number | null
    comission_vente: number | null
    quantite_achete: number | null
  }

  export type AchatJeuMaxAggregateOutputType = {
    AchatID: number | null
    JeuID: number | null
    comission_vente: number | null
    quantite_achete: number | null
  }

  export type AchatJeuCountAggregateOutputType = {
    AchatID: number
    JeuID: number
    comission_vente: number
    quantite_achete: number
    _all: number
  }


  export type AchatJeuAvgAggregateInputType = {
    AchatID?: true
    JeuID?: true
    comission_vente?: true
    quantite_achete?: true
  }

  export type AchatJeuSumAggregateInputType = {
    AchatID?: true
    JeuID?: true
    comission_vente?: true
    quantite_achete?: true
  }

  export type AchatJeuMinAggregateInputType = {
    AchatID?: true
    JeuID?: true
    comission_vente?: true
    quantite_achete?: true
  }

  export type AchatJeuMaxAggregateInputType = {
    AchatID?: true
    JeuID?: true
    comission_vente?: true
    quantite_achete?: true
  }

  export type AchatJeuCountAggregateInputType = {
    AchatID?: true
    JeuID?: true
    comission_vente?: true
    quantite_achete?: true
    _all?: true
  }

  export type AchatJeuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AchatJeu to aggregate.
     */
    where?: AchatJeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AchatJeus to fetch.
     */
    orderBy?: AchatJeuOrderByWithRelationInput | AchatJeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchatJeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AchatJeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AchatJeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AchatJeus
    **/
    _count?: true | AchatJeuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AchatJeuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AchatJeuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchatJeuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchatJeuMaxAggregateInputType
  }

  export type GetAchatJeuAggregateType<T extends AchatJeuAggregateArgs> = {
        [P in keyof T & keyof AggregateAchatJeu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchatJeu[P]>
      : GetScalarType<T[P], AggregateAchatJeu[P]>
  }




  export type AchatJeuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchatJeuWhereInput
    orderBy?: AchatJeuOrderByWithAggregationInput | AchatJeuOrderByWithAggregationInput[]
    by: AchatJeuScalarFieldEnum[] | AchatJeuScalarFieldEnum
    having?: AchatJeuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchatJeuCountAggregateInputType | true
    _avg?: AchatJeuAvgAggregateInputType
    _sum?: AchatJeuSumAggregateInputType
    _min?: AchatJeuMinAggregateInputType
    _max?: AchatJeuMaxAggregateInputType
  }

  export type AchatJeuGroupByOutputType = {
    AchatID: number
    JeuID: number
    comission_vente: number
    quantite_achete: number
    _count: AchatJeuCountAggregateOutputType | null
    _avg: AchatJeuAvgAggregateOutputType | null
    _sum: AchatJeuSumAggregateOutputType | null
    _min: AchatJeuMinAggregateOutputType | null
    _max: AchatJeuMaxAggregateOutputType | null
  }

  type GetAchatJeuGroupByPayload<T extends AchatJeuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchatJeuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchatJeuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchatJeuGroupByOutputType[P]>
            : GetScalarType<T[P], AchatJeuGroupByOutputType[P]>
        }
      >
    >


  export type AchatJeuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AchatID?: boolean
    JeuID?: boolean
    comission_vente?: boolean
    quantite_achete?: boolean
    achat?: boolean | AchatDefaultArgs<ExtArgs>
    jeu?: boolean | JeuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achatJeu"]>

  export type AchatJeuSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AchatID?: boolean
    JeuID?: boolean
    comission_vente?: boolean
    quantite_achete?: boolean
    achat?: boolean | AchatDefaultArgs<ExtArgs>
    jeu?: boolean | JeuDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achatJeu"]>

  export type AchatJeuSelectScalar = {
    AchatID?: boolean
    JeuID?: boolean
    comission_vente?: boolean
    quantite_achete?: boolean
  }

  export type AchatJeuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    achat?: boolean | AchatDefaultArgs<ExtArgs>
    jeu?: boolean | JeuDefaultArgs<ExtArgs>
  }
  export type AchatJeuIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    achat?: boolean | AchatDefaultArgs<ExtArgs>
    jeu?: boolean | JeuDefaultArgs<ExtArgs>
  }

  export type $AchatJeuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AchatJeu"
    objects: {
      achat: Prisma.$AchatPayload<ExtArgs>
      jeu: Prisma.$JeuPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      AchatID: number
      JeuID: number
      comission_vente: number
      quantite_achete: number
    }, ExtArgs["result"]["achatJeu"]>
    composites: {}
  }

  type AchatJeuGetPayload<S extends boolean | null | undefined | AchatJeuDefaultArgs> = $Result.GetResult<Prisma.$AchatJeuPayload, S>

  type AchatJeuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AchatJeuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AchatJeuCountAggregateInputType | true
    }

  export interface AchatJeuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AchatJeu'], meta: { name: 'AchatJeu' } }
    /**
     * Find zero or one AchatJeu that matches the filter.
     * @param {AchatJeuFindUniqueArgs} args - Arguments to find a AchatJeu
     * @example
     * // Get one AchatJeu
     * const achatJeu = await prisma.achatJeu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchatJeuFindUniqueArgs>(args: SelectSubset<T, AchatJeuFindUniqueArgs<ExtArgs>>): Prisma__AchatJeuClient<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AchatJeu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AchatJeuFindUniqueOrThrowArgs} args - Arguments to find a AchatJeu
     * @example
     * // Get one AchatJeu
     * const achatJeu = await prisma.achatJeu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchatJeuFindUniqueOrThrowArgs>(args: SelectSubset<T, AchatJeuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchatJeuClient<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AchatJeu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatJeuFindFirstArgs} args - Arguments to find a AchatJeu
     * @example
     * // Get one AchatJeu
     * const achatJeu = await prisma.achatJeu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchatJeuFindFirstArgs>(args?: SelectSubset<T, AchatJeuFindFirstArgs<ExtArgs>>): Prisma__AchatJeuClient<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AchatJeu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatJeuFindFirstOrThrowArgs} args - Arguments to find a AchatJeu
     * @example
     * // Get one AchatJeu
     * const achatJeu = await prisma.achatJeu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchatJeuFindFirstOrThrowArgs>(args?: SelectSubset<T, AchatJeuFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchatJeuClient<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AchatJeus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatJeuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AchatJeus
     * const achatJeus = await prisma.achatJeu.findMany()
     * 
     * // Get first 10 AchatJeus
     * const achatJeus = await prisma.achatJeu.findMany({ take: 10 })
     * 
     * // Only select the `AchatID`
     * const achatJeuWithAchatIDOnly = await prisma.achatJeu.findMany({ select: { AchatID: true } })
     * 
     */
    findMany<T extends AchatJeuFindManyArgs>(args?: SelectSubset<T, AchatJeuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AchatJeu.
     * @param {AchatJeuCreateArgs} args - Arguments to create a AchatJeu.
     * @example
     * // Create one AchatJeu
     * const AchatJeu = await prisma.achatJeu.create({
     *   data: {
     *     // ... data to create a AchatJeu
     *   }
     * })
     * 
     */
    create<T extends AchatJeuCreateArgs>(args: SelectSubset<T, AchatJeuCreateArgs<ExtArgs>>): Prisma__AchatJeuClient<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AchatJeus.
     * @param {AchatJeuCreateManyArgs} args - Arguments to create many AchatJeus.
     * @example
     * // Create many AchatJeus
     * const achatJeu = await prisma.achatJeu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchatJeuCreateManyArgs>(args?: SelectSubset<T, AchatJeuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AchatJeus and returns the data saved in the database.
     * @param {AchatJeuCreateManyAndReturnArgs} args - Arguments to create many AchatJeus.
     * @example
     * // Create many AchatJeus
     * const achatJeu = await prisma.achatJeu.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AchatJeus and only return the `AchatID`
     * const achatJeuWithAchatIDOnly = await prisma.achatJeu.createManyAndReturn({ 
     *   select: { AchatID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchatJeuCreateManyAndReturnArgs>(args?: SelectSubset<T, AchatJeuCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AchatJeu.
     * @param {AchatJeuDeleteArgs} args - Arguments to delete one AchatJeu.
     * @example
     * // Delete one AchatJeu
     * const AchatJeu = await prisma.achatJeu.delete({
     *   where: {
     *     // ... filter to delete one AchatJeu
     *   }
     * })
     * 
     */
    delete<T extends AchatJeuDeleteArgs>(args: SelectSubset<T, AchatJeuDeleteArgs<ExtArgs>>): Prisma__AchatJeuClient<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AchatJeu.
     * @param {AchatJeuUpdateArgs} args - Arguments to update one AchatJeu.
     * @example
     * // Update one AchatJeu
     * const achatJeu = await prisma.achatJeu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchatJeuUpdateArgs>(args: SelectSubset<T, AchatJeuUpdateArgs<ExtArgs>>): Prisma__AchatJeuClient<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AchatJeus.
     * @param {AchatJeuDeleteManyArgs} args - Arguments to filter AchatJeus to delete.
     * @example
     * // Delete a few AchatJeus
     * const { count } = await prisma.achatJeu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchatJeuDeleteManyArgs>(args?: SelectSubset<T, AchatJeuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AchatJeus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatJeuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AchatJeus
     * const achatJeu = await prisma.achatJeu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchatJeuUpdateManyArgs>(args: SelectSubset<T, AchatJeuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AchatJeu.
     * @param {AchatJeuUpsertArgs} args - Arguments to update or create a AchatJeu.
     * @example
     * // Update or create a AchatJeu
     * const achatJeu = await prisma.achatJeu.upsert({
     *   create: {
     *     // ... data to create a AchatJeu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AchatJeu we want to update
     *   }
     * })
     */
    upsert<T extends AchatJeuUpsertArgs>(args: SelectSubset<T, AchatJeuUpsertArgs<ExtArgs>>): Prisma__AchatJeuClient<$Result.GetResult<Prisma.$AchatJeuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AchatJeus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatJeuCountArgs} args - Arguments to filter AchatJeus to count.
     * @example
     * // Count the number of AchatJeus
     * const count = await prisma.achatJeu.count({
     *   where: {
     *     // ... the filter for the AchatJeus we want to count
     *   }
     * })
    **/
    count<T extends AchatJeuCountArgs>(
      args?: Subset<T, AchatJeuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchatJeuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AchatJeu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatJeuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchatJeuAggregateArgs>(args: Subset<T, AchatJeuAggregateArgs>): Prisma.PrismaPromise<GetAchatJeuAggregateType<T>>

    /**
     * Group by AchatJeu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchatJeuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchatJeuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchatJeuGroupByArgs['orderBy'] }
        : { orderBy?: AchatJeuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchatJeuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchatJeuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AchatJeu model
   */
  readonly fields: AchatJeuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AchatJeu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchatJeuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    achat<T extends AchatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AchatDefaultArgs<ExtArgs>>): Prisma__AchatClient<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jeu<T extends JeuDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JeuDefaultArgs<ExtArgs>>): Prisma__JeuClient<$Result.GetResult<Prisma.$JeuPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AchatJeu model
   */ 
  interface AchatJeuFieldRefs {
    readonly AchatID: FieldRef<"AchatJeu", 'Int'>
    readonly JeuID: FieldRef<"AchatJeu", 'Int'>
    readonly comission_vente: FieldRef<"AchatJeu", 'Float'>
    readonly quantite_achete: FieldRef<"AchatJeu", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AchatJeu findUnique
   */
  export type AchatJeuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * Filter, which AchatJeu to fetch.
     */
    where: AchatJeuWhereUniqueInput
  }

  /**
   * AchatJeu findUniqueOrThrow
   */
  export type AchatJeuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * Filter, which AchatJeu to fetch.
     */
    where: AchatJeuWhereUniqueInput
  }

  /**
   * AchatJeu findFirst
   */
  export type AchatJeuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * Filter, which AchatJeu to fetch.
     */
    where?: AchatJeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AchatJeus to fetch.
     */
    orderBy?: AchatJeuOrderByWithRelationInput | AchatJeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AchatJeus.
     */
    cursor?: AchatJeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AchatJeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AchatJeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AchatJeus.
     */
    distinct?: AchatJeuScalarFieldEnum | AchatJeuScalarFieldEnum[]
  }

  /**
   * AchatJeu findFirstOrThrow
   */
  export type AchatJeuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * Filter, which AchatJeu to fetch.
     */
    where?: AchatJeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AchatJeus to fetch.
     */
    orderBy?: AchatJeuOrderByWithRelationInput | AchatJeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AchatJeus.
     */
    cursor?: AchatJeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AchatJeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AchatJeus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AchatJeus.
     */
    distinct?: AchatJeuScalarFieldEnum | AchatJeuScalarFieldEnum[]
  }

  /**
   * AchatJeu findMany
   */
  export type AchatJeuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * Filter, which AchatJeus to fetch.
     */
    where?: AchatJeuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AchatJeus to fetch.
     */
    orderBy?: AchatJeuOrderByWithRelationInput | AchatJeuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AchatJeus.
     */
    cursor?: AchatJeuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AchatJeus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AchatJeus.
     */
    skip?: number
    distinct?: AchatJeuScalarFieldEnum | AchatJeuScalarFieldEnum[]
  }

  /**
   * AchatJeu create
   */
  export type AchatJeuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * The data needed to create a AchatJeu.
     */
    data: XOR<AchatJeuCreateInput, AchatJeuUncheckedCreateInput>
  }

  /**
   * AchatJeu createMany
   */
  export type AchatJeuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AchatJeus.
     */
    data: AchatJeuCreateManyInput | AchatJeuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AchatJeu createManyAndReturn
   */
  export type AchatJeuCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AchatJeus.
     */
    data: AchatJeuCreateManyInput | AchatJeuCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AchatJeu update
   */
  export type AchatJeuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * The data needed to update a AchatJeu.
     */
    data: XOR<AchatJeuUpdateInput, AchatJeuUncheckedUpdateInput>
    /**
     * Choose, which AchatJeu to update.
     */
    where: AchatJeuWhereUniqueInput
  }

  /**
   * AchatJeu updateMany
   */
  export type AchatJeuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AchatJeus.
     */
    data: XOR<AchatJeuUpdateManyMutationInput, AchatJeuUncheckedUpdateManyInput>
    /**
     * Filter which AchatJeus to update
     */
    where?: AchatJeuWhereInput
  }

  /**
   * AchatJeu upsert
   */
  export type AchatJeuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * The filter to search for the AchatJeu to update in case it exists.
     */
    where: AchatJeuWhereUniqueInput
    /**
     * In case the AchatJeu found by the `where` argument doesn't exist, create a new AchatJeu with this data.
     */
    create: XOR<AchatJeuCreateInput, AchatJeuUncheckedCreateInput>
    /**
     * In case the AchatJeu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchatJeuUpdateInput, AchatJeuUncheckedUpdateInput>
  }

  /**
   * AchatJeu delete
   */
  export type AchatJeuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
    /**
     * Filter which AchatJeu to delete.
     */
    where: AchatJeuWhereUniqueInput
  }

  /**
   * AchatJeu deleteMany
   */
  export type AchatJeuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AchatJeus to delete
     */
    where?: AchatJeuWhereInput
  }

  /**
   * AchatJeu without action
   */
  export type AchatJeuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchatJeu
     */
    select?: AchatJeuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatJeuInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    idSession: number | null
    pourc_frais_depot: number | null
    pourc_frais_vente: number | null
  }

  export type SessionSumAggregateOutputType = {
    idSession: number | null
    pourc_frais_depot: number | null
    pourc_frais_vente: number | null
  }

  export type SessionMinAggregateOutputType = {
    idSession: number | null
    NomSession: string | null
    DateDebut: Date | null
    DateFin: Date | null
    pourc_frais_depot: number | null
    pourc_frais_vente: number | null
    Statut: boolean | null
  }

  export type SessionMaxAggregateOutputType = {
    idSession: number | null
    NomSession: string | null
    DateDebut: Date | null
    DateFin: Date | null
    pourc_frais_depot: number | null
    pourc_frais_vente: number | null
    Statut: boolean | null
  }

  export type SessionCountAggregateOutputType = {
    idSession: number
    NomSession: number
    DateDebut: number
    DateFin: number
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    idSession?: true
    pourc_frais_depot?: true
    pourc_frais_vente?: true
  }

  export type SessionSumAggregateInputType = {
    idSession?: true
    pourc_frais_depot?: true
    pourc_frais_vente?: true
  }

  export type SessionMinAggregateInputType = {
    idSession?: true
    NomSession?: true
    DateDebut?: true
    DateFin?: true
    pourc_frais_depot?: true
    pourc_frais_vente?: true
    Statut?: true
  }

  export type SessionMaxAggregateInputType = {
    idSession?: true
    NomSession?: true
    DateDebut?: true
    DateFin?: true
    pourc_frais_depot?: true
    pourc_frais_vente?: true
    Statut?: true
  }

  export type SessionCountAggregateInputType = {
    idSession?: true
    NomSession?: true
    DateDebut?: true
    DateFin?: true
    pourc_frais_depot?: true
    pourc_frais_vente?: true
    Statut?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    idSession: number
    NomSession: string
    DateDebut: Date
    DateFin: Date | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idSession?: boolean
    NomSession?: boolean
    DateDebut?: boolean
    DateFin?: boolean
    pourc_frais_depot?: boolean
    pourc_frais_vente?: boolean
    Statut?: boolean
    achats?: boolean | Session$achatsArgs<ExtArgs>
    depots?: boolean | Session$depotsArgs<ExtArgs>
    bilanVendeurSessions?: boolean | Session$bilanVendeurSessionsArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idSession?: boolean
    NomSession?: boolean
    DateDebut?: boolean
    DateFin?: boolean
    pourc_frais_depot?: boolean
    pourc_frais_vente?: boolean
    Statut?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    idSession?: boolean
    NomSession?: boolean
    DateDebut?: boolean
    DateFin?: boolean
    pourc_frais_depot?: boolean
    pourc_frais_vente?: boolean
    Statut?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    achats?: boolean | Session$achatsArgs<ExtArgs>
    depots?: boolean | Session$depotsArgs<ExtArgs>
    bilanVendeurSessions?: boolean | Session$bilanVendeurSessionsArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      achats: Prisma.$AchatPayload<ExtArgs>[]
      depots: Prisma.$DepotPayload<ExtArgs>[]
      bilanVendeurSessions: Prisma.$BilanVendeurSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idSession: number
      NomSession: string
      DateDebut: Date
      DateFin: Date | null
      pourc_frais_depot: number
      pourc_frais_vente: number
      Statut: boolean
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `idSession`
     * const sessionWithIdSessionOnly = await prisma.session.findMany({ select: { idSession: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `idSession`
     * const sessionWithIdSessionOnly = await prisma.session.createManyAndReturn({ 
     *   select: { idSession: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    achats<T extends Session$achatsArgs<ExtArgs> = {}>(args?: Subset<T, Session$achatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchatPayload<ExtArgs>, T, "findMany"> | Null>
    depots<T extends Session$depotsArgs<ExtArgs> = {}>(args?: Subset<T, Session$depotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepotPayload<ExtArgs>, T, "findMany"> | Null>
    bilanVendeurSessions<T extends Session$bilanVendeurSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Session$bilanVendeurSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly idSession: FieldRef<"Session", 'Int'>
    readonly NomSession: FieldRef<"Session", 'String'>
    readonly DateDebut: FieldRef<"Session", 'DateTime'>
    readonly DateFin: FieldRef<"Session", 'DateTime'>
    readonly pourc_frais_depot: FieldRef<"Session", 'Float'>
    readonly pourc_frais_vente: FieldRef<"Session", 'Float'>
    readonly Statut: FieldRef<"Session", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session.achats
   */
  export type Session$achatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achat
     */
    select?: AchatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchatInclude<ExtArgs> | null
    where?: AchatWhereInput
    orderBy?: AchatOrderByWithRelationInput | AchatOrderByWithRelationInput[]
    cursor?: AchatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AchatScalarFieldEnum | AchatScalarFieldEnum[]
  }

  /**
   * Session.depots
   */
  export type Session$depotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Depot
     */
    select?: DepotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepotInclude<ExtArgs> | null
    where?: DepotWhereInput
    orderBy?: DepotOrderByWithRelationInput | DepotOrderByWithRelationInput[]
    cursor?: DepotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepotScalarFieldEnum | DepotScalarFieldEnum[]
  }

  /**
   * Session.bilanVendeurSessions
   */
  export type Session$bilanVendeurSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    where?: BilanVendeurSessionWhereInput
    orderBy?: BilanVendeurSessionOrderByWithRelationInput | BilanVendeurSessionOrderByWithRelationInput[]
    cursor?: BilanVendeurSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BilanVendeurSessionScalarFieldEnum | BilanVendeurSessionScalarFieldEnum[]
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Utilisateur
   */

  export type AggregateUtilisateur = {
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  export type UtilisateurAvgAggregateOutputType = {
    UtilisateurID: number | null
  }

  export type UtilisateurSumAggregateOutputType = {
    UtilisateurID: number | null
  }

  export type UtilisateurMinAggregateOutputType = {
    UtilisateurID: number | null
    Nom: string | null
    Prenom: string | null
    Email: string | null
    MdP: string | null
    Role: $Enums.Role | null
  }

  export type UtilisateurMaxAggregateOutputType = {
    UtilisateurID: number | null
    Nom: string | null
    Prenom: string | null
    Email: string | null
    MdP: string | null
    Role: $Enums.Role | null
  }

  export type UtilisateurCountAggregateOutputType = {
    UtilisateurID: number
    Nom: number
    Prenom: number
    Email: number
    MdP: number
    Role: number
    _all: number
  }


  export type UtilisateurAvgAggregateInputType = {
    UtilisateurID?: true
  }

  export type UtilisateurSumAggregateInputType = {
    UtilisateurID?: true
  }

  export type UtilisateurMinAggregateInputType = {
    UtilisateurID?: true
    Nom?: true
    Prenom?: true
    Email?: true
    MdP?: true
    Role?: true
  }

  export type UtilisateurMaxAggregateInputType = {
    UtilisateurID?: true
    Nom?: true
    Prenom?: true
    Email?: true
    MdP?: true
    Role?: true
  }

  export type UtilisateurCountAggregateInputType = {
    UtilisateurID?: true
    Nom?: true
    Prenom?: true
    Email?: true
    MdP?: true
    Role?: true
    _all?: true
  }

  export type UtilisateurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateur to aggregate.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilisateurs
    **/
    _count?: true | UtilisateurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilisateurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilisateurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilisateurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilisateurMaxAggregateInputType
  }

  export type GetUtilisateurAggregateType<T extends UtilisateurAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilisateur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilisateur[P]>
      : GetScalarType<T[P], AggregateUtilisateur[P]>
  }




  export type UtilisateurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilisateurWhereInput
    orderBy?: UtilisateurOrderByWithAggregationInput | UtilisateurOrderByWithAggregationInput[]
    by: UtilisateurScalarFieldEnum[] | UtilisateurScalarFieldEnum
    having?: UtilisateurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilisateurCountAggregateInputType | true
    _avg?: UtilisateurAvgAggregateInputType
    _sum?: UtilisateurSumAggregateInputType
    _min?: UtilisateurMinAggregateInputType
    _max?: UtilisateurMaxAggregateInputType
  }

  export type UtilisateurGroupByOutputType = {
    UtilisateurID: number
    Nom: string
    Prenom: string
    Email: string
    MdP: string
    Role: $Enums.Role
    _count: UtilisateurCountAggregateOutputType | null
    _avg: UtilisateurAvgAggregateOutputType | null
    _sum: UtilisateurSumAggregateOutputType | null
    _min: UtilisateurMinAggregateOutputType | null
    _max: UtilisateurMaxAggregateOutputType | null
  }

  type GetUtilisateurGroupByPayload<T extends UtilisateurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilisateurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilisateurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
            : GetScalarType<T[P], UtilisateurGroupByOutputType[P]>
        }
      >
    >


  export type UtilisateurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UtilisateurID?: boolean
    Nom?: boolean
    Prenom?: boolean
    Email?: boolean
    MdP?: boolean
    Role?: boolean
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UtilisateurID?: boolean
    Nom?: boolean
    Prenom?: boolean
    Email?: boolean
    MdP?: boolean
    Role?: boolean
  }, ExtArgs["result"]["utilisateur"]>

  export type UtilisateurSelectScalar = {
    UtilisateurID?: boolean
    Nom?: boolean
    Prenom?: boolean
    Email?: boolean
    MdP?: boolean
    Role?: boolean
  }


  export type $UtilisateurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilisateur"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      UtilisateurID: number
      Nom: string
      Prenom: string
      Email: string
      MdP: string
      Role: $Enums.Role
    }, ExtArgs["result"]["utilisateur"]>
    composites: {}
  }

  type UtilisateurGetPayload<S extends boolean | null | undefined | UtilisateurDefaultArgs> = $Result.GetResult<Prisma.$UtilisateurPayload, S>

  type UtilisateurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UtilisateurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UtilisateurCountAggregateInputType | true
    }

  export interface UtilisateurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilisateur'], meta: { name: 'Utilisateur' } }
    /**
     * Find zero or one Utilisateur that matches the filter.
     * @param {UtilisateurFindUniqueArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UtilisateurFindUniqueArgs>(args: SelectSubset<T, UtilisateurFindUniqueArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Utilisateur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UtilisateurFindUniqueOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UtilisateurFindUniqueOrThrowArgs>(args: SelectSubset<T, UtilisateurFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UtilisateurFindFirstArgs>(args?: SelectSubset<T, UtilisateurFindFirstArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Utilisateur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindFirstOrThrowArgs} args - Arguments to find a Utilisateur
     * @example
     * // Get one Utilisateur
     * const utilisateur = await prisma.utilisateur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UtilisateurFindFirstOrThrowArgs>(args?: SelectSubset<T, UtilisateurFindFirstOrThrowArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Utilisateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany()
     * 
     * // Get first 10 Utilisateurs
     * const utilisateurs = await prisma.utilisateur.findMany({ take: 10 })
     * 
     * // Only select the `UtilisateurID`
     * const utilisateurWithUtilisateurIDOnly = await prisma.utilisateur.findMany({ select: { UtilisateurID: true } })
     * 
     */
    findMany<T extends UtilisateurFindManyArgs>(args?: SelectSubset<T, UtilisateurFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Utilisateur.
     * @param {UtilisateurCreateArgs} args - Arguments to create a Utilisateur.
     * @example
     * // Create one Utilisateur
     * const Utilisateur = await prisma.utilisateur.create({
     *   data: {
     *     // ... data to create a Utilisateur
     *   }
     * })
     * 
     */
    create<T extends UtilisateurCreateArgs>(args: SelectSubset<T, UtilisateurCreateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Utilisateurs.
     * @param {UtilisateurCreateManyArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UtilisateurCreateManyArgs>(args?: SelectSubset<T, UtilisateurCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Utilisateurs and returns the data saved in the database.
     * @param {UtilisateurCreateManyAndReturnArgs} args - Arguments to create many Utilisateurs.
     * @example
     * // Create many Utilisateurs
     * const utilisateur = await prisma.utilisateur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Utilisateurs and only return the `UtilisateurID`
     * const utilisateurWithUtilisateurIDOnly = await prisma.utilisateur.createManyAndReturn({ 
     *   select: { UtilisateurID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UtilisateurCreateManyAndReturnArgs>(args?: SelectSubset<T, UtilisateurCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Utilisateur.
     * @param {UtilisateurDeleteArgs} args - Arguments to delete one Utilisateur.
     * @example
     * // Delete one Utilisateur
     * const Utilisateur = await prisma.utilisateur.delete({
     *   where: {
     *     // ... filter to delete one Utilisateur
     *   }
     * })
     * 
     */
    delete<T extends UtilisateurDeleteArgs>(args: SelectSubset<T, UtilisateurDeleteArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Utilisateur.
     * @param {UtilisateurUpdateArgs} args - Arguments to update one Utilisateur.
     * @example
     * // Update one Utilisateur
     * const utilisateur = await prisma.utilisateur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UtilisateurUpdateArgs>(args: SelectSubset<T, UtilisateurUpdateArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Utilisateurs.
     * @param {UtilisateurDeleteManyArgs} args - Arguments to filter Utilisateurs to delete.
     * @example
     * // Delete a few Utilisateurs
     * const { count } = await prisma.utilisateur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UtilisateurDeleteManyArgs>(args?: SelectSubset<T, UtilisateurDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilisateurs
     * const utilisateur = await prisma.utilisateur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UtilisateurUpdateManyArgs>(args: SelectSubset<T, UtilisateurUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilisateur.
     * @param {UtilisateurUpsertArgs} args - Arguments to update or create a Utilisateur.
     * @example
     * // Update or create a Utilisateur
     * const utilisateur = await prisma.utilisateur.upsert({
     *   create: {
     *     // ... data to create a Utilisateur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilisateur we want to update
     *   }
     * })
     */
    upsert<T extends UtilisateurUpsertArgs>(args: SelectSubset<T, UtilisateurUpsertArgs<ExtArgs>>): Prisma__UtilisateurClient<$Result.GetResult<Prisma.$UtilisateurPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Utilisateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurCountArgs} args - Arguments to filter Utilisateurs to count.
     * @example
     * // Count the number of Utilisateurs
     * const count = await prisma.utilisateur.count({
     *   where: {
     *     // ... the filter for the Utilisateurs we want to count
     *   }
     * })
    **/
    count<T extends UtilisateurCountArgs>(
      args?: Subset<T, UtilisateurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilisateurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilisateurAggregateArgs>(args: Subset<T, UtilisateurAggregateArgs>): Prisma.PrismaPromise<GetUtilisateurAggregateType<T>>

    /**
     * Group by Utilisateur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilisateurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilisateurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilisateurGroupByArgs['orderBy'] }
        : { orderBy?: UtilisateurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilisateurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilisateurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilisateur model
   */
  readonly fields: UtilisateurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilisateur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilisateurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Utilisateur model
   */ 
  interface UtilisateurFieldRefs {
    readonly UtilisateurID: FieldRef<"Utilisateur", 'Int'>
    readonly Nom: FieldRef<"Utilisateur", 'String'>
    readonly Prenom: FieldRef<"Utilisateur", 'String'>
    readonly Email: FieldRef<"Utilisateur", 'String'>
    readonly MdP: FieldRef<"Utilisateur", 'String'>
    readonly Role: FieldRef<"Utilisateur", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * Utilisateur findUnique
   */
  export type UtilisateurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findUniqueOrThrow
   */
  export type UtilisateurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur findFirst
   */
  export type UtilisateurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findFirstOrThrow
   */
  export type UtilisateurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateur to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilisateurs.
     */
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur findMany
   */
  export type UtilisateurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter, which Utilisateurs to fetch.
     */
    where?: UtilisateurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilisateurs to fetch.
     */
    orderBy?: UtilisateurOrderByWithRelationInput | UtilisateurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilisateurs.
     */
    cursor?: UtilisateurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilisateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilisateurs.
     */
    skip?: number
    distinct?: UtilisateurScalarFieldEnum | UtilisateurScalarFieldEnum[]
  }

  /**
   * Utilisateur create
   */
  export type UtilisateurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * The data needed to create a Utilisateur.
     */
    data: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
  }

  /**
   * Utilisateur createMany
   */
  export type UtilisateurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilisateur createManyAndReturn
   */
  export type UtilisateurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Utilisateurs.
     */
    data: UtilisateurCreateManyInput | UtilisateurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilisateur update
   */
  export type UtilisateurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * The data needed to update a Utilisateur.
     */
    data: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
    /**
     * Choose, which Utilisateur to update.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur updateMany
   */
  export type UtilisateurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilisateurs.
     */
    data: XOR<UtilisateurUpdateManyMutationInput, UtilisateurUncheckedUpdateManyInput>
    /**
     * Filter which Utilisateurs to update
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur upsert
   */
  export type UtilisateurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * The filter to search for the Utilisateur to update in case it exists.
     */
    where: UtilisateurWhereUniqueInput
    /**
     * In case the Utilisateur found by the `where` argument doesn't exist, create a new Utilisateur with this data.
     */
    create: XOR<UtilisateurCreateInput, UtilisateurUncheckedCreateInput>
    /**
     * In case the Utilisateur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilisateurUpdateInput, UtilisateurUncheckedUpdateInput>
  }

  /**
   * Utilisateur delete
   */
  export type UtilisateurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
    /**
     * Filter which Utilisateur to delete.
     */
    where: UtilisateurWhereUniqueInput
  }

  /**
   * Utilisateur deleteMany
   */
  export type UtilisateurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilisateurs to delete
     */
    where?: UtilisateurWhereInput
  }

  /**
   * Utilisateur without action
   */
  export type UtilisateurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilisateur
     */
    select?: UtilisateurSelect<ExtArgs> | null
  }


  /**
   * Model BilanVendeurSession
   */

  export type AggregateBilanVendeurSession = {
    _count: BilanVendeurSessionCountAggregateOutputType | null
    _avg: BilanVendeurSessionAvgAggregateOutputType | null
    _sum: BilanVendeurSessionSumAggregateOutputType | null
    _min: BilanVendeurSessionMinAggregateOutputType | null
    _max: BilanVendeurSessionMaxAggregateOutputType | null
  }

  export type BilanVendeurSessionAvgAggregateOutputType = {
    id_vendeur: number | null
    id_session: number | null
    total_depots: number | null
    total_ventes: number | null
    total_stocks: number | null
    total_gains: number | null
    total_comissions: number | null
  }

  export type BilanVendeurSessionSumAggregateOutputType = {
    id_vendeur: number | null
    id_session: number | null
    total_depots: number | null
    total_ventes: number | null
    total_stocks: number | null
    total_gains: number | null
    total_comissions: number | null
  }

  export type BilanVendeurSessionMinAggregateOutputType = {
    id_vendeur: number | null
    id_session: number | null
    total_depots: number | null
    total_ventes: number | null
    total_stocks: number | null
    total_gains: number | null
    total_comissions: number | null
  }

  export type BilanVendeurSessionMaxAggregateOutputType = {
    id_vendeur: number | null
    id_session: number | null
    total_depots: number | null
    total_ventes: number | null
    total_stocks: number | null
    total_gains: number | null
    total_comissions: number | null
  }

  export type BilanVendeurSessionCountAggregateOutputType = {
    id_vendeur: number
    id_session: number
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
    _all: number
  }


  export type BilanVendeurSessionAvgAggregateInputType = {
    id_vendeur?: true
    id_session?: true
    total_depots?: true
    total_ventes?: true
    total_stocks?: true
    total_gains?: true
    total_comissions?: true
  }

  export type BilanVendeurSessionSumAggregateInputType = {
    id_vendeur?: true
    id_session?: true
    total_depots?: true
    total_ventes?: true
    total_stocks?: true
    total_gains?: true
    total_comissions?: true
  }

  export type BilanVendeurSessionMinAggregateInputType = {
    id_vendeur?: true
    id_session?: true
    total_depots?: true
    total_ventes?: true
    total_stocks?: true
    total_gains?: true
    total_comissions?: true
  }

  export type BilanVendeurSessionMaxAggregateInputType = {
    id_vendeur?: true
    id_session?: true
    total_depots?: true
    total_ventes?: true
    total_stocks?: true
    total_gains?: true
    total_comissions?: true
  }

  export type BilanVendeurSessionCountAggregateInputType = {
    id_vendeur?: true
    id_session?: true
    total_depots?: true
    total_ventes?: true
    total_stocks?: true
    total_gains?: true
    total_comissions?: true
    _all?: true
  }

  export type BilanVendeurSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BilanVendeurSession to aggregate.
     */
    where?: BilanVendeurSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilanVendeurSessions to fetch.
     */
    orderBy?: BilanVendeurSessionOrderByWithRelationInput | BilanVendeurSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BilanVendeurSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilanVendeurSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilanVendeurSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BilanVendeurSessions
    **/
    _count?: true | BilanVendeurSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BilanVendeurSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BilanVendeurSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BilanVendeurSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BilanVendeurSessionMaxAggregateInputType
  }

  export type GetBilanVendeurSessionAggregateType<T extends BilanVendeurSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateBilanVendeurSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBilanVendeurSession[P]>
      : GetScalarType<T[P], AggregateBilanVendeurSession[P]>
  }




  export type BilanVendeurSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BilanVendeurSessionWhereInput
    orderBy?: BilanVendeurSessionOrderByWithAggregationInput | BilanVendeurSessionOrderByWithAggregationInput[]
    by: BilanVendeurSessionScalarFieldEnum[] | BilanVendeurSessionScalarFieldEnum
    having?: BilanVendeurSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BilanVendeurSessionCountAggregateInputType | true
    _avg?: BilanVendeurSessionAvgAggregateInputType
    _sum?: BilanVendeurSessionSumAggregateInputType
    _min?: BilanVendeurSessionMinAggregateInputType
    _max?: BilanVendeurSessionMaxAggregateInputType
  }

  export type BilanVendeurSessionGroupByOutputType = {
    id_vendeur: number
    id_session: number
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
    _count: BilanVendeurSessionCountAggregateOutputType | null
    _avg: BilanVendeurSessionAvgAggregateOutputType | null
    _sum: BilanVendeurSessionSumAggregateOutputType | null
    _min: BilanVendeurSessionMinAggregateOutputType | null
    _max: BilanVendeurSessionMaxAggregateOutputType | null
  }

  type GetBilanVendeurSessionGroupByPayload<T extends BilanVendeurSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BilanVendeurSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BilanVendeurSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BilanVendeurSessionGroupByOutputType[P]>
            : GetScalarType<T[P], BilanVendeurSessionGroupByOutputType[P]>
        }
      >
    >


  export type BilanVendeurSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_vendeur?: boolean
    id_session?: boolean
    total_depots?: boolean
    total_ventes?: boolean
    total_stocks?: boolean
    total_gains?: boolean
    total_comissions?: boolean
    vendeur?: boolean | VendeurDefaultArgs<ExtArgs>
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bilanVendeurSession"]>

  export type BilanVendeurSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_vendeur?: boolean
    id_session?: boolean
    total_depots?: boolean
    total_ventes?: boolean
    total_stocks?: boolean
    total_gains?: boolean
    total_comissions?: boolean
    vendeur?: boolean | VendeurDefaultArgs<ExtArgs>
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bilanVendeurSession"]>

  export type BilanVendeurSessionSelectScalar = {
    id_vendeur?: boolean
    id_session?: boolean
    total_depots?: boolean
    total_ventes?: boolean
    total_stocks?: boolean
    total_gains?: boolean
    total_comissions?: boolean
  }

  export type BilanVendeurSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendeur?: boolean | VendeurDefaultArgs<ExtArgs>
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }
  export type BilanVendeurSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vendeur?: boolean | VendeurDefaultArgs<ExtArgs>
    session?: boolean | SessionDefaultArgs<ExtArgs>
  }

  export type $BilanVendeurSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BilanVendeurSession"
    objects: {
      vendeur: Prisma.$VendeurPayload<ExtArgs>
      session: Prisma.$SessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_vendeur: number
      id_session: number
      total_depots: number
      total_ventes: number
      total_stocks: number
      total_gains: number
      total_comissions: number
    }, ExtArgs["result"]["bilanVendeurSession"]>
    composites: {}
  }

  type BilanVendeurSessionGetPayload<S extends boolean | null | undefined | BilanVendeurSessionDefaultArgs> = $Result.GetResult<Prisma.$BilanVendeurSessionPayload, S>

  type BilanVendeurSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BilanVendeurSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BilanVendeurSessionCountAggregateInputType | true
    }

  export interface BilanVendeurSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BilanVendeurSession'], meta: { name: 'BilanVendeurSession' } }
    /**
     * Find zero or one BilanVendeurSession that matches the filter.
     * @param {BilanVendeurSessionFindUniqueArgs} args - Arguments to find a BilanVendeurSession
     * @example
     * // Get one BilanVendeurSession
     * const bilanVendeurSession = await prisma.bilanVendeurSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BilanVendeurSessionFindUniqueArgs>(args: SelectSubset<T, BilanVendeurSessionFindUniqueArgs<ExtArgs>>): Prisma__BilanVendeurSessionClient<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BilanVendeurSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BilanVendeurSessionFindUniqueOrThrowArgs} args - Arguments to find a BilanVendeurSession
     * @example
     * // Get one BilanVendeurSession
     * const bilanVendeurSession = await prisma.bilanVendeurSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BilanVendeurSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, BilanVendeurSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BilanVendeurSessionClient<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BilanVendeurSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilanVendeurSessionFindFirstArgs} args - Arguments to find a BilanVendeurSession
     * @example
     * // Get one BilanVendeurSession
     * const bilanVendeurSession = await prisma.bilanVendeurSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BilanVendeurSessionFindFirstArgs>(args?: SelectSubset<T, BilanVendeurSessionFindFirstArgs<ExtArgs>>): Prisma__BilanVendeurSessionClient<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BilanVendeurSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilanVendeurSessionFindFirstOrThrowArgs} args - Arguments to find a BilanVendeurSession
     * @example
     * // Get one BilanVendeurSession
     * const bilanVendeurSession = await prisma.bilanVendeurSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BilanVendeurSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, BilanVendeurSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__BilanVendeurSessionClient<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BilanVendeurSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilanVendeurSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BilanVendeurSessions
     * const bilanVendeurSessions = await prisma.bilanVendeurSession.findMany()
     * 
     * // Get first 10 BilanVendeurSessions
     * const bilanVendeurSessions = await prisma.bilanVendeurSession.findMany({ take: 10 })
     * 
     * // Only select the `id_vendeur`
     * const bilanVendeurSessionWithId_vendeurOnly = await prisma.bilanVendeurSession.findMany({ select: { id_vendeur: true } })
     * 
     */
    findMany<T extends BilanVendeurSessionFindManyArgs>(args?: SelectSubset<T, BilanVendeurSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BilanVendeurSession.
     * @param {BilanVendeurSessionCreateArgs} args - Arguments to create a BilanVendeurSession.
     * @example
     * // Create one BilanVendeurSession
     * const BilanVendeurSession = await prisma.bilanVendeurSession.create({
     *   data: {
     *     // ... data to create a BilanVendeurSession
     *   }
     * })
     * 
     */
    create<T extends BilanVendeurSessionCreateArgs>(args: SelectSubset<T, BilanVendeurSessionCreateArgs<ExtArgs>>): Prisma__BilanVendeurSessionClient<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BilanVendeurSessions.
     * @param {BilanVendeurSessionCreateManyArgs} args - Arguments to create many BilanVendeurSessions.
     * @example
     * // Create many BilanVendeurSessions
     * const bilanVendeurSession = await prisma.bilanVendeurSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BilanVendeurSessionCreateManyArgs>(args?: SelectSubset<T, BilanVendeurSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BilanVendeurSessions and returns the data saved in the database.
     * @param {BilanVendeurSessionCreateManyAndReturnArgs} args - Arguments to create many BilanVendeurSessions.
     * @example
     * // Create many BilanVendeurSessions
     * const bilanVendeurSession = await prisma.bilanVendeurSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BilanVendeurSessions and only return the `id_vendeur`
     * const bilanVendeurSessionWithId_vendeurOnly = await prisma.bilanVendeurSession.createManyAndReturn({ 
     *   select: { id_vendeur: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BilanVendeurSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, BilanVendeurSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BilanVendeurSession.
     * @param {BilanVendeurSessionDeleteArgs} args - Arguments to delete one BilanVendeurSession.
     * @example
     * // Delete one BilanVendeurSession
     * const BilanVendeurSession = await prisma.bilanVendeurSession.delete({
     *   where: {
     *     // ... filter to delete one BilanVendeurSession
     *   }
     * })
     * 
     */
    delete<T extends BilanVendeurSessionDeleteArgs>(args: SelectSubset<T, BilanVendeurSessionDeleteArgs<ExtArgs>>): Prisma__BilanVendeurSessionClient<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BilanVendeurSession.
     * @param {BilanVendeurSessionUpdateArgs} args - Arguments to update one BilanVendeurSession.
     * @example
     * // Update one BilanVendeurSession
     * const bilanVendeurSession = await prisma.bilanVendeurSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BilanVendeurSessionUpdateArgs>(args: SelectSubset<T, BilanVendeurSessionUpdateArgs<ExtArgs>>): Prisma__BilanVendeurSessionClient<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BilanVendeurSessions.
     * @param {BilanVendeurSessionDeleteManyArgs} args - Arguments to filter BilanVendeurSessions to delete.
     * @example
     * // Delete a few BilanVendeurSessions
     * const { count } = await prisma.bilanVendeurSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BilanVendeurSessionDeleteManyArgs>(args?: SelectSubset<T, BilanVendeurSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BilanVendeurSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilanVendeurSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BilanVendeurSessions
     * const bilanVendeurSession = await prisma.bilanVendeurSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BilanVendeurSessionUpdateManyArgs>(args: SelectSubset<T, BilanVendeurSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BilanVendeurSession.
     * @param {BilanVendeurSessionUpsertArgs} args - Arguments to update or create a BilanVendeurSession.
     * @example
     * // Update or create a BilanVendeurSession
     * const bilanVendeurSession = await prisma.bilanVendeurSession.upsert({
     *   create: {
     *     // ... data to create a BilanVendeurSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BilanVendeurSession we want to update
     *   }
     * })
     */
    upsert<T extends BilanVendeurSessionUpsertArgs>(args: SelectSubset<T, BilanVendeurSessionUpsertArgs<ExtArgs>>): Prisma__BilanVendeurSessionClient<$Result.GetResult<Prisma.$BilanVendeurSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BilanVendeurSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilanVendeurSessionCountArgs} args - Arguments to filter BilanVendeurSessions to count.
     * @example
     * // Count the number of BilanVendeurSessions
     * const count = await prisma.bilanVendeurSession.count({
     *   where: {
     *     // ... the filter for the BilanVendeurSessions we want to count
     *   }
     * })
    **/
    count<T extends BilanVendeurSessionCountArgs>(
      args?: Subset<T, BilanVendeurSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BilanVendeurSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BilanVendeurSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilanVendeurSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BilanVendeurSessionAggregateArgs>(args: Subset<T, BilanVendeurSessionAggregateArgs>): Prisma.PrismaPromise<GetBilanVendeurSessionAggregateType<T>>

    /**
     * Group by BilanVendeurSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilanVendeurSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BilanVendeurSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BilanVendeurSessionGroupByArgs['orderBy'] }
        : { orderBy?: BilanVendeurSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BilanVendeurSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBilanVendeurSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BilanVendeurSession model
   */
  readonly fields: BilanVendeurSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BilanVendeurSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BilanVendeurSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    vendeur<T extends VendeurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VendeurDefaultArgs<ExtArgs>>): Prisma__VendeurClient<$Result.GetResult<Prisma.$VendeurPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    session<T extends SessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionDefaultArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BilanVendeurSession model
   */ 
  interface BilanVendeurSessionFieldRefs {
    readonly id_vendeur: FieldRef<"BilanVendeurSession", 'Int'>
    readonly id_session: FieldRef<"BilanVendeurSession", 'Int'>
    readonly total_depots: FieldRef<"BilanVendeurSession", 'Int'>
    readonly total_ventes: FieldRef<"BilanVendeurSession", 'Int'>
    readonly total_stocks: FieldRef<"BilanVendeurSession", 'Int'>
    readonly total_gains: FieldRef<"BilanVendeurSession", 'Float'>
    readonly total_comissions: FieldRef<"BilanVendeurSession", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * BilanVendeurSession findUnique
   */
  export type BilanVendeurSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * Filter, which BilanVendeurSession to fetch.
     */
    where: BilanVendeurSessionWhereUniqueInput
  }

  /**
   * BilanVendeurSession findUniqueOrThrow
   */
  export type BilanVendeurSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * Filter, which BilanVendeurSession to fetch.
     */
    where: BilanVendeurSessionWhereUniqueInput
  }

  /**
   * BilanVendeurSession findFirst
   */
  export type BilanVendeurSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * Filter, which BilanVendeurSession to fetch.
     */
    where?: BilanVendeurSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilanVendeurSessions to fetch.
     */
    orderBy?: BilanVendeurSessionOrderByWithRelationInput | BilanVendeurSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BilanVendeurSessions.
     */
    cursor?: BilanVendeurSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilanVendeurSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilanVendeurSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BilanVendeurSessions.
     */
    distinct?: BilanVendeurSessionScalarFieldEnum | BilanVendeurSessionScalarFieldEnum[]
  }

  /**
   * BilanVendeurSession findFirstOrThrow
   */
  export type BilanVendeurSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * Filter, which BilanVendeurSession to fetch.
     */
    where?: BilanVendeurSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilanVendeurSessions to fetch.
     */
    orderBy?: BilanVendeurSessionOrderByWithRelationInput | BilanVendeurSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BilanVendeurSessions.
     */
    cursor?: BilanVendeurSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilanVendeurSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilanVendeurSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BilanVendeurSessions.
     */
    distinct?: BilanVendeurSessionScalarFieldEnum | BilanVendeurSessionScalarFieldEnum[]
  }

  /**
   * BilanVendeurSession findMany
   */
  export type BilanVendeurSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * Filter, which BilanVendeurSessions to fetch.
     */
    where?: BilanVendeurSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilanVendeurSessions to fetch.
     */
    orderBy?: BilanVendeurSessionOrderByWithRelationInput | BilanVendeurSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BilanVendeurSessions.
     */
    cursor?: BilanVendeurSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilanVendeurSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilanVendeurSessions.
     */
    skip?: number
    distinct?: BilanVendeurSessionScalarFieldEnum | BilanVendeurSessionScalarFieldEnum[]
  }

  /**
   * BilanVendeurSession create
   */
  export type BilanVendeurSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a BilanVendeurSession.
     */
    data: XOR<BilanVendeurSessionCreateInput, BilanVendeurSessionUncheckedCreateInput>
  }

  /**
   * BilanVendeurSession createMany
   */
  export type BilanVendeurSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BilanVendeurSessions.
     */
    data: BilanVendeurSessionCreateManyInput | BilanVendeurSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BilanVendeurSession createManyAndReturn
   */
  export type BilanVendeurSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BilanVendeurSessions.
     */
    data: BilanVendeurSessionCreateManyInput | BilanVendeurSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BilanVendeurSession update
   */
  export type BilanVendeurSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a BilanVendeurSession.
     */
    data: XOR<BilanVendeurSessionUpdateInput, BilanVendeurSessionUncheckedUpdateInput>
    /**
     * Choose, which BilanVendeurSession to update.
     */
    where: BilanVendeurSessionWhereUniqueInput
  }

  /**
   * BilanVendeurSession updateMany
   */
  export type BilanVendeurSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BilanVendeurSessions.
     */
    data: XOR<BilanVendeurSessionUpdateManyMutationInput, BilanVendeurSessionUncheckedUpdateManyInput>
    /**
     * Filter which BilanVendeurSessions to update
     */
    where?: BilanVendeurSessionWhereInput
  }

  /**
   * BilanVendeurSession upsert
   */
  export type BilanVendeurSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the BilanVendeurSession to update in case it exists.
     */
    where: BilanVendeurSessionWhereUniqueInput
    /**
     * In case the BilanVendeurSession found by the `where` argument doesn't exist, create a new BilanVendeurSession with this data.
     */
    create: XOR<BilanVendeurSessionCreateInput, BilanVendeurSessionUncheckedCreateInput>
    /**
     * In case the BilanVendeurSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BilanVendeurSessionUpdateInput, BilanVendeurSessionUncheckedUpdateInput>
  }

  /**
   * BilanVendeurSession delete
   */
  export type BilanVendeurSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
    /**
     * Filter which BilanVendeurSession to delete.
     */
    where: BilanVendeurSessionWhereUniqueInput
  }

  /**
   * BilanVendeurSession deleteMany
   */
  export type BilanVendeurSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BilanVendeurSessions to delete
     */
    where?: BilanVendeurSessionWhereInput
  }

  /**
   * BilanVendeurSession without action
   */
  export type BilanVendeurSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilanVendeurSession
     */
    select?: BilanVendeurSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BilanVendeurSessionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const JeuxMarqueScalarFieldEnum: {
    JeuRef_id: 'JeuRef_id',
    Nom: 'Nom',
    Editeur: 'Editeur',
    Description: 'Description'
  };

  export type JeuxMarqueScalarFieldEnum = (typeof JeuxMarqueScalarFieldEnum)[keyof typeof JeuxMarqueScalarFieldEnum]


  export const JeuScalarFieldEnum: {
    JeuID: 'JeuID',
    JeuRef_id: 'JeuRef_id',
    depot_ID: 'depot_ID',
    prix_unitaire: 'prix_unitaire',
    mise_en_vente: 'mise_en_vente',
    quantite_disponible: 'quantite_disponible'
  };

  export type JeuScalarFieldEnum = (typeof JeuScalarFieldEnum)[keyof typeof JeuScalarFieldEnum]


  export const DepotScalarFieldEnum: {
    ID_depot: 'ID_depot',
    VendeurID: 'VendeurID',
    date_depot: 'date_depot',
    id_session: 'id_session',
    comission_depot_total: 'comission_depot_total'
  };

  export type DepotScalarFieldEnum = (typeof DepotScalarFieldEnum)[keyof typeof DepotScalarFieldEnum]


  export const VendeurScalarFieldEnum: {
    VendeurID: 'VendeurID',
    Nom: 'Nom',
    Email: 'Email',
    Telephone: 'Telephone'
  };

  export type VendeurScalarFieldEnum = (typeof VendeurScalarFieldEnum)[keyof typeof VendeurScalarFieldEnum]


  export const DepotJeuScalarFieldEnum: {
    depot_ID: 'depot_ID',
    JeuID: 'JeuID',
    quantite_depose: 'quantite_depose',
    comission_depot: 'comission_depot'
  };

  export type DepotJeuScalarFieldEnum = (typeof DepotJeuScalarFieldEnum)[keyof typeof DepotJeuScalarFieldEnum]


  export const AchatScalarFieldEnum: {
    AchatID: 'AchatID',
    Total_paye: 'Total_paye',
    id_session: 'id_session',
    DateAchat: 'DateAchat',
    comission_vente_total: 'comission_vente_total'
  };

  export type AchatScalarFieldEnum = (typeof AchatScalarFieldEnum)[keyof typeof AchatScalarFieldEnum]


  export const AchatJeuScalarFieldEnum: {
    AchatID: 'AchatID',
    JeuID: 'JeuID',
    comission_vente: 'comission_vente',
    quantite_achete: 'quantite_achete'
  };

  export type AchatJeuScalarFieldEnum = (typeof AchatJeuScalarFieldEnum)[keyof typeof AchatJeuScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    idSession: 'idSession',
    NomSession: 'NomSession',
    DateDebut: 'DateDebut',
    DateFin: 'DateFin',
    pourc_frais_depot: 'pourc_frais_depot',
    pourc_frais_vente: 'pourc_frais_vente',
    Statut: 'Statut'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UtilisateurScalarFieldEnum: {
    UtilisateurID: 'UtilisateurID',
    Nom: 'Nom',
    Prenom: 'Prenom',
    Email: 'Email',
    MdP: 'MdP',
    Role: 'Role'
  };

  export type UtilisateurScalarFieldEnum = (typeof UtilisateurScalarFieldEnum)[keyof typeof UtilisateurScalarFieldEnum]


  export const BilanVendeurSessionScalarFieldEnum: {
    id_vendeur: 'id_vendeur',
    id_session: 'id_session',
    total_depots: 'total_depots',
    total_ventes: 'total_ventes',
    total_stocks: 'total_stocks',
    total_gains: 'total_gains',
    total_comissions: 'total_comissions'
  };

  export type BilanVendeurSessionScalarFieldEnum = (typeof BilanVendeurSessionScalarFieldEnum)[keyof typeof BilanVendeurSessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    
  /**
   * Deep Input Types
   */


  export type JeuxMarqueWhereInput = {
    AND?: JeuxMarqueWhereInput | JeuxMarqueWhereInput[]
    OR?: JeuxMarqueWhereInput[]
    NOT?: JeuxMarqueWhereInput | JeuxMarqueWhereInput[]
    JeuRef_id?: IntFilter<"JeuxMarque"> | number
    Nom?: StringFilter<"JeuxMarque"> | string
    Editeur?: StringFilter<"JeuxMarque"> | string
    Description?: StringFilter<"JeuxMarque"> | string
    jeuxDepot?: JeuListRelationFilter
  }

  export type JeuxMarqueOrderByWithRelationInput = {
    JeuRef_id?: SortOrder
    Nom?: SortOrder
    Editeur?: SortOrder
    Description?: SortOrder
    jeuxDepot?: JeuOrderByRelationAggregateInput
  }

  export type JeuxMarqueWhereUniqueInput = Prisma.AtLeast<{
    JeuRef_id?: number
    AND?: JeuxMarqueWhereInput | JeuxMarqueWhereInput[]
    OR?: JeuxMarqueWhereInput[]
    NOT?: JeuxMarqueWhereInput | JeuxMarqueWhereInput[]
    Nom?: StringFilter<"JeuxMarque"> | string
    Editeur?: StringFilter<"JeuxMarque"> | string
    Description?: StringFilter<"JeuxMarque"> | string
    jeuxDepot?: JeuListRelationFilter
  }, "JeuRef_id">

  export type JeuxMarqueOrderByWithAggregationInput = {
    JeuRef_id?: SortOrder
    Nom?: SortOrder
    Editeur?: SortOrder
    Description?: SortOrder
    _count?: JeuxMarqueCountOrderByAggregateInput
    _avg?: JeuxMarqueAvgOrderByAggregateInput
    _max?: JeuxMarqueMaxOrderByAggregateInput
    _min?: JeuxMarqueMinOrderByAggregateInput
    _sum?: JeuxMarqueSumOrderByAggregateInput
  }

  export type JeuxMarqueScalarWhereWithAggregatesInput = {
    AND?: JeuxMarqueScalarWhereWithAggregatesInput | JeuxMarqueScalarWhereWithAggregatesInput[]
    OR?: JeuxMarqueScalarWhereWithAggregatesInput[]
    NOT?: JeuxMarqueScalarWhereWithAggregatesInput | JeuxMarqueScalarWhereWithAggregatesInput[]
    JeuRef_id?: IntWithAggregatesFilter<"JeuxMarque"> | number
    Nom?: StringWithAggregatesFilter<"JeuxMarque"> | string
    Editeur?: StringWithAggregatesFilter<"JeuxMarque"> | string
    Description?: StringWithAggregatesFilter<"JeuxMarque"> | string
  }

  export type JeuWhereInput = {
    AND?: JeuWhereInput | JeuWhereInput[]
    OR?: JeuWhereInput[]
    NOT?: JeuWhereInput | JeuWhereInput[]
    JeuID?: IntFilter<"Jeu"> | number
    JeuRef_id?: IntFilter<"Jeu"> | number
    depot_ID?: IntFilter<"Jeu"> | number
    prix_unitaire?: FloatFilter<"Jeu"> | number
    mise_en_vente?: BoolFilter<"Jeu"> | boolean
    quantite_disponible?: IntFilter<"Jeu"> | number
    depot?: XOR<DepotRelationFilter, DepotWhereInput>
    jeuxMarque?: XOR<JeuxMarqueNullableRelationFilter, JeuxMarqueWhereInput> | null
    achat_jeux?: AchatJeuListRelationFilter
    depot_jeux?: DepotJeuListRelationFilter
  }

  export type JeuOrderByWithRelationInput = {
    JeuID?: SortOrder
    JeuRef_id?: SortOrder
    depot_ID?: SortOrder
    prix_unitaire?: SortOrder
    mise_en_vente?: SortOrder
    quantite_disponible?: SortOrder
    depot?: DepotOrderByWithRelationInput
    jeuxMarque?: JeuxMarqueOrderByWithRelationInput
    achat_jeux?: AchatJeuOrderByRelationAggregateInput
    depot_jeux?: DepotJeuOrderByRelationAggregateInput
  }

  export type JeuWhereUniqueInput = Prisma.AtLeast<{
    JeuID?: number
    AND?: JeuWhereInput | JeuWhereInput[]
    OR?: JeuWhereInput[]
    NOT?: JeuWhereInput | JeuWhereInput[]
    JeuRef_id?: IntFilter<"Jeu"> | number
    depot_ID?: IntFilter<"Jeu"> | number
    prix_unitaire?: FloatFilter<"Jeu"> | number
    mise_en_vente?: BoolFilter<"Jeu"> | boolean
    quantite_disponible?: IntFilter<"Jeu"> | number
    depot?: XOR<DepotRelationFilter, DepotWhereInput>
    jeuxMarque?: XOR<JeuxMarqueNullableRelationFilter, JeuxMarqueWhereInput> | null
    achat_jeux?: AchatJeuListRelationFilter
    depot_jeux?: DepotJeuListRelationFilter
  }, "JeuID">

  export type JeuOrderByWithAggregationInput = {
    JeuID?: SortOrder
    JeuRef_id?: SortOrder
    depot_ID?: SortOrder
    prix_unitaire?: SortOrder
    mise_en_vente?: SortOrder
    quantite_disponible?: SortOrder
    _count?: JeuCountOrderByAggregateInput
    _avg?: JeuAvgOrderByAggregateInput
    _max?: JeuMaxOrderByAggregateInput
    _min?: JeuMinOrderByAggregateInput
    _sum?: JeuSumOrderByAggregateInput
  }

  export type JeuScalarWhereWithAggregatesInput = {
    AND?: JeuScalarWhereWithAggregatesInput | JeuScalarWhereWithAggregatesInput[]
    OR?: JeuScalarWhereWithAggregatesInput[]
    NOT?: JeuScalarWhereWithAggregatesInput | JeuScalarWhereWithAggregatesInput[]
    JeuID?: IntWithAggregatesFilter<"Jeu"> | number
    JeuRef_id?: IntWithAggregatesFilter<"Jeu"> | number
    depot_ID?: IntWithAggregatesFilter<"Jeu"> | number
    prix_unitaire?: FloatWithAggregatesFilter<"Jeu"> | number
    mise_en_vente?: BoolWithAggregatesFilter<"Jeu"> | boolean
    quantite_disponible?: IntWithAggregatesFilter<"Jeu"> | number
  }

  export type DepotWhereInput = {
    AND?: DepotWhereInput | DepotWhereInput[]
    OR?: DepotWhereInput[]
    NOT?: DepotWhereInput | DepotWhereInput[]
    ID_depot?: IntFilter<"Depot"> | number
    VendeurID?: IntFilter<"Depot"> | number
    date_depot?: DateTimeFilter<"Depot"> | Date | string
    id_session?: IntFilter<"Depot"> | number
    comission_depot_total?: FloatFilter<"Depot"> | number
    vendeur?: XOR<VendeurRelationFilter, VendeurWhereInput>
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    jeux?: JeuListRelationFilter
    depot_jeux?: DepotJeuListRelationFilter
  }

  export type DepotOrderByWithRelationInput = {
    ID_depot?: SortOrder
    VendeurID?: SortOrder
    date_depot?: SortOrder
    id_session?: SortOrder
    comission_depot_total?: SortOrder
    vendeur?: VendeurOrderByWithRelationInput
    session?: SessionOrderByWithRelationInput
    jeux?: JeuOrderByRelationAggregateInput
    depot_jeux?: DepotJeuOrderByRelationAggregateInput
  }

  export type DepotWhereUniqueInput = Prisma.AtLeast<{
    ID_depot?: number
    AND?: DepotWhereInput | DepotWhereInput[]
    OR?: DepotWhereInput[]
    NOT?: DepotWhereInput | DepotWhereInput[]
    VendeurID?: IntFilter<"Depot"> | number
    date_depot?: DateTimeFilter<"Depot"> | Date | string
    id_session?: IntFilter<"Depot"> | number
    comission_depot_total?: FloatFilter<"Depot"> | number
    vendeur?: XOR<VendeurRelationFilter, VendeurWhereInput>
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    jeux?: JeuListRelationFilter
    depot_jeux?: DepotJeuListRelationFilter
  }, "ID_depot">

  export type DepotOrderByWithAggregationInput = {
    ID_depot?: SortOrder
    VendeurID?: SortOrder
    date_depot?: SortOrder
    id_session?: SortOrder
    comission_depot_total?: SortOrder
    _count?: DepotCountOrderByAggregateInput
    _avg?: DepotAvgOrderByAggregateInput
    _max?: DepotMaxOrderByAggregateInput
    _min?: DepotMinOrderByAggregateInput
    _sum?: DepotSumOrderByAggregateInput
  }

  export type DepotScalarWhereWithAggregatesInput = {
    AND?: DepotScalarWhereWithAggregatesInput | DepotScalarWhereWithAggregatesInput[]
    OR?: DepotScalarWhereWithAggregatesInput[]
    NOT?: DepotScalarWhereWithAggregatesInput | DepotScalarWhereWithAggregatesInput[]
    ID_depot?: IntWithAggregatesFilter<"Depot"> | number
    VendeurID?: IntWithAggregatesFilter<"Depot"> | number
    date_depot?: DateTimeWithAggregatesFilter<"Depot"> | Date | string
    id_session?: IntWithAggregatesFilter<"Depot"> | number
    comission_depot_total?: FloatWithAggregatesFilter<"Depot"> | number
  }

  export type VendeurWhereInput = {
    AND?: VendeurWhereInput | VendeurWhereInput[]
    OR?: VendeurWhereInput[]
    NOT?: VendeurWhereInput | VendeurWhereInput[]
    VendeurID?: IntFilter<"Vendeur"> | number
    Nom?: StringFilter<"Vendeur"> | string
    Email?: StringFilter<"Vendeur"> | string
    Telephone?: StringFilter<"Vendeur"> | string
    depots?: DepotListRelationFilter
    BilanVendeurSession?: BilanVendeurSessionListRelationFilter
  }

  export type VendeurOrderByWithRelationInput = {
    VendeurID?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Telephone?: SortOrder
    depots?: DepotOrderByRelationAggregateInput
    BilanVendeurSession?: BilanVendeurSessionOrderByRelationAggregateInput
  }

  export type VendeurWhereUniqueInput = Prisma.AtLeast<{
    VendeurID?: number
    AND?: VendeurWhereInput | VendeurWhereInput[]
    OR?: VendeurWhereInput[]
    NOT?: VendeurWhereInput | VendeurWhereInput[]
    Nom?: StringFilter<"Vendeur"> | string
    Email?: StringFilter<"Vendeur"> | string
    Telephone?: StringFilter<"Vendeur"> | string
    depots?: DepotListRelationFilter
    BilanVendeurSession?: BilanVendeurSessionListRelationFilter
  }, "VendeurID">

  export type VendeurOrderByWithAggregationInput = {
    VendeurID?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Telephone?: SortOrder
    _count?: VendeurCountOrderByAggregateInput
    _avg?: VendeurAvgOrderByAggregateInput
    _max?: VendeurMaxOrderByAggregateInput
    _min?: VendeurMinOrderByAggregateInput
    _sum?: VendeurSumOrderByAggregateInput
  }

  export type VendeurScalarWhereWithAggregatesInput = {
    AND?: VendeurScalarWhereWithAggregatesInput | VendeurScalarWhereWithAggregatesInput[]
    OR?: VendeurScalarWhereWithAggregatesInput[]
    NOT?: VendeurScalarWhereWithAggregatesInput | VendeurScalarWhereWithAggregatesInput[]
    VendeurID?: IntWithAggregatesFilter<"Vendeur"> | number
    Nom?: StringWithAggregatesFilter<"Vendeur"> | string
    Email?: StringWithAggregatesFilter<"Vendeur"> | string
    Telephone?: StringWithAggregatesFilter<"Vendeur"> | string
  }

  export type DepotJeuWhereInput = {
    AND?: DepotJeuWhereInput | DepotJeuWhereInput[]
    OR?: DepotJeuWhereInput[]
    NOT?: DepotJeuWhereInput | DepotJeuWhereInput[]
    depot_ID?: IntFilter<"DepotJeu"> | number
    JeuID?: IntFilter<"DepotJeu"> | number
    quantite_depose?: IntFilter<"DepotJeu"> | number
    comission_depot?: FloatFilter<"DepotJeu"> | number
    depot?: XOR<DepotRelationFilter, DepotWhereInput>
    jeu?: XOR<JeuRelationFilter, JeuWhereInput>
  }

  export type DepotJeuOrderByWithRelationInput = {
    depot_ID?: SortOrder
    JeuID?: SortOrder
    quantite_depose?: SortOrder
    comission_depot?: SortOrder
    depot?: DepotOrderByWithRelationInput
    jeu?: JeuOrderByWithRelationInput
  }

  export type DepotJeuWhereUniqueInput = Prisma.AtLeast<{
    depot_ID_JeuID?: DepotJeuDepot_IDJeuIDCompoundUniqueInput
    AND?: DepotJeuWhereInput | DepotJeuWhereInput[]
    OR?: DepotJeuWhereInput[]
    NOT?: DepotJeuWhereInput | DepotJeuWhereInput[]
    depot_ID?: IntFilter<"DepotJeu"> | number
    JeuID?: IntFilter<"DepotJeu"> | number
    quantite_depose?: IntFilter<"DepotJeu"> | number
    comission_depot?: FloatFilter<"DepotJeu"> | number
    depot?: XOR<DepotRelationFilter, DepotWhereInput>
    jeu?: XOR<JeuRelationFilter, JeuWhereInput>
  }, "depot_ID_JeuID">

  export type DepotJeuOrderByWithAggregationInput = {
    depot_ID?: SortOrder
    JeuID?: SortOrder
    quantite_depose?: SortOrder
    comission_depot?: SortOrder
    _count?: DepotJeuCountOrderByAggregateInput
    _avg?: DepotJeuAvgOrderByAggregateInput
    _max?: DepotJeuMaxOrderByAggregateInput
    _min?: DepotJeuMinOrderByAggregateInput
    _sum?: DepotJeuSumOrderByAggregateInput
  }

  export type DepotJeuScalarWhereWithAggregatesInput = {
    AND?: DepotJeuScalarWhereWithAggregatesInput | DepotJeuScalarWhereWithAggregatesInput[]
    OR?: DepotJeuScalarWhereWithAggregatesInput[]
    NOT?: DepotJeuScalarWhereWithAggregatesInput | DepotJeuScalarWhereWithAggregatesInput[]
    depot_ID?: IntWithAggregatesFilter<"DepotJeu"> | number
    JeuID?: IntWithAggregatesFilter<"DepotJeu"> | number
    quantite_depose?: IntWithAggregatesFilter<"DepotJeu"> | number
    comission_depot?: FloatWithAggregatesFilter<"DepotJeu"> | number
  }

  export type AchatWhereInput = {
    AND?: AchatWhereInput | AchatWhereInput[]
    OR?: AchatWhereInput[]
    NOT?: AchatWhereInput | AchatWhereInput[]
    AchatID?: IntFilter<"Achat"> | number
    Total_paye?: FloatFilter<"Achat"> | number
    id_session?: IntFilter<"Achat"> | number
    DateAchat?: DateTimeFilter<"Achat"> | Date | string
    comission_vente_total?: FloatFilter<"Achat"> | number
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    achat_jeux?: AchatJeuListRelationFilter
  }

  export type AchatOrderByWithRelationInput = {
    AchatID?: SortOrder
    Total_paye?: SortOrder
    id_session?: SortOrder
    DateAchat?: SortOrder
    comission_vente_total?: SortOrder
    session?: SessionOrderByWithRelationInput
    achat_jeux?: AchatJeuOrderByRelationAggregateInput
  }

  export type AchatWhereUniqueInput = Prisma.AtLeast<{
    AchatID?: number
    AND?: AchatWhereInput | AchatWhereInput[]
    OR?: AchatWhereInput[]
    NOT?: AchatWhereInput | AchatWhereInput[]
    Total_paye?: FloatFilter<"Achat"> | number
    id_session?: IntFilter<"Achat"> | number
    DateAchat?: DateTimeFilter<"Achat"> | Date | string
    comission_vente_total?: FloatFilter<"Achat"> | number
    session?: XOR<SessionRelationFilter, SessionWhereInput>
    achat_jeux?: AchatJeuListRelationFilter
  }, "AchatID">

  export type AchatOrderByWithAggregationInput = {
    AchatID?: SortOrder
    Total_paye?: SortOrder
    id_session?: SortOrder
    DateAchat?: SortOrder
    comission_vente_total?: SortOrder
    _count?: AchatCountOrderByAggregateInput
    _avg?: AchatAvgOrderByAggregateInput
    _max?: AchatMaxOrderByAggregateInput
    _min?: AchatMinOrderByAggregateInput
    _sum?: AchatSumOrderByAggregateInput
  }

  export type AchatScalarWhereWithAggregatesInput = {
    AND?: AchatScalarWhereWithAggregatesInput | AchatScalarWhereWithAggregatesInput[]
    OR?: AchatScalarWhereWithAggregatesInput[]
    NOT?: AchatScalarWhereWithAggregatesInput | AchatScalarWhereWithAggregatesInput[]
    AchatID?: IntWithAggregatesFilter<"Achat"> | number
    Total_paye?: FloatWithAggregatesFilter<"Achat"> | number
    id_session?: IntWithAggregatesFilter<"Achat"> | number
    DateAchat?: DateTimeWithAggregatesFilter<"Achat"> | Date | string
    comission_vente_total?: FloatWithAggregatesFilter<"Achat"> | number
  }

  export type AchatJeuWhereInput = {
    AND?: AchatJeuWhereInput | AchatJeuWhereInput[]
    OR?: AchatJeuWhereInput[]
    NOT?: AchatJeuWhereInput | AchatJeuWhereInput[]
    AchatID?: IntFilter<"AchatJeu"> | number
    JeuID?: IntFilter<"AchatJeu"> | number
    comission_vente?: FloatFilter<"AchatJeu"> | number
    quantite_achete?: IntFilter<"AchatJeu"> | number
    achat?: XOR<AchatRelationFilter, AchatWhereInput>
    jeu?: XOR<JeuRelationFilter, JeuWhereInput>
  }

  export type AchatJeuOrderByWithRelationInput = {
    AchatID?: SortOrder
    JeuID?: SortOrder
    comission_vente?: SortOrder
    quantite_achete?: SortOrder
    achat?: AchatOrderByWithRelationInput
    jeu?: JeuOrderByWithRelationInput
  }

  export type AchatJeuWhereUniqueInput = Prisma.AtLeast<{
    AchatID_JeuID?: AchatJeuAchatIDJeuIDCompoundUniqueInput
    AND?: AchatJeuWhereInput | AchatJeuWhereInput[]
    OR?: AchatJeuWhereInput[]
    NOT?: AchatJeuWhereInput | AchatJeuWhereInput[]
    AchatID?: IntFilter<"AchatJeu"> | number
    JeuID?: IntFilter<"AchatJeu"> | number
    comission_vente?: FloatFilter<"AchatJeu"> | number
    quantite_achete?: IntFilter<"AchatJeu"> | number
    achat?: XOR<AchatRelationFilter, AchatWhereInput>
    jeu?: XOR<JeuRelationFilter, JeuWhereInput>
  }, "AchatID_JeuID">

  export type AchatJeuOrderByWithAggregationInput = {
    AchatID?: SortOrder
    JeuID?: SortOrder
    comission_vente?: SortOrder
    quantite_achete?: SortOrder
    _count?: AchatJeuCountOrderByAggregateInput
    _avg?: AchatJeuAvgOrderByAggregateInput
    _max?: AchatJeuMaxOrderByAggregateInput
    _min?: AchatJeuMinOrderByAggregateInput
    _sum?: AchatJeuSumOrderByAggregateInput
  }

  export type AchatJeuScalarWhereWithAggregatesInput = {
    AND?: AchatJeuScalarWhereWithAggregatesInput | AchatJeuScalarWhereWithAggregatesInput[]
    OR?: AchatJeuScalarWhereWithAggregatesInput[]
    NOT?: AchatJeuScalarWhereWithAggregatesInput | AchatJeuScalarWhereWithAggregatesInput[]
    AchatID?: IntWithAggregatesFilter<"AchatJeu"> | number
    JeuID?: IntWithAggregatesFilter<"AchatJeu"> | number
    comission_vente?: FloatWithAggregatesFilter<"AchatJeu"> | number
    quantite_achete?: IntWithAggregatesFilter<"AchatJeu"> | number
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    idSession?: IntFilter<"Session"> | number
    NomSession?: StringFilter<"Session"> | string
    DateDebut?: DateTimeFilter<"Session"> | Date | string
    DateFin?: DateTimeNullableFilter<"Session"> | Date | string | null
    pourc_frais_depot?: FloatFilter<"Session"> | number
    pourc_frais_vente?: FloatFilter<"Session"> | number
    Statut?: BoolFilter<"Session"> | boolean
    achats?: AchatListRelationFilter
    depots?: DepotListRelationFilter
    bilanVendeurSessions?: BilanVendeurSessionListRelationFilter
  }

  export type SessionOrderByWithRelationInput = {
    idSession?: SortOrder
    NomSession?: SortOrder
    DateDebut?: SortOrder
    DateFin?: SortOrderInput | SortOrder
    pourc_frais_depot?: SortOrder
    pourc_frais_vente?: SortOrder
    Statut?: SortOrder
    achats?: AchatOrderByRelationAggregateInput
    depots?: DepotOrderByRelationAggregateInput
    bilanVendeurSessions?: BilanVendeurSessionOrderByRelationAggregateInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    idSession?: number
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    NomSession?: StringFilter<"Session"> | string
    DateDebut?: DateTimeFilter<"Session"> | Date | string
    DateFin?: DateTimeNullableFilter<"Session"> | Date | string | null
    pourc_frais_depot?: FloatFilter<"Session"> | number
    pourc_frais_vente?: FloatFilter<"Session"> | number
    Statut?: BoolFilter<"Session"> | boolean
    achats?: AchatListRelationFilter
    depots?: DepotListRelationFilter
    bilanVendeurSessions?: BilanVendeurSessionListRelationFilter
  }, "idSession">

  export type SessionOrderByWithAggregationInput = {
    idSession?: SortOrder
    NomSession?: SortOrder
    DateDebut?: SortOrder
    DateFin?: SortOrderInput | SortOrder
    pourc_frais_depot?: SortOrder
    pourc_frais_vente?: SortOrder
    Statut?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    idSession?: IntWithAggregatesFilter<"Session"> | number
    NomSession?: StringWithAggregatesFilter<"Session"> | string
    DateDebut?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    DateFin?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    pourc_frais_depot?: FloatWithAggregatesFilter<"Session"> | number
    pourc_frais_vente?: FloatWithAggregatesFilter<"Session"> | number
    Statut?: BoolWithAggregatesFilter<"Session"> | boolean
  }

  export type UtilisateurWhereInput = {
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    UtilisateurID?: IntFilter<"Utilisateur"> | number
    Nom?: StringFilter<"Utilisateur"> | string
    Prenom?: StringFilter<"Utilisateur"> | string
    Email?: StringFilter<"Utilisateur"> | string
    MdP?: StringFilter<"Utilisateur"> | string
    Role?: EnumRoleFilter<"Utilisateur"> | $Enums.Role
  }

  export type UtilisateurOrderByWithRelationInput = {
    UtilisateurID?: SortOrder
    Nom?: SortOrder
    Prenom?: SortOrder
    Email?: SortOrder
    MdP?: SortOrder
    Role?: SortOrder
  }

  export type UtilisateurWhereUniqueInput = Prisma.AtLeast<{
    UtilisateurID?: number
    Email?: string
    AND?: UtilisateurWhereInput | UtilisateurWhereInput[]
    OR?: UtilisateurWhereInput[]
    NOT?: UtilisateurWhereInput | UtilisateurWhereInput[]
    Nom?: StringFilter<"Utilisateur"> | string
    Prenom?: StringFilter<"Utilisateur"> | string
    MdP?: StringFilter<"Utilisateur"> | string
    Role?: EnumRoleFilter<"Utilisateur"> | $Enums.Role
  }, "UtilisateurID" | "Email">

  export type UtilisateurOrderByWithAggregationInput = {
    UtilisateurID?: SortOrder
    Nom?: SortOrder
    Prenom?: SortOrder
    Email?: SortOrder
    MdP?: SortOrder
    Role?: SortOrder
    _count?: UtilisateurCountOrderByAggregateInput
    _avg?: UtilisateurAvgOrderByAggregateInput
    _max?: UtilisateurMaxOrderByAggregateInput
    _min?: UtilisateurMinOrderByAggregateInput
    _sum?: UtilisateurSumOrderByAggregateInput
  }

  export type UtilisateurScalarWhereWithAggregatesInput = {
    AND?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    OR?: UtilisateurScalarWhereWithAggregatesInput[]
    NOT?: UtilisateurScalarWhereWithAggregatesInput | UtilisateurScalarWhereWithAggregatesInput[]
    UtilisateurID?: IntWithAggregatesFilter<"Utilisateur"> | number
    Nom?: StringWithAggregatesFilter<"Utilisateur"> | string
    Prenom?: StringWithAggregatesFilter<"Utilisateur"> | string
    Email?: StringWithAggregatesFilter<"Utilisateur"> | string
    MdP?: StringWithAggregatesFilter<"Utilisateur"> | string
    Role?: EnumRoleWithAggregatesFilter<"Utilisateur"> | $Enums.Role
  }

  export type BilanVendeurSessionWhereInput = {
    AND?: BilanVendeurSessionWhereInput | BilanVendeurSessionWhereInput[]
    OR?: BilanVendeurSessionWhereInput[]
    NOT?: BilanVendeurSessionWhereInput | BilanVendeurSessionWhereInput[]
    id_vendeur?: IntFilter<"BilanVendeurSession"> | number
    id_session?: IntFilter<"BilanVendeurSession"> | number
    total_depots?: IntFilter<"BilanVendeurSession"> | number
    total_ventes?: IntFilter<"BilanVendeurSession"> | number
    total_stocks?: IntFilter<"BilanVendeurSession"> | number
    total_gains?: FloatFilter<"BilanVendeurSession"> | number
    total_comissions?: FloatFilter<"BilanVendeurSession"> | number
    vendeur?: XOR<VendeurRelationFilter, VendeurWhereInput>
    session?: XOR<SessionRelationFilter, SessionWhereInput>
  }

  export type BilanVendeurSessionOrderByWithRelationInput = {
    id_vendeur?: SortOrder
    id_session?: SortOrder
    total_depots?: SortOrder
    total_ventes?: SortOrder
    total_stocks?: SortOrder
    total_gains?: SortOrder
    total_comissions?: SortOrder
    vendeur?: VendeurOrderByWithRelationInput
    session?: SessionOrderByWithRelationInput
  }

  export type BilanVendeurSessionWhereUniqueInput = Prisma.AtLeast<{
    id_vendeur_id_session?: BilanVendeurSessionId_vendeurId_sessionCompoundUniqueInput
    AND?: BilanVendeurSessionWhereInput | BilanVendeurSessionWhereInput[]
    OR?: BilanVendeurSessionWhereInput[]
    NOT?: BilanVendeurSessionWhereInput | BilanVendeurSessionWhereInput[]
    id_vendeur?: IntFilter<"BilanVendeurSession"> | number
    id_session?: IntFilter<"BilanVendeurSession"> | number
    total_depots?: IntFilter<"BilanVendeurSession"> | number
    total_ventes?: IntFilter<"BilanVendeurSession"> | number
    total_stocks?: IntFilter<"BilanVendeurSession"> | number
    total_gains?: FloatFilter<"BilanVendeurSession"> | number
    total_comissions?: FloatFilter<"BilanVendeurSession"> | number
    vendeur?: XOR<VendeurRelationFilter, VendeurWhereInput>
    session?: XOR<SessionRelationFilter, SessionWhereInput>
  }, "id_vendeur_id_session">

  export type BilanVendeurSessionOrderByWithAggregationInput = {
    id_vendeur?: SortOrder
    id_session?: SortOrder
    total_depots?: SortOrder
    total_ventes?: SortOrder
    total_stocks?: SortOrder
    total_gains?: SortOrder
    total_comissions?: SortOrder
    _count?: BilanVendeurSessionCountOrderByAggregateInput
    _avg?: BilanVendeurSessionAvgOrderByAggregateInput
    _max?: BilanVendeurSessionMaxOrderByAggregateInput
    _min?: BilanVendeurSessionMinOrderByAggregateInput
    _sum?: BilanVendeurSessionSumOrderByAggregateInput
  }

  export type BilanVendeurSessionScalarWhereWithAggregatesInput = {
    AND?: BilanVendeurSessionScalarWhereWithAggregatesInput | BilanVendeurSessionScalarWhereWithAggregatesInput[]
    OR?: BilanVendeurSessionScalarWhereWithAggregatesInput[]
    NOT?: BilanVendeurSessionScalarWhereWithAggregatesInput | BilanVendeurSessionScalarWhereWithAggregatesInput[]
    id_vendeur?: IntWithAggregatesFilter<"BilanVendeurSession"> | number
    id_session?: IntWithAggregatesFilter<"BilanVendeurSession"> | number
    total_depots?: IntWithAggregatesFilter<"BilanVendeurSession"> | number
    total_ventes?: IntWithAggregatesFilter<"BilanVendeurSession"> | number
    total_stocks?: IntWithAggregatesFilter<"BilanVendeurSession"> | number
    total_gains?: FloatWithAggregatesFilter<"BilanVendeurSession"> | number
    total_comissions?: FloatWithAggregatesFilter<"BilanVendeurSession"> | number
  }

  export type JeuxMarqueCreateInput = {
    JeuRef_id: number
    Nom: string
    Editeur: string
    Description: string
    jeuxDepot?: JeuCreateNestedManyWithoutJeuxMarqueInput
  }

  export type JeuxMarqueUncheckedCreateInput = {
    JeuRef_id: number
    Nom: string
    Editeur: string
    Description: string
    jeuxDepot?: JeuUncheckedCreateNestedManyWithoutJeuxMarqueInput
  }

  export type JeuxMarqueUpdateInput = {
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Editeur?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    jeuxDepot?: JeuUpdateManyWithoutJeuxMarqueNestedInput
  }

  export type JeuxMarqueUncheckedUpdateInput = {
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Editeur?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
    jeuxDepot?: JeuUncheckedUpdateManyWithoutJeuxMarqueNestedInput
  }

  export type JeuxMarqueCreateManyInput = {
    JeuRef_id: number
    Nom: string
    Editeur: string
    Description: string
  }

  export type JeuxMarqueUpdateManyMutationInput = {
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Editeur?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type JeuxMarqueUncheckedUpdateManyInput = {
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Editeur?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type JeuCreateInput = {
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    depot: DepotCreateNestedOneWithoutJeuxInput
    jeuxMarque?: JeuxMarqueCreateNestedOneWithoutJeuxDepotInput
    achat_jeux?: AchatJeuCreateNestedManyWithoutJeuInput
    depot_jeux?: DepotJeuCreateNestedManyWithoutJeuInput
  }

  export type JeuUncheckedCreateInput = {
    JeuID?: number
    JeuRef_id: number
    depot_ID: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    achat_jeux?: AchatJeuUncheckedCreateNestedManyWithoutJeuInput
    depot_jeux?: DepotJeuUncheckedCreateNestedManyWithoutJeuInput
  }

  export type JeuUpdateInput = {
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    depot?: DepotUpdateOneRequiredWithoutJeuxNestedInput
    jeuxMarque?: JeuxMarqueUpdateOneWithoutJeuxDepotNestedInput
    achat_jeux?: AchatJeuUpdateManyWithoutJeuNestedInput
    depot_jeux?: DepotJeuUpdateManyWithoutJeuNestedInput
  }

  export type JeuUncheckedUpdateInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    depot_ID?: IntFieldUpdateOperationsInput | number
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    achat_jeux?: AchatJeuUncheckedUpdateManyWithoutJeuNestedInput
    depot_jeux?: DepotJeuUncheckedUpdateManyWithoutJeuNestedInput
  }

  export type JeuCreateManyInput = {
    JeuID?: number
    JeuRef_id: number
    depot_ID: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
  }

  export type JeuUpdateManyMutationInput = {
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
  }

  export type JeuUncheckedUpdateManyInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    depot_ID?: IntFieldUpdateOperationsInput | number
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
  }

  export type DepotCreateInput = {
    date_depot: Date | string
    comission_depot_total: number
    vendeur: VendeurCreateNestedOneWithoutDepotsInput
    session: SessionCreateNestedOneWithoutDepotsInput
    jeux?: JeuCreateNestedManyWithoutDepotInput
    depot_jeux?: DepotJeuCreateNestedManyWithoutDepotInput
  }

  export type DepotUncheckedCreateInput = {
    ID_depot?: number
    VendeurID: number
    date_depot: Date | string
    id_session: number
    comission_depot_total: number
    jeux?: JeuUncheckedCreateNestedManyWithoutDepotInput
    depot_jeux?: DepotJeuUncheckedCreateNestedManyWithoutDepotInput
  }

  export type DepotUpdateInput = {
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    vendeur?: VendeurUpdateOneRequiredWithoutDepotsNestedInput
    session?: SessionUpdateOneRequiredWithoutDepotsNestedInput
    jeux?: JeuUpdateManyWithoutDepotNestedInput
    depot_jeux?: DepotJeuUpdateManyWithoutDepotNestedInput
  }

  export type DepotUncheckedUpdateInput = {
    ID_depot?: IntFieldUpdateOperationsInput | number
    VendeurID?: IntFieldUpdateOperationsInput | number
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    id_session?: IntFieldUpdateOperationsInput | number
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    jeux?: JeuUncheckedUpdateManyWithoutDepotNestedInput
    depot_jeux?: DepotJeuUncheckedUpdateManyWithoutDepotNestedInput
  }

  export type DepotCreateManyInput = {
    ID_depot?: number
    VendeurID: number
    date_depot: Date | string
    id_session: number
    comission_depot_total: number
  }

  export type DepotUpdateManyMutationInput = {
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
  }

  export type DepotUncheckedUpdateManyInput = {
    ID_depot?: IntFieldUpdateOperationsInput | number
    VendeurID?: IntFieldUpdateOperationsInput | number
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    id_session?: IntFieldUpdateOperationsInput | number
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
  }

  export type VendeurCreateInput = {
    Nom: string
    Email: string
    Telephone: string
    depots?: DepotCreateNestedManyWithoutVendeurInput
    BilanVendeurSession?: BilanVendeurSessionCreateNestedManyWithoutVendeurInput
  }

  export type VendeurUncheckedCreateInput = {
    VendeurID?: number
    Nom: string
    Email: string
    Telephone: string
    depots?: DepotUncheckedCreateNestedManyWithoutVendeurInput
    BilanVendeurSession?: BilanVendeurSessionUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type VendeurUpdateInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Telephone?: StringFieldUpdateOperationsInput | string
    depots?: DepotUpdateManyWithoutVendeurNestedInput
    BilanVendeurSession?: BilanVendeurSessionUpdateManyWithoutVendeurNestedInput
  }

  export type VendeurUncheckedUpdateInput = {
    VendeurID?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Telephone?: StringFieldUpdateOperationsInput | string
    depots?: DepotUncheckedUpdateManyWithoutVendeurNestedInput
    BilanVendeurSession?: BilanVendeurSessionUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type VendeurCreateManyInput = {
    VendeurID?: number
    Nom: string
    Email: string
    Telephone: string
  }

  export type VendeurUpdateManyMutationInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Telephone?: StringFieldUpdateOperationsInput | string
  }

  export type VendeurUncheckedUpdateManyInput = {
    VendeurID?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Telephone?: StringFieldUpdateOperationsInput | string
  }

  export type DepotJeuCreateInput = {
    quantite_depose: number
    comission_depot: number
    depot: DepotCreateNestedOneWithoutDepot_jeuxInput
    jeu: JeuCreateNestedOneWithoutDepot_jeuxInput
  }

  export type DepotJeuUncheckedCreateInput = {
    depot_ID: number
    JeuID: number
    quantite_depose: number
    comission_depot: number
  }

  export type DepotJeuUpdateInput = {
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
    depot?: DepotUpdateOneRequiredWithoutDepot_jeuxNestedInput
    jeu?: JeuUpdateOneRequiredWithoutDepot_jeuxNestedInput
  }

  export type DepotJeuUncheckedUpdateInput = {
    depot_ID?: IntFieldUpdateOperationsInput | number
    JeuID?: IntFieldUpdateOperationsInput | number
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
  }

  export type DepotJeuCreateManyInput = {
    depot_ID: number
    JeuID: number
    quantite_depose: number
    comission_depot: number
  }

  export type DepotJeuUpdateManyMutationInput = {
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
  }

  export type DepotJeuUncheckedUpdateManyInput = {
    depot_ID?: IntFieldUpdateOperationsInput | number
    JeuID?: IntFieldUpdateOperationsInput | number
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
  }

  export type AchatCreateInput = {
    Total_paye: number
    DateAchat: Date | string
    comission_vente_total: number
    session: SessionCreateNestedOneWithoutAchatsInput
    achat_jeux?: AchatJeuCreateNestedManyWithoutAchatInput
  }

  export type AchatUncheckedCreateInput = {
    AchatID?: number
    Total_paye: number
    id_session: number
    DateAchat: Date | string
    comission_vente_total: number
    achat_jeux?: AchatJeuUncheckedCreateNestedManyWithoutAchatInput
  }

  export type AchatUpdateInput = {
    Total_paye?: FloatFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
    session?: SessionUpdateOneRequiredWithoutAchatsNestedInput
    achat_jeux?: AchatJeuUpdateManyWithoutAchatNestedInput
  }

  export type AchatUncheckedUpdateInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    Total_paye?: FloatFieldUpdateOperationsInput | number
    id_session?: IntFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
    achat_jeux?: AchatJeuUncheckedUpdateManyWithoutAchatNestedInput
  }

  export type AchatCreateManyInput = {
    AchatID?: number
    Total_paye: number
    id_session: number
    DateAchat: Date | string
    comission_vente_total: number
  }

  export type AchatUpdateManyMutationInput = {
    Total_paye?: FloatFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
  }

  export type AchatUncheckedUpdateManyInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    Total_paye?: FloatFieldUpdateOperationsInput | number
    id_session?: IntFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
  }

  export type AchatJeuCreateInput = {
    comission_vente: number
    quantite_achete: number
    achat: AchatCreateNestedOneWithoutAchat_jeuxInput
    jeu: JeuCreateNestedOneWithoutAchat_jeuxInput
  }

  export type AchatJeuUncheckedCreateInput = {
    AchatID: number
    JeuID: number
    comission_vente: number
    quantite_achete: number
  }

  export type AchatJeuUpdateInput = {
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
    achat?: AchatUpdateOneRequiredWithoutAchat_jeuxNestedInput
    jeu?: JeuUpdateOneRequiredWithoutAchat_jeuxNestedInput
  }

  export type AchatJeuUncheckedUpdateInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    JeuID?: IntFieldUpdateOperationsInput | number
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
  }

  export type AchatJeuCreateManyInput = {
    AchatID: number
    JeuID: number
    comission_vente: number
    quantite_achete: number
  }

  export type AchatJeuUpdateManyMutationInput = {
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
  }

  export type AchatJeuUncheckedUpdateManyInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    JeuID?: IntFieldUpdateOperationsInput | number
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
  }

  export type SessionCreateInput = {
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    achats?: AchatCreateNestedManyWithoutSessionInput
    depots?: DepotCreateNestedManyWithoutSessionInput
    bilanVendeurSessions?: BilanVendeurSessionCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    idSession?: number
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    achats?: AchatUncheckedCreateNestedManyWithoutSessionInput
    depots?: DepotUncheckedCreateNestedManyWithoutSessionInput
    bilanVendeurSessions?: BilanVendeurSessionUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionUpdateInput = {
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
    achats?: AchatUpdateManyWithoutSessionNestedInput
    depots?: DepotUpdateManyWithoutSessionNestedInput
    bilanVendeurSessions?: BilanVendeurSessionUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    idSession?: IntFieldUpdateOperationsInput | number
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
    achats?: AchatUncheckedUpdateManyWithoutSessionNestedInput
    depots?: DepotUncheckedUpdateManyWithoutSessionNestedInput
    bilanVendeurSessions?: BilanVendeurSessionUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionCreateManyInput = {
    idSession?: number
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
  }

  export type SessionUpdateManyMutationInput = {
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyInput = {
    idSession?: IntFieldUpdateOperationsInput | number
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UtilisateurCreateInput = {
    Nom: string
    Prenom: string
    Email: string
    MdP: string
    Role: $Enums.Role
  }

  export type UtilisateurUncheckedCreateInput = {
    UtilisateurID?: number
    Nom: string
    Prenom: string
    Email: string
    MdP: string
    Role: $Enums.Role
  }

  export type UtilisateurUpdateInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    MdP?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UtilisateurUncheckedUpdateInput = {
    UtilisateurID?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    MdP?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UtilisateurCreateManyInput = {
    UtilisateurID?: number
    Nom: string
    Prenom: string
    Email: string
    MdP: string
    Role: $Enums.Role
  }

  export type UtilisateurUpdateManyMutationInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    MdP?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UtilisateurUncheckedUpdateManyInput = {
    UtilisateurID?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Prenom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    MdP?: StringFieldUpdateOperationsInput | string
    Role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type BilanVendeurSessionCreateInput = {
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
    vendeur: VendeurCreateNestedOneWithoutBilanVendeurSessionInput
    session: SessionCreateNestedOneWithoutBilanVendeurSessionsInput
  }

  export type BilanVendeurSessionUncheckedCreateInput = {
    id_vendeur: number
    id_session: number
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
  }

  export type BilanVendeurSessionUpdateInput = {
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
    vendeur?: VendeurUpdateOneRequiredWithoutBilanVendeurSessionNestedInput
    session?: SessionUpdateOneRequiredWithoutBilanVendeurSessionsNestedInput
  }

  export type BilanVendeurSessionUncheckedUpdateInput = {
    id_vendeur?: IntFieldUpdateOperationsInput | number
    id_session?: IntFieldUpdateOperationsInput | number
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
  }

  export type BilanVendeurSessionCreateManyInput = {
    id_vendeur: number
    id_session: number
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
  }

  export type BilanVendeurSessionUpdateManyMutationInput = {
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
  }

  export type BilanVendeurSessionUncheckedUpdateManyInput = {
    id_vendeur?: IntFieldUpdateOperationsInput | number
    id_session?: IntFieldUpdateOperationsInput | number
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type JeuListRelationFilter = {
    every?: JeuWhereInput
    some?: JeuWhereInput
    none?: JeuWhereInput
  }

  export type JeuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JeuxMarqueCountOrderByAggregateInput = {
    JeuRef_id?: SortOrder
    Nom?: SortOrder
    Editeur?: SortOrder
    Description?: SortOrder
  }

  export type JeuxMarqueAvgOrderByAggregateInput = {
    JeuRef_id?: SortOrder
  }

  export type JeuxMarqueMaxOrderByAggregateInput = {
    JeuRef_id?: SortOrder
    Nom?: SortOrder
    Editeur?: SortOrder
    Description?: SortOrder
  }

  export type JeuxMarqueMinOrderByAggregateInput = {
    JeuRef_id?: SortOrder
    Nom?: SortOrder
    Editeur?: SortOrder
    Description?: SortOrder
  }

  export type JeuxMarqueSumOrderByAggregateInput = {
    JeuRef_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DepotRelationFilter = {
    is?: DepotWhereInput
    isNot?: DepotWhereInput
  }

  export type JeuxMarqueNullableRelationFilter = {
    is?: JeuxMarqueWhereInput | null
    isNot?: JeuxMarqueWhereInput | null
  }

  export type AchatJeuListRelationFilter = {
    every?: AchatJeuWhereInput
    some?: AchatJeuWhereInput
    none?: AchatJeuWhereInput
  }

  export type DepotJeuListRelationFilter = {
    every?: DepotJeuWhereInput
    some?: DepotJeuWhereInput
    none?: DepotJeuWhereInput
  }

  export type AchatJeuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepotJeuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JeuCountOrderByAggregateInput = {
    JeuID?: SortOrder
    JeuRef_id?: SortOrder
    depot_ID?: SortOrder
    prix_unitaire?: SortOrder
    mise_en_vente?: SortOrder
    quantite_disponible?: SortOrder
  }

  export type JeuAvgOrderByAggregateInput = {
    JeuID?: SortOrder
    JeuRef_id?: SortOrder
    depot_ID?: SortOrder
    prix_unitaire?: SortOrder
    quantite_disponible?: SortOrder
  }

  export type JeuMaxOrderByAggregateInput = {
    JeuID?: SortOrder
    JeuRef_id?: SortOrder
    depot_ID?: SortOrder
    prix_unitaire?: SortOrder
    mise_en_vente?: SortOrder
    quantite_disponible?: SortOrder
  }

  export type JeuMinOrderByAggregateInput = {
    JeuID?: SortOrder
    JeuRef_id?: SortOrder
    depot_ID?: SortOrder
    prix_unitaire?: SortOrder
    mise_en_vente?: SortOrder
    quantite_disponible?: SortOrder
  }

  export type JeuSumOrderByAggregateInput = {
    JeuID?: SortOrder
    JeuRef_id?: SortOrder
    depot_ID?: SortOrder
    prix_unitaire?: SortOrder
    quantite_disponible?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type VendeurRelationFilter = {
    is?: VendeurWhereInput
    isNot?: VendeurWhereInput
  }

  export type SessionRelationFilter = {
    is?: SessionWhereInput
    isNot?: SessionWhereInput
  }

  export type DepotCountOrderByAggregateInput = {
    ID_depot?: SortOrder
    VendeurID?: SortOrder
    date_depot?: SortOrder
    id_session?: SortOrder
    comission_depot_total?: SortOrder
  }

  export type DepotAvgOrderByAggregateInput = {
    ID_depot?: SortOrder
    VendeurID?: SortOrder
    id_session?: SortOrder
    comission_depot_total?: SortOrder
  }

  export type DepotMaxOrderByAggregateInput = {
    ID_depot?: SortOrder
    VendeurID?: SortOrder
    date_depot?: SortOrder
    id_session?: SortOrder
    comission_depot_total?: SortOrder
  }

  export type DepotMinOrderByAggregateInput = {
    ID_depot?: SortOrder
    VendeurID?: SortOrder
    date_depot?: SortOrder
    id_session?: SortOrder
    comission_depot_total?: SortOrder
  }

  export type DepotSumOrderByAggregateInput = {
    ID_depot?: SortOrder
    VendeurID?: SortOrder
    id_session?: SortOrder
    comission_depot_total?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DepotListRelationFilter = {
    every?: DepotWhereInput
    some?: DepotWhereInput
    none?: DepotWhereInput
  }

  export type BilanVendeurSessionListRelationFilter = {
    every?: BilanVendeurSessionWhereInput
    some?: BilanVendeurSessionWhereInput
    none?: BilanVendeurSessionWhereInput
  }

  export type DepotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BilanVendeurSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendeurCountOrderByAggregateInput = {
    VendeurID?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Telephone?: SortOrder
  }

  export type VendeurAvgOrderByAggregateInput = {
    VendeurID?: SortOrder
  }

  export type VendeurMaxOrderByAggregateInput = {
    VendeurID?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Telephone?: SortOrder
  }

  export type VendeurMinOrderByAggregateInput = {
    VendeurID?: SortOrder
    Nom?: SortOrder
    Email?: SortOrder
    Telephone?: SortOrder
  }

  export type VendeurSumOrderByAggregateInput = {
    VendeurID?: SortOrder
  }

  export type JeuRelationFilter = {
    is?: JeuWhereInput
    isNot?: JeuWhereInput
  }

  export type DepotJeuDepot_IDJeuIDCompoundUniqueInput = {
    depot_ID: number
    JeuID: number
  }

  export type DepotJeuCountOrderByAggregateInput = {
    depot_ID?: SortOrder
    JeuID?: SortOrder
    quantite_depose?: SortOrder
    comission_depot?: SortOrder
  }

  export type DepotJeuAvgOrderByAggregateInput = {
    depot_ID?: SortOrder
    JeuID?: SortOrder
    quantite_depose?: SortOrder
    comission_depot?: SortOrder
  }

  export type DepotJeuMaxOrderByAggregateInput = {
    depot_ID?: SortOrder
    JeuID?: SortOrder
    quantite_depose?: SortOrder
    comission_depot?: SortOrder
  }

  export type DepotJeuMinOrderByAggregateInput = {
    depot_ID?: SortOrder
    JeuID?: SortOrder
    quantite_depose?: SortOrder
    comission_depot?: SortOrder
  }

  export type DepotJeuSumOrderByAggregateInput = {
    depot_ID?: SortOrder
    JeuID?: SortOrder
    quantite_depose?: SortOrder
    comission_depot?: SortOrder
  }

  export type AchatCountOrderByAggregateInput = {
    AchatID?: SortOrder
    Total_paye?: SortOrder
    id_session?: SortOrder
    DateAchat?: SortOrder
    comission_vente_total?: SortOrder
  }

  export type AchatAvgOrderByAggregateInput = {
    AchatID?: SortOrder
    Total_paye?: SortOrder
    id_session?: SortOrder
    comission_vente_total?: SortOrder
  }

  export type AchatMaxOrderByAggregateInput = {
    AchatID?: SortOrder
    Total_paye?: SortOrder
    id_session?: SortOrder
    DateAchat?: SortOrder
    comission_vente_total?: SortOrder
  }

  export type AchatMinOrderByAggregateInput = {
    AchatID?: SortOrder
    Total_paye?: SortOrder
    id_session?: SortOrder
    DateAchat?: SortOrder
    comission_vente_total?: SortOrder
  }

  export type AchatSumOrderByAggregateInput = {
    AchatID?: SortOrder
    Total_paye?: SortOrder
    id_session?: SortOrder
    comission_vente_total?: SortOrder
  }

  export type AchatRelationFilter = {
    is?: AchatWhereInput
    isNot?: AchatWhereInput
  }

  export type AchatJeuAchatIDJeuIDCompoundUniqueInput = {
    AchatID: number
    JeuID: number
  }

  export type AchatJeuCountOrderByAggregateInput = {
    AchatID?: SortOrder
    JeuID?: SortOrder
    comission_vente?: SortOrder
    quantite_achete?: SortOrder
  }

  export type AchatJeuAvgOrderByAggregateInput = {
    AchatID?: SortOrder
    JeuID?: SortOrder
    comission_vente?: SortOrder
    quantite_achete?: SortOrder
  }

  export type AchatJeuMaxOrderByAggregateInput = {
    AchatID?: SortOrder
    JeuID?: SortOrder
    comission_vente?: SortOrder
    quantite_achete?: SortOrder
  }

  export type AchatJeuMinOrderByAggregateInput = {
    AchatID?: SortOrder
    JeuID?: SortOrder
    comission_vente?: SortOrder
    quantite_achete?: SortOrder
  }

  export type AchatJeuSumOrderByAggregateInput = {
    AchatID?: SortOrder
    JeuID?: SortOrder
    comission_vente?: SortOrder
    quantite_achete?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AchatListRelationFilter = {
    every?: AchatWhereInput
    some?: AchatWhereInput
    none?: AchatWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AchatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    idSession?: SortOrder
    NomSession?: SortOrder
    DateDebut?: SortOrder
    DateFin?: SortOrder
    pourc_frais_depot?: SortOrder
    pourc_frais_vente?: SortOrder
    Statut?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    idSession?: SortOrder
    pourc_frais_depot?: SortOrder
    pourc_frais_vente?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    idSession?: SortOrder
    NomSession?: SortOrder
    DateDebut?: SortOrder
    DateFin?: SortOrder
    pourc_frais_depot?: SortOrder
    pourc_frais_vente?: SortOrder
    Statut?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    idSession?: SortOrder
    NomSession?: SortOrder
    DateDebut?: SortOrder
    DateFin?: SortOrder
    pourc_frais_depot?: SortOrder
    pourc_frais_vente?: SortOrder
    Statut?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    idSession?: SortOrder
    pourc_frais_depot?: SortOrder
    pourc_frais_vente?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type UtilisateurCountOrderByAggregateInput = {
    UtilisateurID?: SortOrder
    Nom?: SortOrder
    Prenom?: SortOrder
    Email?: SortOrder
    MdP?: SortOrder
    Role?: SortOrder
  }

  export type UtilisateurAvgOrderByAggregateInput = {
    UtilisateurID?: SortOrder
  }

  export type UtilisateurMaxOrderByAggregateInput = {
    UtilisateurID?: SortOrder
    Nom?: SortOrder
    Prenom?: SortOrder
    Email?: SortOrder
    MdP?: SortOrder
    Role?: SortOrder
  }

  export type UtilisateurMinOrderByAggregateInput = {
    UtilisateurID?: SortOrder
    Nom?: SortOrder
    Prenom?: SortOrder
    Email?: SortOrder
    MdP?: SortOrder
    Role?: SortOrder
  }

  export type UtilisateurSumOrderByAggregateInput = {
    UtilisateurID?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BilanVendeurSessionId_vendeurId_sessionCompoundUniqueInput = {
    id_vendeur: number
    id_session: number
  }

  export type BilanVendeurSessionCountOrderByAggregateInput = {
    id_vendeur?: SortOrder
    id_session?: SortOrder
    total_depots?: SortOrder
    total_ventes?: SortOrder
    total_stocks?: SortOrder
    total_gains?: SortOrder
    total_comissions?: SortOrder
  }

  export type BilanVendeurSessionAvgOrderByAggregateInput = {
    id_vendeur?: SortOrder
    id_session?: SortOrder
    total_depots?: SortOrder
    total_ventes?: SortOrder
    total_stocks?: SortOrder
    total_gains?: SortOrder
    total_comissions?: SortOrder
  }

  export type BilanVendeurSessionMaxOrderByAggregateInput = {
    id_vendeur?: SortOrder
    id_session?: SortOrder
    total_depots?: SortOrder
    total_ventes?: SortOrder
    total_stocks?: SortOrder
    total_gains?: SortOrder
    total_comissions?: SortOrder
  }

  export type BilanVendeurSessionMinOrderByAggregateInput = {
    id_vendeur?: SortOrder
    id_session?: SortOrder
    total_depots?: SortOrder
    total_ventes?: SortOrder
    total_stocks?: SortOrder
    total_gains?: SortOrder
    total_comissions?: SortOrder
  }

  export type BilanVendeurSessionSumOrderByAggregateInput = {
    id_vendeur?: SortOrder
    id_session?: SortOrder
    total_depots?: SortOrder
    total_ventes?: SortOrder
    total_stocks?: SortOrder
    total_gains?: SortOrder
    total_comissions?: SortOrder
  }

  export type JeuCreateNestedManyWithoutJeuxMarqueInput = {
    create?: XOR<JeuCreateWithoutJeuxMarqueInput, JeuUncheckedCreateWithoutJeuxMarqueInput> | JeuCreateWithoutJeuxMarqueInput[] | JeuUncheckedCreateWithoutJeuxMarqueInput[]
    connectOrCreate?: JeuCreateOrConnectWithoutJeuxMarqueInput | JeuCreateOrConnectWithoutJeuxMarqueInput[]
    createMany?: JeuCreateManyJeuxMarqueInputEnvelope
    connect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
  }

  export type JeuUncheckedCreateNestedManyWithoutJeuxMarqueInput = {
    create?: XOR<JeuCreateWithoutJeuxMarqueInput, JeuUncheckedCreateWithoutJeuxMarqueInput> | JeuCreateWithoutJeuxMarqueInput[] | JeuUncheckedCreateWithoutJeuxMarqueInput[]
    connectOrCreate?: JeuCreateOrConnectWithoutJeuxMarqueInput | JeuCreateOrConnectWithoutJeuxMarqueInput[]
    createMany?: JeuCreateManyJeuxMarqueInputEnvelope
    connect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type JeuUpdateManyWithoutJeuxMarqueNestedInput = {
    create?: XOR<JeuCreateWithoutJeuxMarqueInput, JeuUncheckedCreateWithoutJeuxMarqueInput> | JeuCreateWithoutJeuxMarqueInput[] | JeuUncheckedCreateWithoutJeuxMarqueInput[]
    connectOrCreate?: JeuCreateOrConnectWithoutJeuxMarqueInput | JeuCreateOrConnectWithoutJeuxMarqueInput[]
    upsert?: JeuUpsertWithWhereUniqueWithoutJeuxMarqueInput | JeuUpsertWithWhereUniqueWithoutJeuxMarqueInput[]
    createMany?: JeuCreateManyJeuxMarqueInputEnvelope
    set?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    disconnect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    delete?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    connect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    update?: JeuUpdateWithWhereUniqueWithoutJeuxMarqueInput | JeuUpdateWithWhereUniqueWithoutJeuxMarqueInput[]
    updateMany?: JeuUpdateManyWithWhereWithoutJeuxMarqueInput | JeuUpdateManyWithWhereWithoutJeuxMarqueInput[]
    deleteMany?: JeuScalarWhereInput | JeuScalarWhereInput[]
  }

  export type JeuUncheckedUpdateManyWithoutJeuxMarqueNestedInput = {
    create?: XOR<JeuCreateWithoutJeuxMarqueInput, JeuUncheckedCreateWithoutJeuxMarqueInput> | JeuCreateWithoutJeuxMarqueInput[] | JeuUncheckedCreateWithoutJeuxMarqueInput[]
    connectOrCreate?: JeuCreateOrConnectWithoutJeuxMarqueInput | JeuCreateOrConnectWithoutJeuxMarqueInput[]
    upsert?: JeuUpsertWithWhereUniqueWithoutJeuxMarqueInput | JeuUpsertWithWhereUniqueWithoutJeuxMarqueInput[]
    createMany?: JeuCreateManyJeuxMarqueInputEnvelope
    set?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    disconnect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    delete?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    connect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    update?: JeuUpdateWithWhereUniqueWithoutJeuxMarqueInput | JeuUpdateWithWhereUniqueWithoutJeuxMarqueInput[]
    updateMany?: JeuUpdateManyWithWhereWithoutJeuxMarqueInput | JeuUpdateManyWithWhereWithoutJeuxMarqueInput[]
    deleteMany?: JeuScalarWhereInput | JeuScalarWhereInput[]
  }

  export type DepotCreateNestedOneWithoutJeuxInput = {
    create?: XOR<DepotCreateWithoutJeuxInput, DepotUncheckedCreateWithoutJeuxInput>
    connectOrCreate?: DepotCreateOrConnectWithoutJeuxInput
    connect?: DepotWhereUniqueInput
  }

  export type JeuxMarqueCreateNestedOneWithoutJeuxDepotInput = {
    create?: XOR<JeuxMarqueCreateWithoutJeuxDepotInput, JeuxMarqueUncheckedCreateWithoutJeuxDepotInput>
    connectOrCreate?: JeuxMarqueCreateOrConnectWithoutJeuxDepotInput
    connect?: JeuxMarqueWhereUniqueInput
  }

  export type AchatJeuCreateNestedManyWithoutJeuInput = {
    create?: XOR<AchatJeuCreateWithoutJeuInput, AchatJeuUncheckedCreateWithoutJeuInput> | AchatJeuCreateWithoutJeuInput[] | AchatJeuUncheckedCreateWithoutJeuInput[]
    connectOrCreate?: AchatJeuCreateOrConnectWithoutJeuInput | AchatJeuCreateOrConnectWithoutJeuInput[]
    createMany?: AchatJeuCreateManyJeuInputEnvelope
    connect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
  }

  export type DepotJeuCreateNestedManyWithoutJeuInput = {
    create?: XOR<DepotJeuCreateWithoutJeuInput, DepotJeuUncheckedCreateWithoutJeuInput> | DepotJeuCreateWithoutJeuInput[] | DepotJeuUncheckedCreateWithoutJeuInput[]
    connectOrCreate?: DepotJeuCreateOrConnectWithoutJeuInput | DepotJeuCreateOrConnectWithoutJeuInput[]
    createMany?: DepotJeuCreateManyJeuInputEnvelope
    connect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
  }

  export type AchatJeuUncheckedCreateNestedManyWithoutJeuInput = {
    create?: XOR<AchatJeuCreateWithoutJeuInput, AchatJeuUncheckedCreateWithoutJeuInput> | AchatJeuCreateWithoutJeuInput[] | AchatJeuUncheckedCreateWithoutJeuInput[]
    connectOrCreate?: AchatJeuCreateOrConnectWithoutJeuInput | AchatJeuCreateOrConnectWithoutJeuInput[]
    createMany?: AchatJeuCreateManyJeuInputEnvelope
    connect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
  }

  export type DepotJeuUncheckedCreateNestedManyWithoutJeuInput = {
    create?: XOR<DepotJeuCreateWithoutJeuInput, DepotJeuUncheckedCreateWithoutJeuInput> | DepotJeuCreateWithoutJeuInput[] | DepotJeuUncheckedCreateWithoutJeuInput[]
    connectOrCreate?: DepotJeuCreateOrConnectWithoutJeuInput | DepotJeuCreateOrConnectWithoutJeuInput[]
    createMany?: DepotJeuCreateManyJeuInputEnvelope
    connect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DepotUpdateOneRequiredWithoutJeuxNestedInput = {
    create?: XOR<DepotCreateWithoutJeuxInput, DepotUncheckedCreateWithoutJeuxInput>
    connectOrCreate?: DepotCreateOrConnectWithoutJeuxInput
    upsert?: DepotUpsertWithoutJeuxInput
    connect?: DepotWhereUniqueInput
    update?: XOR<XOR<DepotUpdateToOneWithWhereWithoutJeuxInput, DepotUpdateWithoutJeuxInput>, DepotUncheckedUpdateWithoutJeuxInput>
  }

  export type JeuxMarqueUpdateOneWithoutJeuxDepotNestedInput = {
    create?: XOR<JeuxMarqueCreateWithoutJeuxDepotInput, JeuxMarqueUncheckedCreateWithoutJeuxDepotInput>
    connectOrCreate?: JeuxMarqueCreateOrConnectWithoutJeuxDepotInput
    upsert?: JeuxMarqueUpsertWithoutJeuxDepotInput
    disconnect?: JeuxMarqueWhereInput | boolean
    delete?: JeuxMarqueWhereInput | boolean
    connect?: JeuxMarqueWhereUniqueInput
    update?: XOR<XOR<JeuxMarqueUpdateToOneWithWhereWithoutJeuxDepotInput, JeuxMarqueUpdateWithoutJeuxDepotInput>, JeuxMarqueUncheckedUpdateWithoutJeuxDepotInput>
  }

  export type AchatJeuUpdateManyWithoutJeuNestedInput = {
    create?: XOR<AchatJeuCreateWithoutJeuInput, AchatJeuUncheckedCreateWithoutJeuInput> | AchatJeuCreateWithoutJeuInput[] | AchatJeuUncheckedCreateWithoutJeuInput[]
    connectOrCreate?: AchatJeuCreateOrConnectWithoutJeuInput | AchatJeuCreateOrConnectWithoutJeuInput[]
    upsert?: AchatJeuUpsertWithWhereUniqueWithoutJeuInput | AchatJeuUpsertWithWhereUniqueWithoutJeuInput[]
    createMany?: AchatJeuCreateManyJeuInputEnvelope
    set?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    disconnect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    delete?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    connect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    update?: AchatJeuUpdateWithWhereUniqueWithoutJeuInput | AchatJeuUpdateWithWhereUniqueWithoutJeuInput[]
    updateMany?: AchatJeuUpdateManyWithWhereWithoutJeuInput | AchatJeuUpdateManyWithWhereWithoutJeuInput[]
    deleteMany?: AchatJeuScalarWhereInput | AchatJeuScalarWhereInput[]
  }

  export type DepotJeuUpdateManyWithoutJeuNestedInput = {
    create?: XOR<DepotJeuCreateWithoutJeuInput, DepotJeuUncheckedCreateWithoutJeuInput> | DepotJeuCreateWithoutJeuInput[] | DepotJeuUncheckedCreateWithoutJeuInput[]
    connectOrCreate?: DepotJeuCreateOrConnectWithoutJeuInput | DepotJeuCreateOrConnectWithoutJeuInput[]
    upsert?: DepotJeuUpsertWithWhereUniqueWithoutJeuInput | DepotJeuUpsertWithWhereUniqueWithoutJeuInput[]
    createMany?: DepotJeuCreateManyJeuInputEnvelope
    set?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    disconnect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    delete?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    connect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    update?: DepotJeuUpdateWithWhereUniqueWithoutJeuInput | DepotJeuUpdateWithWhereUniqueWithoutJeuInput[]
    updateMany?: DepotJeuUpdateManyWithWhereWithoutJeuInput | DepotJeuUpdateManyWithWhereWithoutJeuInput[]
    deleteMany?: DepotJeuScalarWhereInput | DepotJeuScalarWhereInput[]
  }

  export type AchatJeuUncheckedUpdateManyWithoutJeuNestedInput = {
    create?: XOR<AchatJeuCreateWithoutJeuInput, AchatJeuUncheckedCreateWithoutJeuInput> | AchatJeuCreateWithoutJeuInput[] | AchatJeuUncheckedCreateWithoutJeuInput[]
    connectOrCreate?: AchatJeuCreateOrConnectWithoutJeuInput | AchatJeuCreateOrConnectWithoutJeuInput[]
    upsert?: AchatJeuUpsertWithWhereUniqueWithoutJeuInput | AchatJeuUpsertWithWhereUniqueWithoutJeuInput[]
    createMany?: AchatJeuCreateManyJeuInputEnvelope
    set?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    disconnect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    delete?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    connect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    update?: AchatJeuUpdateWithWhereUniqueWithoutJeuInput | AchatJeuUpdateWithWhereUniqueWithoutJeuInput[]
    updateMany?: AchatJeuUpdateManyWithWhereWithoutJeuInput | AchatJeuUpdateManyWithWhereWithoutJeuInput[]
    deleteMany?: AchatJeuScalarWhereInput | AchatJeuScalarWhereInput[]
  }

  export type DepotJeuUncheckedUpdateManyWithoutJeuNestedInput = {
    create?: XOR<DepotJeuCreateWithoutJeuInput, DepotJeuUncheckedCreateWithoutJeuInput> | DepotJeuCreateWithoutJeuInput[] | DepotJeuUncheckedCreateWithoutJeuInput[]
    connectOrCreate?: DepotJeuCreateOrConnectWithoutJeuInput | DepotJeuCreateOrConnectWithoutJeuInput[]
    upsert?: DepotJeuUpsertWithWhereUniqueWithoutJeuInput | DepotJeuUpsertWithWhereUniqueWithoutJeuInput[]
    createMany?: DepotJeuCreateManyJeuInputEnvelope
    set?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    disconnect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    delete?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    connect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    update?: DepotJeuUpdateWithWhereUniqueWithoutJeuInput | DepotJeuUpdateWithWhereUniqueWithoutJeuInput[]
    updateMany?: DepotJeuUpdateManyWithWhereWithoutJeuInput | DepotJeuUpdateManyWithWhereWithoutJeuInput[]
    deleteMany?: DepotJeuScalarWhereInput | DepotJeuScalarWhereInput[]
  }

  export type VendeurCreateNestedOneWithoutDepotsInput = {
    create?: XOR<VendeurCreateWithoutDepotsInput, VendeurUncheckedCreateWithoutDepotsInput>
    connectOrCreate?: VendeurCreateOrConnectWithoutDepotsInput
    connect?: VendeurWhereUniqueInput
  }

  export type SessionCreateNestedOneWithoutDepotsInput = {
    create?: XOR<SessionCreateWithoutDepotsInput, SessionUncheckedCreateWithoutDepotsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutDepotsInput
    connect?: SessionWhereUniqueInput
  }

  export type JeuCreateNestedManyWithoutDepotInput = {
    create?: XOR<JeuCreateWithoutDepotInput, JeuUncheckedCreateWithoutDepotInput> | JeuCreateWithoutDepotInput[] | JeuUncheckedCreateWithoutDepotInput[]
    connectOrCreate?: JeuCreateOrConnectWithoutDepotInput | JeuCreateOrConnectWithoutDepotInput[]
    createMany?: JeuCreateManyDepotInputEnvelope
    connect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
  }

  export type DepotJeuCreateNestedManyWithoutDepotInput = {
    create?: XOR<DepotJeuCreateWithoutDepotInput, DepotJeuUncheckedCreateWithoutDepotInput> | DepotJeuCreateWithoutDepotInput[] | DepotJeuUncheckedCreateWithoutDepotInput[]
    connectOrCreate?: DepotJeuCreateOrConnectWithoutDepotInput | DepotJeuCreateOrConnectWithoutDepotInput[]
    createMany?: DepotJeuCreateManyDepotInputEnvelope
    connect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
  }

  export type JeuUncheckedCreateNestedManyWithoutDepotInput = {
    create?: XOR<JeuCreateWithoutDepotInput, JeuUncheckedCreateWithoutDepotInput> | JeuCreateWithoutDepotInput[] | JeuUncheckedCreateWithoutDepotInput[]
    connectOrCreate?: JeuCreateOrConnectWithoutDepotInput | JeuCreateOrConnectWithoutDepotInput[]
    createMany?: JeuCreateManyDepotInputEnvelope
    connect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
  }

  export type DepotJeuUncheckedCreateNestedManyWithoutDepotInput = {
    create?: XOR<DepotJeuCreateWithoutDepotInput, DepotJeuUncheckedCreateWithoutDepotInput> | DepotJeuCreateWithoutDepotInput[] | DepotJeuUncheckedCreateWithoutDepotInput[]
    connectOrCreate?: DepotJeuCreateOrConnectWithoutDepotInput | DepotJeuCreateOrConnectWithoutDepotInput[]
    createMany?: DepotJeuCreateManyDepotInputEnvelope
    connect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type VendeurUpdateOneRequiredWithoutDepotsNestedInput = {
    create?: XOR<VendeurCreateWithoutDepotsInput, VendeurUncheckedCreateWithoutDepotsInput>
    connectOrCreate?: VendeurCreateOrConnectWithoutDepotsInput
    upsert?: VendeurUpsertWithoutDepotsInput
    connect?: VendeurWhereUniqueInput
    update?: XOR<XOR<VendeurUpdateToOneWithWhereWithoutDepotsInput, VendeurUpdateWithoutDepotsInput>, VendeurUncheckedUpdateWithoutDepotsInput>
  }

  export type SessionUpdateOneRequiredWithoutDepotsNestedInput = {
    create?: XOR<SessionCreateWithoutDepotsInput, SessionUncheckedCreateWithoutDepotsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutDepotsInput
    upsert?: SessionUpsertWithoutDepotsInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutDepotsInput, SessionUpdateWithoutDepotsInput>, SessionUncheckedUpdateWithoutDepotsInput>
  }

  export type JeuUpdateManyWithoutDepotNestedInput = {
    create?: XOR<JeuCreateWithoutDepotInput, JeuUncheckedCreateWithoutDepotInput> | JeuCreateWithoutDepotInput[] | JeuUncheckedCreateWithoutDepotInput[]
    connectOrCreate?: JeuCreateOrConnectWithoutDepotInput | JeuCreateOrConnectWithoutDepotInput[]
    upsert?: JeuUpsertWithWhereUniqueWithoutDepotInput | JeuUpsertWithWhereUniqueWithoutDepotInput[]
    createMany?: JeuCreateManyDepotInputEnvelope
    set?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    disconnect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    delete?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    connect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    update?: JeuUpdateWithWhereUniqueWithoutDepotInput | JeuUpdateWithWhereUniqueWithoutDepotInput[]
    updateMany?: JeuUpdateManyWithWhereWithoutDepotInput | JeuUpdateManyWithWhereWithoutDepotInput[]
    deleteMany?: JeuScalarWhereInput | JeuScalarWhereInput[]
  }

  export type DepotJeuUpdateManyWithoutDepotNestedInput = {
    create?: XOR<DepotJeuCreateWithoutDepotInput, DepotJeuUncheckedCreateWithoutDepotInput> | DepotJeuCreateWithoutDepotInput[] | DepotJeuUncheckedCreateWithoutDepotInput[]
    connectOrCreate?: DepotJeuCreateOrConnectWithoutDepotInput | DepotJeuCreateOrConnectWithoutDepotInput[]
    upsert?: DepotJeuUpsertWithWhereUniqueWithoutDepotInput | DepotJeuUpsertWithWhereUniqueWithoutDepotInput[]
    createMany?: DepotJeuCreateManyDepotInputEnvelope
    set?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    disconnect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    delete?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    connect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    update?: DepotJeuUpdateWithWhereUniqueWithoutDepotInput | DepotJeuUpdateWithWhereUniqueWithoutDepotInput[]
    updateMany?: DepotJeuUpdateManyWithWhereWithoutDepotInput | DepotJeuUpdateManyWithWhereWithoutDepotInput[]
    deleteMany?: DepotJeuScalarWhereInput | DepotJeuScalarWhereInput[]
  }

  export type JeuUncheckedUpdateManyWithoutDepotNestedInput = {
    create?: XOR<JeuCreateWithoutDepotInput, JeuUncheckedCreateWithoutDepotInput> | JeuCreateWithoutDepotInput[] | JeuUncheckedCreateWithoutDepotInput[]
    connectOrCreate?: JeuCreateOrConnectWithoutDepotInput | JeuCreateOrConnectWithoutDepotInput[]
    upsert?: JeuUpsertWithWhereUniqueWithoutDepotInput | JeuUpsertWithWhereUniqueWithoutDepotInput[]
    createMany?: JeuCreateManyDepotInputEnvelope
    set?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    disconnect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    delete?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    connect?: JeuWhereUniqueInput | JeuWhereUniqueInput[]
    update?: JeuUpdateWithWhereUniqueWithoutDepotInput | JeuUpdateWithWhereUniqueWithoutDepotInput[]
    updateMany?: JeuUpdateManyWithWhereWithoutDepotInput | JeuUpdateManyWithWhereWithoutDepotInput[]
    deleteMany?: JeuScalarWhereInput | JeuScalarWhereInput[]
  }

  export type DepotJeuUncheckedUpdateManyWithoutDepotNestedInput = {
    create?: XOR<DepotJeuCreateWithoutDepotInput, DepotJeuUncheckedCreateWithoutDepotInput> | DepotJeuCreateWithoutDepotInput[] | DepotJeuUncheckedCreateWithoutDepotInput[]
    connectOrCreate?: DepotJeuCreateOrConnectWithoutDepotInput | DepotJeuCreateOrConnectWithoutDepotInput[]
    upsert?: DepotJeuUpsertWithWhereUniqueWithoutDepotInput | DepotJeuUpsertWithWhereUniqueWithoutDepotInput[]
    createMany?: DepotJeuCreateManyDepotInputEnvelope
    set?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    disconnect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    delete?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    connect?: DepotJeuWhereUniqueInput | DepotJeuWhereUniqueInput[]
    update?: DepotJeuUpdateWithWhereUniqueWithoutDepotInput | DepotJeuUpdateWithWhereUniqueWithoutDepotInput[]
    updateMany?: DepotJeuUpdateManyWithWhereWithoutDepotInput | DepotJeuUpdateManyWithWhereWithoutDepotInput[]
    deleteMany?: DepotJeuScalarWhereInput | DepotJeuScalarWhereInput[]
  }

  export type DepotCreateNestedManyWithoutVendeurInput = {
    create?: XOR<DepotCreateWithoutVendeurInput, DepotUncheckedCreateWithoutVendeurInput> | DepotCreateWithoutVendeurInput[] | DepotUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: DepotCreateOrConnectWithoutVendeurInput | DepotCreateOrConnectWithoutVendeurInput[]
    createMany?: DepotCreateManyVendeurInputEnvelope
    connect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
  }

  export type BilanVendeurSessionCreateNestedManyWithoutVendeurInput = {
    create?: XOR<BilanVendeurSessionCreateWithoutVendeurInput, BilanVendeurSessionUncheckedCreateWithoutVendeurInput> | BilanVendeurSessionCreateWithoutVendeurInput[] | BilanVendeurSessionUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: BilanVendeurSessionCreateOrConnectWithoutVendeurInput | BilanVendeurSessionCreateOrConnectWithoutVendeurInput[]
    createMany?: BilanVendeurSessionCreateManyVendeurInputEnvelope
    connect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
  }

  export type DepotUncheckedCreateNestedManyWithoutVendeurInput = {
    create?: XOR<DepotCreateWithoutVendeurInput, DepotUncheckedCreateWithoutVendeurInput> | DepotCreateWithoutVendeurInput[] | DepotUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: DepotCreateOrConnectWithoutVendeurInput | DepotCreateOrConnectWithoutVendeurInput[]
    createMany?: DepotCreateManyVendeurInputEnvelope
    connect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
  }

  export type BilanVendeurSessionUncheckedCreateNestedManyWithoutVendeurInput = {
    create?: XOR<BilanVendeurSessionCreateWithoutVendeurInput, BilanVendeurSessionUncheckedCreateWithoutVendeurInput> | BilanVendeurSessionCreateWithoutVendeurInput[] | BilanVendeurSessionUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: BilanVendeurSessionCreateOrConnectWithoutVendeurInput | BilanVendeurSessionCreateOrConnectWithoutVendeurInput[]
    createMany?: BilanVendeurSessionCreateManyVendeurInputEnvelope
    connect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
  }

  export type DepotUpdateManyWithoutVendeurNestedInput = {
    create?: XOR<DepotCreateWithoutVendeurInput, DepotUncheckedCreateWithoutVendeurInput> | DepotCreateWithoutVendeurInput[] | DepotUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: DepotCreateOrConnectWithoutVendeurInput | DepotCreateOrConnectWithoutVendeurInput[]
    upsert?: DepotUpsertWithWhereUniqueWithoutVendeurInput | DepotUpsertWithWhereUniqueWithoutVendeurInput[]
    createMany?: DepotCreateManyVendeurInputEnvelope
    set?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    disconnect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    delete?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    connect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    update?: DepotUpdateWithWhereUniqueWithoutVendeurInput | DepotUpdateWithWhereUniqueWithoutVendeurInput[]
    updateMany?: DepotUpdateManyWithWhereWithoutVendeurInput | DepotUpdateManyWithWhereWithoutVendeurInput[]
    deleteMany?: DepotScalarWhereInput | DepotScalarWhereInput[]
  }

  export type BilanVendeurSessionUpdateManyWithoutVendeurNestedInput = {
    create?: XOR<BilanVendeurSessionCreateWithoutVendeurInput, BilanVendeurSessionUncheckedCreateWithoutVendeurInput> | BilanVendeurSessionCreateWithoutVendeurInput[] | BilanVendeurSessionUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: BilanVendeurSessionCreateOrConnectWithoutVendeurInput | BilanVendeurSessionCreateOrConnectWithoutVendeurInput[]
    upsert?: BilanVendeurSessionUpsertWithWhereUniqueWithoutVendeurInput | BilanVendeurSessionUpsertWithWhereUniqueWithoutVendeurInput[]
    createMany?: BilanVendeurSessionCreateManyVendeurInputEnvelope
    set?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    disconnect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    delete?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    connect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    update?: BilanVendeurSessionUpdateWithWhereUniqueWithoutVendeurInput | BilanVendeurSessionUpdateWithWhereUniqueWithoutVendeurInput[]
    updateMany?: BilanVendeurSessionUpdateManyWithWhereWithoutVendeurInput | BilanVendeurSessionUpdateManyWithWhereWithoutVendeurInput[]
    deleteMany?: BilanVendeurSessionScalarWhereInput | BilanVendeurSessionScalarWhereInput[]
  }

  export type DepotUncheckedUpdateManyWithoutVendeurNestedInput = {
    create?: XOR<DepotCreateWithoutVendeurInput, DepotUncheckedCreateWithoutVendeurInput> | DepotCreateWithoutVendeurInput[] | DepotUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: DepotCreateOrConnectWithoutVendeurInput | DepotCreateOrConnectWithoutVendeurInput[]
    upsert?: DepotUpsertWithWhereUniqueWithoutVendeurInput | DepotUpsertWithWhereUniqueWithoutVendeurInput[]
    createMany?: DepotCreateManyVendeurInputEnvelope
    set?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    disconnect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    delete?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    connect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    update?: DepotUpdateWithWhereUniqueWithoutVendeurInput | DepotUpdateWithWhereUniqueWithoutVendeurInput[]
    updateMany?: DepotUpdateManyWithWhereWithoutVendeurInput | DepotUpdateManyWithWhereWithoutVendeurInput[]
    deleteMany?: DepotScalarWhereInput | DepotScalarWhereInput[]
  }

  export type BilanVendeurSessionUncheckedUpdateManyWithoutVendeurNestedInput = {
    create?: XOR<BilanVendeurSessionCreateWithoutVendeurInput, BilanVendeurSessionUncheckedCreateWithoutVendeurInput> | BilanVendeurSessionCreateWithoutVendeurInput[] | BilanVendeurSessionUncheckedCreateWithoutVendeurInput[]
    connectOrCreate?: BilanVendeurSessionCreateOrConnectWithoutVendeurInput | BilanVendeurSessionCreateOrConnectWithoutVendeurInput[]
    upsert?: BilanVendeurSessionUpsertWithWhereUniqueWithoutVendeurInput | BilanVendeurSessionUpsertWithWhereUniqueWithoutVendeurInput[]
    createMany?: BilanVendeurSessionCreateManyVendeurInputEnvelope
    set?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    disconnect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    delete?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    connect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    update?: BilanVendeurSessionUpdateWithWhereUniqueWithoutVendeurInput | BilanVendeurSessionUpdateWithWhereUniqueWithoutVendeurInput[]
    updateMany?: BilanVendeurSessionUpdateManyWithWhereWithoutVendeurInput | BilanVendeurSessionUpdateManyWithWhereWithoutVendeurInput[]
    deleteMany?: BilanVendeurSessionScalarWhereInput | BilanVendeurSessionScalarWhereInput[]
  }

  export type DepotCreateNestedOneWithoutDepot_jeuxInput = {
    create?: XOR<DepotCreateWithoutDepot_jeuxInput, DepotUncheckedCreateWithoutDepot_jeuxInput>
    connectOrCreate?: DepotCreateOrConnectWithoutDepot_jeuxInput
    connect?: DepotWhereUniqueInput
  }

  export type JeuCreateNestedOneWithoutDepot_jeuxInput = {
    create?: XOR<JeuCreateWithoutDepot_jeuxInput, JeuUncheckedCreateWithoutDepot_jeuxInput>
    connectOrCreate?: JeuCreateOrConnectWithoutDepot_jeuxInput
    connect?: JeuWhereUniqueInput
  }

  export type DepotUpdateOneRequiredWithoutDepot_jeuxNestedInput = {
    create?: XOR<DepotCreateWithoutDepot_jeuxInput, DepotUncheckedCreateWithoutDepot_jeuxInput>
    connectOrCreate?: DepotCreateOrConnectWithoutDepot_jeuxInput
    upsert?: DepotUpsertWithoutDepot_jeuxInput
    connect?: DepotWhereUniqueInput
    update?: XOR<XOR<DepotUpdateToOneWithWhereWithoutDepot_jeuxInput, DepotUpdateWithoutDepot_jeuxInput>, DepotUncheckedUpdateWithoutDepot_jeuxInput>
  }

  export type JeuUpdateOneRequiredWithoutDepot_jeuxNestedInput = {
    create?: XOR<JeuCreateWithoutDepot_jeuxInput, JeuUncheckedCreateWithoutDepot_jeuxInput>
    connectOrCreate?: JeuCreateOrConnectWithoutDepot_jeuxInput
    upsert?: JeuUpsertWithoutDepot_jeuxInput
    connect?: JeuWhereUniqueInput
    update?: XOR<XOR<JeuUpdateToOneWithWhereWithoutDepot_jeuxInput, JeuUpdateWithoutDepot_jeuxInput>, JeuUncheckedUpdateWithoutDepot_jeuxInput>
  }

  export type SessionCreateNestedOneWithoutAchatsInput = {
    create?: XOR<SessionCreateWithoutAchatsInput, SessionUncheckedCreateWithoutAchatsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutAchatsInput
    connect?: SessionWhereUniqueInput
  }

  export type AchatJeuCreateNestedManyWithoutAchatInput = {
    create?: XOR<AchatJeuCreateWithoutAchatInput, AchatJeuUncheckedCreateWithoutAchatInput> | AchatJeuCreateWithoutAchatInput[] | AchatJeuUncheckedCreateWithoutAchatInput[]
    connectOrCreate?: AchatJeuCreateOrConnectWithoutAchatInput | AchatJeuCreateOrConnectWithoutAchatInput[]
    createMany?: AchatJeuCreateManyAchatInputEnvelope
    connect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
  }

  export type AchatJeuUncheckedCreateNestedManyWithoutAchatInput = {
    create?: XOR<AchatJeuCreateWithoutAchatInput, AchatJeuUncheckedCreateWithoutAchatInput> | AchatJeuCreateWithoutAchatInput[] | AchatJeuUncheckedCreateWithoutAchatInput[]
    connectOrCreate?: AchatJeuCreateOrConnectWithoutAchatInput | AchatJeuCreateOrConnectWithoutAchatInput[]
    createMany?: AchatJeuCreateManyAchatInputEnvelope
    connect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
  }

  export type SessionUpdateOneRequiredWithoutAchatsNestedInput = {
    create?: XOR<SessionCreateWithoutAchatsInput, SessionUncheckedCreateWithoutAchatsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutAchatsInput
    upsert?: SessionUpsertWithoutAchatsInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutAchatsInput, SessionUpdateWithoutAchatsInput>, SessionUncheckedUpdateWithoutAchatsInput>
  }

  export type AchatJeuUpdateManyWithoutAchatNestedInput = {
    create?: XOR<AchatJeuCreateWithoutAchatInput, AchatJeuUncheckedCreateWithoutAchatInput> | AchatJeuCreateWithoutAchatInput[] | AchatJeuUncheckedCreateWithoutAchatInput[]
    connectOrCreate?: AchatJeuCreateOrConnectWithoutAchatInput | AchatJeuCreateOrConnectWithoutAchatInput[]
    upsert?: AchatJeuUpsertWithWhereUniqueWithoutAchatInput | AchatJeuUpsertWithWhereUniqueWithoutAchatInput[]
    createMany?: AchatJeuCreateManyAchatInputEnvelope
    set?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    disconnect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    delete?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    connect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    update?: AchatJeuUpdateWithWhereUniqueWithoutAchatInput | AchatJeuUpdateWithWhereUniqueWithoutAchatInput[]
    updateMany?: AchatJeuUpdateManyWithWhereWithoutAchatInput | AchatJeuUpdateManyWithWhereWithoutAchatInput[]
    deleteMany?: AchatJeuScalarWhereInput | AchatJeuScalarWhereInput[]
  }

  export type AchatJeuUncheckedUpdateManyWithoutAchatNestedInput = {
    create?: XOR<AchatJeuCreateWithoutAchatInput, AchatJeuUncheckedCreateWithoutAchatInput> | AchatJeuCreateWithoutAchatInput[] | AchatJeuUncheckedCreateWithoutAchatInput[]
    connectOrCreate?: AchatJeuCreateOrConnectWithoutAchatInput | AchatJeuCreateOrConnectWithoutAchatInput[]
    upsert?: AchatJeuUpsertWithWhereUniqueWithoutAchatInput | AchatJeuUpsertWithWhereUniqueWithoutAchatInput[]
    createMany?: AchatJeuCreateManyAchatInputEnvelope
    set?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    disconnect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    delete?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    connect?: AchatJeuWhereUniqueInput | AchatJeuWhereUniqueInput[]
    update?: AchatJeuUpdateWithWhereUniqueWithoutAchatInput | AchatJeuUpdateWithWhereUniqueWithoutAchatInput[]
    updateMany?: AchatJeuUpdateManyWithWhereWithoutAchatInput | AchatJeuUpdateManyWithWhereWithoutAchatInput[]
    deleteMany?: AchatJeuScalarWhereInput | AchatJeuScalarWhereInput[]
  }

  export type AchatCreateNestedOneWithoutAchat_jeuxInput = {
    create?: XOR<AchatCreateWithoutAchat_jeuxInput, AchatUncheckedCreateWithoutAchat_jeuxInput>
    connectOrCreate?: AchatCreateOrConnectWithoutAchat_jeuxInput
    connect?: AchatWhereUniqueInput
  }

  export type JeuCreateNestedOneWithoutAchat_jeuxInput = {
    create?: XOR<JeuCreateWithoutAchat_jeuxInput, JeuUncheckedCreateWithoutAchat_jeuxInput>
    connectOrCreate?: JeuCreateOrConnectWithoutAchat_jeuxInput
    connect?: JeuWhereUniqueInput
  }

  export type AchatUpdateOneRequiredWithoutAchat_jeuxNestedInput = {
    create?: XOR<AchatCreateWithoutAchat_jeuxInput, AchatUncheckedCreateWithoutAchat_jeuxInput>
    connectOrCreate?: AchatCreateOrConnectWithoutAchat_jeuxInput
    upsert?: AchatUpsertWithoutAchat_jeuxInput
    connect?: AchatWhereUniqueInput
    update?: XOR<XOR<AchatUpdateToOneWithWhereWithoutAchat_jeuxInput, AchatUpdateWithoutAchat_jeuxInput>, AchatUncheckedUpdateWithoutAchat_jeuxInput>
  }

  export type JeuUpdateOneRequiredWithoutAchat_jeuxNestedInput = {
    create?: XOR<JeuCreateWithoutAchat_jeuxInput, JeuUncheckedCreateWithoutAchat_jeuxInput>
    connectOrCreate?: JeuCreateOrConnectWithoutAchat_jeuxInput
    upsert?: JeuUpsertWithoutAchat_jeuxInput
    connect?: JeuWhereUniqueInput
    update?: XOR<XOR<JeuUpdateToOneWithWhereWithoutAchat_jeuxInput, JeuUpdateWithoutAchat_jeuxInput>, JeuUncheckedUpdateWithoutAchat_jeuxInput>
  }

  export type AchatCreateNestedManyWithoutSessionInput = {
    create?: XOR<AchatCreateWithoutSessionInput, AchatUncheckedCreateWithoutSessionInput> | AchatCreateWithoutSessionInput[] | AchatUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AchatCreateOrConnectWithoutSessionInput | AchatCreateOrConnectWithoutSessionInput[]
    createMany?: AchatCreateManySessionInputEnvelope
    connect?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
  }

  export type DepotCreateNestedManyWithoutSessionInput = {
    create?: XOR<DepotCreateWithoutSessionInput, DepotUncheckedCreateWithoutSessionInput> | DepotCreateWithoutSessionInput[] | DepotUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: DepotCreateOrConnectWithoutSessionInput | DepotCreateOrConnectWithoutSessionInput[]
    createMany?: DepotCreateManySessionInputEnvelope
    connect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
  }

  export type BilanVendeurSessionCreateNestedManyWithoutSessionInput = {
    create?: XOR<BilanVendeurSessionCreateWithoutSessionInput, BilanVendeurSessionUncheckedCreateWithoutSessionInput> | BilanVendeurSessionCreateWithoutSessionInput[] | BilanVendeurSessionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: BilanVendeurSessionCreateOrConnectWithoutSessionInput | BilanVendeurSessionCreateOrConnectWithoutSessionInput[]
    createMany?: BilanVendeurSessionCreateManySessionInputEnvelope
    connect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
  }

  export type AchatUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<AchatCreateWithoutSessionInput, AchatUncheckedCreateWithoutSessionInput> | AchatCreateWithoutSessionInput[] | AchatUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AchatCreateOrConnectWithoutSessionInput | AchatCreateOrConnectWithoutSessionInput[]
    createMany?: AchatCreateManySessionInputEnvelope
    connect?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
  }

  export type DepotUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<DepotCreateWithoutSessionInput, DepotUncheckedCreateWithoutSessionInput> | DepotCreateWithoutSessionInput[] | DepotUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: DepotCreateOrConnectWithoutSessionInput | DepotCreateOrConnectWithoutSessionInput[]
    createMany?: DepotCreateManySessionInputEnvelope
    connect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
  }

  export type BilanVendeurSessionUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<BilanVendeurSessionCreateWithoutSessionInput, BilanVendeurSessionUncheckedCreateWithoutSessionInput> | BilanVendeurSessionCreateWithoutSessionInput[] | BilanVendeurSessionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: BilanVendeurSessionCreateOrConnectWithoutSessionInput | BilanVendeurSessionCreateOrConnectWithoutSessionInput[]
    createMany?: BilanVendeurSessionCreateManySessionInputEnvelope
    connect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AchatUpdateManyWithoutSessionNestedInput = {
    create?: XOR<AchatCreateWithoutSessionInput, AchatUncheckedCreateWithoutSessionInput> | AchatCreateWithoutSessionInput[] | AchatUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AchatCreateOrConnectWithoutSessionInput | AchatCreateOrConnectWithoutSessionInput[]
    upsert?: AchatUpsertWithWhereUniqueWithoutSessionInput | AchatUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: AchatCreateManySessionInputEnvelope
    set?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
    disconnect?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
    delete?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
    connect?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
    update?: AchatUpdateWithWhereUniqueWithoutSessionInput | AchatUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: AchatUpdateManyWithWhereWithoutSessionInput | AchatUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: AchatScalarWhereInput | AchatScalarWhereInput[]
  }

  export type DepotUpdateManyWithoutSessionNestedInput = {
    create?: XOR<DepotCreateWithoutSessionInput, DepotUncheckedCreateWithoutSessionInput> | DepotCreateWithoutSessionInput[] | DepotUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: DepotCreateOrConnectWithoutSessionInput | DepotCreateOrConnectWithoutSessionInput[]
    upsert?: DepotUpsertWithWhereUniqueWithoutSessionInput | DepotUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: DepotCreateManySessionInputEnvelope
    set?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    disconnect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    delete?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    connect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    update?: DepotUpdateWithWhereUniqueWithoutSessionInput | DepotUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: DepotUpdateManyWithWhereWithoutSessionInput | DepotUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: DepotScalarWhereInput | DepotScalarWhereInput[]
  }

  export type BilanVendeurSessionUpdateManyWithoutSessionNestedInput = {
    create?: XOR<BilanVendeurSessionCreateWithoutSessionInput, BilanVendeurSessionUncheckedCreateWithoutSessionInput> | BilanVendeurSessionCreateWithoutSessionInput[] | BilanVendeurSessionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: BilanVendeurSessionCreateOrConnectWithoutSessionInput | BilanVendeurSessionCreateOrConnectWithoutSessionInput[]
    upsert?: BilanVendeurSessionUpsertWithWhereUniqueWithoutSessionInput | BilanVendeurSessionUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: BilanVendeurSessionCreateManySessionInputEnvelope
    set?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    disconnect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    delete?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    connect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    update?: BilanVendeurSessionUpdateWithWhereUniqueWithoutSessionInput | BilanVendeurSessionUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: BilanVendeurSessionUpdateManyWithWhereWithoutSessionInput | BilanVendeurSessionUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: BilanVendeurSessionScalarWhereInput | BilanVendeurSessionScalarWhereInput[]
  }

  export type AchatUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<AchatCreateWithoutSessionInput, AchatUncheckedCreateWithoutSessionInput> | AchatCreateWithoutSessionInput[] | AchatUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AchatCreateOrConnectWithoutSessionInput | AchatCreateOrConnectWithoutSessionInput[]
    upsert?: AchatUpsertWithWhereUniqueWithoutSessionInput | AchatUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: AchatCreateManySessionInputEnvelope
    set?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
    disconnect?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
    delete?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
    connect?: AchatWhereUniqueInput | AchatWhereUniqueInput[]
    update?: AchatUpdateWithWhereUniqueWithoutSessionInput | AchatUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: AchatUpdateManyWithWhereWithoutSessionInput | AchatUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: AchatScalarWhereInput | AchatScalarWhereInput[]
  }

  export type DepotUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<DepotCreateWithoutSessionInput, DepotUncheckedCreateWithoutSessionInput> | DepotCreateWithoutSessionInput[] | DepotUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: DepotCreateOrConnectWithoutSessionInput | DepotCreateOrConnectWithoutSessionInput[]
    upsert?: DepotUpsertWithWhereUniqueWithoutSessionInput | DepotUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: DepotCreateManySessionInputEnvelope
    set?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    disconnect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    delete?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    connect?: DepotWhereUniqueInput | DepotWhereUniqueInput[]
    update?: DepotUpdateWithWhereUniqueWithoutSessionInput | DepotUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: DepotUpdateManyWithWhereWithoutSessionInput | DepotUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: DepotScalarWhereInput | DepotScalarWhereInput[]
  }

  export type BilanVendeurSessionUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<BilanVendeurSessionCreateWithoutSessionInput, BilanVendeurSessionUncheckedCreateWithoutSessionInput> | BilanVendeurSessionCreateWithoutSessionInput[] | BilanVendeurSessionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: BilanVendeurSessionCreateOrConnectWithoutSessionInput | BilanVendeurSessionCreateOrConnectWithoutSessionInput[]
    upsert?: BilanVendeurSessionUpsertWithWhereUniqueWithoutSessionInput | BilanVendeurSessionUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: BilanVendeurSessionCreateManySessionInputEnvelope
    set?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    disconnect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    delete?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    connect?: BilanVendeurSessionWhereUniqueInput | BilanVendeurSessionWhereUniqueInput[]
    update?: BilanVendeurSessionUpdateWithWhereUniqueWithoutSessionInput | BilanVendeurSessionUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: BilanVendeurSessionUpdateManyWithWhereWithoutSessionInput | BilanVendeurSessionUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: BilanVendeurSessionScalarWhereInput | BilanVendeurSessionScalarWhereInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type VendeurCreateNestedOneWithoutBilanVendeurSessionInput = {
    create?: XOR<VendeurCreateWithoutBilanVendeurSessionInput, VendeurUncheckedCreateWithoutBilanVendeurSessionInput>
    connectOrCreate?: VendeurCreateOrConnectWithoutBilanVendeurSessionInput
    connect?: VendeurWhereUniqueInput
  }

  export type SessionCreateNestedOneWithoutBilanVendeurSessionsInput = {
    create?: XOR<SessionCreateWithoutBilanVendeurSessionsInput, SessionUncheckedCreateWithoutBilanVendeurSessionsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutBilanVendeurSessionsInput
    connect?: SessionWhereUniqueInput
  }

  export type VendeurUpdateOneRequiredWithoutBilanVendeurSessionNestedInput = {
    create?: XOR<VendeurCreateWithoutBilanVendeurSessionInput, VendeurUncheckedCreateWithoutBilanVendeurSessionInput>
    connectOrCreate?: VendeurCreateOrConnectWithoutBilanVendeurSessionInput
    upsert?: VendeurUpsertWithoutBilanVendeurSessionInput
    connect?: VendeurWhereUniqueInput
    update?: XOR<XOR<VendeurUpdateToOneWithWhereWithoutBilanVendeurSessionInput, VendeurUpdateWithoutBilanVendeurSessionInput>, VendeurUncheckedUpdateWithoutBilanVendeurSessionInput>
  }

  export type SessionUpdateOneRequiredWithoutBilanVendeurSessionsNestedInput = {
    create?: XOR<SessionCreateWithoutBilanVendeurSessionsInput, SessionUncheckedCreateWithoutBilanVendeurSessionsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutBilanVendeurSessionsInput
    upsert?: SessionUpsertWithoutBilanVendeurSessionsInput
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutBilanVendeurSessionsInput, SessionUpdateWithoutBilanVendeurSessionsInput>, SessionUncheckedUpdateWithoutBilanVendeurSessionsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type JeuCreateWithoutJeuxMarqueInput = {
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    depot: DepotCreateNestedOneWithoutJeuxInput
    achat_jeux?: AchatJeuCreateNestedManyWithoutJeuInput
    depot_jeux?: DepotJeuCreateNestedManyWithoutJeuInput
  }

  export type JeuUncheckedCreateWithoutJeuxMarqueInput = {
    JeuID?: number
    depot_ID: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    achat_jeux?: AchatJeuUncheckedCreateNestedManyWithoutJeuInput
    depot_jeux?: DepotJeuUncheckedCreateNestedManyWithoutJeuInput
  }

  export type JeuCreateOrConnectWithoutJeuxMarqueInput = {
    where: JeuWhereUniqueInput
    create: XOR<JeuCreateWithoutJeuxMarqueInput, JeuUncheckedCreateWithoutJeuxMarqueInput>
  }

  export type JeuCreateManyJeuxMarqueInputEnvelope = {
    data: JeuCreateManyJeuxMarqueInput | JeuCreateManyJeuxMarqueInput[]
    skipDuplicates?: boolean
  }

  export type JeuUpsertWithWhereUniqueWithoutJeuxMarqueInput = {
    where: JeuWhereUniqueInput
    update: XOR<JeuUpdateWithoutJeuxMarqueInput, JeuUncheckedUpdateWithoutJeuxMarqueInput>
    create: XOR<JeuCreateWithoutJeuxMarqueInput, JeuUncheckedCreateWithoutJeuxMarqueInput>
  }

  export type JeuUpdateWithWhereUniqueWithoutJeuxMarqueInput = {
    where: JeuWhereUniqueInput
    data: XOR<JeuUpdateWithoutJeuxMarqueInput, JeuUncheckedUpdateWithoutJeuxMarqueInput>
  }

  export type JeuUpdateManyWithWhereWithoutJeuxMarqueInput = {
    where: JeuScalarWhereInput
    data: XOR<JeuUpdateManyMutationInput, JeuUncheckedUpdateManyWithoutJeuxMarqueInput>
  }

  export type JeuScalarWhereInput = {
    AND?: JeuScalarWhereInput | JeuScalarWhereInput[]
    OR?: JeuScalarWhereInput[]
    NOT?: JeuScalarWhereInput | JeuScalarWhereInput[]
    JeuID?: IntFilter<"Jeu"> | number
    JeuRef_id?: IntFilter<"Jeu"> | number
    depot_ID?: IntFilter<"Jeu"> | number
    prix_unitaire?: FloatFilter<"Jeu"> | number
    mise_en_vente?: BoolFilter<"Jeu"> | boolean
    quantite_disponible?: IntFilter<"Jeu"> | number
  }

  export type DepotCreateWithoutJeuxInput = {
    date_depot: Date | string
    comission_depot_total: number
    vendeur: VendeurCreateNestedOneWithoutDepotsInput
    session: SessionCreateNestedOneWithoutDepotsInput
    depot_jeux?: DepotJeuCreateNestedManyWithoutDepotInput
  }

  export type DepotUncheckedCreateWithoutJeuxInput = {
    ID_depot?: number
    VendeurID: number
    date_depot: Date | string
    id_session: number
    comission_depot_total: number
    depot_jeux?: DepotJeuUncheckedCreateNestedManyWithoutDepotInput
  }

  export type DepotCreateOrConnectWithoutJeuxInput = {
    where: DepotWhereUniqueInput
    create: XOR<DepotCreateWithoutJeuxInput, DepotUncheckedCreateWithoutJeuxInput>
  }

  export type JeuxMarqueCreateWithoutJeuxDepotInput = {
    JeuRef_id: number
    Nom: string
    Editeur: string
    Description: string
  }

  export type JeuxMarqueUncheckedCreateWithoutJeuxDepotInput = {
    JeuRef_id: number
    Nom: string
    Editeur: string
    Description: string
  }

  export type JeuxMarqueCreateOrConnectWithoutJeuxDepotInput = {
    where: JeuxMarqueWhereUniqueInput
    create: XOR<JeuxMarqueCreateWithoutJeuxDepotInput, JeuxMarqueUncheckedCreateWithoutJeuxDepotInput>
  }

  export type AchatJeuCreateWithoutJeuInput = {
    comission_vente: number
    quantite_achete: number
    achat: AchatCreateNestedOneWithoutAchat_jeuxInput
  }

  export type AchatJeuUncheckedCreateWithoutJeuInput = {
    AchatID: number
    comission_vente: number
    quantite_achete: number
  }

  export type AchatJeuCreateOrConnectWithoutJeuInput = {
    where: AchatJeuWhereUniqueInput
    create: XOR<AchatJeuCreateWithoutJeuInput, AchatJeuUncheckedCreateWithoutJeuInput>
  }

  export type AchatJeuCreateManyJeuInputEnvelope = {
    data: AchatJeuCreateManyJeuInput | AchatJeuCreateManyJeuInput[]
    skipDuplicates?: boolean
  }

  export type DepotJeuCreateWithoutJeuInput = {
    quantite_depose: number
    comission_depot: number
    depot: DepotCreateNestedOneWithoutDepot_jeuxInput
  }

  export type DepotJeuUncheckedCreateWithoutJeuInput = {
    depot_ID: number
    quantite_depose: number
    comission_depot: number
  }

  export type DepotJeuCreateOrConnectWithoutJeuInput = {
    where: DepotJeuWhereUniqueInput
    create: XOR<DepotJeuCreateWithoutJeuInput, DepotJeuUncheckedCreateWithoutJeuInput>
  }

  export type DepotJeuCreateManyJeuInputEnvelope = {
    data: DepotJeuCreateManyJeuInput | DepotJeuCreateManyJeuInput[]
    skipDuplicates?: boolean
  }

  export type DepotUpsertWithoutJeuxInput = {
    update: XOR<DepotUpdateWithoutJeuxInput, DepotUncheckedUpdateWithoutJeuxInput>
    create: XOR<DepotCreateWithoutJeuxInput, DepotUncheckedCreateWithoutJeuxInput>
    where?: DepotWhereInput
  }

  export type DepotUpdateToOneWithWhereWithoutJeuxInput = {
    where?: DepotWhereInput
    data: XOR<DepotUpdateWithoutJeuxInput, DepotUncheckedUpdateWithoutJeuxInput>
  }

  export type DepotUpdateWithoutJeuxInput = {
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    vendeur?: VendeurUpdateOneRequiredWithoutDepotsNestedInput
    session?: SessionUpdateOneRequiredWithoutDepotsNestedInput
    depot_jeux?: DepotJeuUpdateManyWithoutDepotNestedInput
  }

  export type DepotUncheckedUpdateWithoutJeuxInput = {
    ID_depot?: IntFieldUpdateOperationsInput | number
    VendeurID?: IntFieldUpdateOperationsInput | number
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    id_session?: IntFieldUpdateOperationsInput | number
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    depot_jeux?: DepotJeuUncheckedUpdateManyWithoutDepotNestedInput
  }

  export type JeuxMarqueUpsertWithoutJeuxDepotInput = {
    update: XOR<JeuxMarqueUpdateWithoutJeuxDepotInput, JeuxMarqueUncheckedUpdateWithoutJeuxDepotInput>
    create: XOR<JeuxMarqueCreateWithoutJeuxDepotInput, JeuxMarqueUncheckedCreateWithoutJeuxDepotInput>
    where?: JeuxMarqueWhereInput
  }

  export type JeuxMarqueUpdateToOneWithWhereWithoutJeuxDepotInput = {
    where?: JeuxMarqueWhereInput
    data: XOR<JeuxMarqueUpdateWithoutJeuxDepotInput, JeuxMarqueUncheckedUpdateWithoutJeuxDepotInput>
  }

  export type JeuxMarqueUpdateWithoutJeuxDepotInput = {
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Editeur?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type JeuxMarqueUncheckedUpdateWithoutJeuxDepotInput = {
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Editeur?: StringFieldUpdateOperationsInput | string
    Description?: StringFieldUpdateOperationsInput | string
  }

  export type AchatJeuUpsertWithWhereUniqueWithoutJeuInput = {
    where: AchatJeuWhereUniqueInput
    update: XOR<AchatJeuUpdateWithoutJeuInput, AchatJeuUncheckedUpdateWithoutJeuInput>
    create: XOR<AchatJeuCreateWithoutJeuInput, AchatJeuUncheckedCreateWithoutJeuInput>
  }

  export type AchatJeuUpdateWithWhereUniqueWithoutJeuInput = {
    where: AchatJeuWhereUniqueInput
    data: XOR<AchatJeuUpdateWithoutJeuInput, AchatJeuUncheckedUpdateWithoutJeuInput>
  }

  export type AchatJeuUpdateManyWithWhereWithoutJeuInput = {
    where: AchatJeuScalarWhereInput
    data: XOR<AchatJeuUpdateManyMutationInput, AchatJeuUncheckedUpdateManyWithoutJeuInput>
  }

  export type AchatJeuScalarWhereInput = {
    AND?: AchatJeuScalarWhereInput | AchatJeuScalarWhereInput[]
    OR?: AchatJeuScalarWhereInput[]
    NOT?: AchatJeuScalarWhereInput | AchatJeuScalarWhereInput[]
    AchatID?: IntFilter<"AchatJeu"> | number
    JeuID?: IntFilter<"AchatJeu"> | number
    comission_vente?: FloatFilter<"AchatJeu"> | number
    quantite_achete?: IntFilter<"AchatJeu"> | number
  }

  export type DepotJeuUpsertWithWhereUniqueWithoutJeuInput = {
    where: DepotJeuWhereUniqueInput
    update: XOR<DepotJeuUpdateWithoutJeuInput, DepotJeuUncheckedUpdateWithoutJeuInput>
    create: XOR<DepotJeuCreateWithoutJeuInput, DepotJeuUncheckedCreateWithoutJeuInput>
  }

  export type DepotJeuUpdateWithWhereUniqueWithoutJeuInput = {
    where: DepotJeuWhereUniqueInput
    data: XOR<DepotJeuUpdateWithoutJeuInput, DepotJeuUncheckedUpdateWithoutJeuInput>
  }

  export type DepotJeuUpdateManyWithWhereWithoutJeuInput = {
    where: DepotJeuScalarWhereInput
    data: XOR<DepotJeuUpdateManyMutationInput, DepotJeuUncheckedUpdateManyWithoutJeuInput>
  }

  export type DepotJeuScalarWhereInput = {
    AND?: DepotJeuScalarWhereInput | DepotJeuScalarWhereInput[]
    OR?: DepotJeuScalarWhereInput[]
    NOT?: DepotJeuScalarWhereInput | DepotJeuScalarWhereInput[]
    depot_ID?: IntFilter<"DepotJeu"> | number
    JeuID?: IntFilter<"DepotJeu"> | number
    quantite_depose?: IntFilter<"DepotJeu"> | number
    comission_depot?: FloatFilter<"DepotJeu"> | number
  }

  export type VendeurCreateWithoutDepotsInput = {
    Nom: string
    Email: string
    Telephone: string
    BilanVendeurSession?: BilanVendeurSessionCreateNestedManyWithoutVendeurInput
  }

  export type VendeurUncheckedCreateWithoutDepotsInput = {
    VendeurID?: number
    Nom: string
    Email: string
    Telephone: string
    BilanVendeurSession?: BilanVendeurSessionUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type VendeurCreateOrConnectWithoutDepotsInput = {
    where: VendeurWhereUniqueInput
    create: XOR<VendeurCreateWithoutDepotsInput, VendeurUncheckedCreateWithoutDepotsInput>
  }

  export type SessionCreateWithoutDepotsInput = {
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    achats?: AchatCreateNestedManyWithoutSessionInput
    bilanVendeurSessions?: BilanVendeurSessionCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutDepotsInput = {
    idSession?: number
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    achats?: AchatUncheckedCreateNestedManyWithoutSessionInput
    bilanVendeurSessions?: BilanVendeurSessionUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutDepotsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutDepotsInput, SessionUncheckedCreateWithoutDepotsInput>
  }

  export type JeuCreateWithoutDepotInput = {
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    jeuxMarque?: JeuxMarqueCreateNestedOneWithoutJeuxDepotInput
    achat_jeux?: AchatJeuCreateNestedManyWithoutJeuInput
    depot_jeux?: DepotJeuCreateNestedManyWithoutJeuInput
  }

  export type JeuUncheckedCreateWithoutDepotInput = {
    JeuID?: number
    JeuRef_id: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    achat_jeux?: AchatJeuUncheckedCreateNestedManyWithoutJeuInput
    depot_jeux?: DepotJeuUncheckedCreateNestedManyWithoutJeuInput
  }

  export type JeuCreateOrConnectWithoutDepotInput = {
    where: JeuWhereUniqueInput
    create: XOR<JeuCreateWithoutDepotInput, JeuUncheckedCreateWithoutDepotInput>
  }

  export type JeuCreateManyDepotInputEnvelope = {
    data: JeuCreateManyDepotInput | JeuCreateManyDepotInput[]
    skipDuplicates?: boolean
  }

  export type DepotJeuCreateWithoutDepotInput = {
    quantite_depose: number
    comission_depot: number
    jeu: JeuCreateNestedOneWithoutDepot_jeuxInput
  }

  export type DepotJeuUncheckedCreateWithoutDepotInput = {
    JeuID: number
    quantite_depose: number
    comission_depot: number
  }

  export type DepotJeuCreateOrConnectWithoutDepotInput = {
    where: DepotJeuWhereUniqueInput
    create: XOR<DepotJeuCreateWithoutDepotInput, DepotJeuUncheckedCreateWithoutDepotInput>
  }

  export type DepotJeuCreateManyDepotInputEnvelope = {
    data: DepotJeuCreateManyDepotInput | DepotJeuCreateManyDepotInput[]
    skipDuplicates?: boolean
  }

  export type VendeurUpsertWithoutDepotsInput = {
    update: XOR<VendeurUpdateWithoutDepotsInput, VendeurUncheckedUpdateWithoutDepotsInput>
    create: XOR<VendeurCreateWithoutDepotsInput, VendeurUncheckedCreateWithoutDepotsInput>
    where?: VendeurWhereInput
  }

  export type VendeurUpdateToOneWithWhereWithoutDepotsInput = {
    where?: VendeurWhereInput
    data: XOR<VendeurUpdateWithoutDepotsInput, VendeurUncheckedUpdateWithoutDepotsInput>
  }

  export type VendeurUpdateWithoutDepotsInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Telephone?: StringFieldUpdateOperationsInput | string
    BilanVendeurSession?: BilanVendeurSessionUpdateManyWithoutVendeurNestedInput
  }

  export type VendeurUncheckedUpdateWithoutDepotsInput = {
    VendeurID?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Telephone?: StringFieldUpdateOperationsInput | string
    BilanVendeurSession?: BilanVendeurSessionUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type SessionUpsertWithoutDepotsInput = {
    update: XOR<SessionUpdateWithoutDepotsInput, SessionUncheckedUpdateWithoutDepotsInput>
    create: XOR<SessionCreateWithoutDepotsInput, SessionUncheckedCreateWithoutDepotsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutDepotsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutDepotsInput, SessionUncheckedUpdateWithoutDepotsInput>
  }

  export type SessionUpdateWithoutDepotsInput = {
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
    achats?: AchatUpdateManyWithoutSessionNestedInput
    bilanVendeurSessions?: BilanVendeurSessionUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutDepotsInput = {
    idSession?: IntFieldUpdateOperationsInput | number
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
    achats?: AchatUncheckedUpdateManyWithoutSessionNestedInput
    bilanVendeurSessions?: BilanVendeurSessionUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type JeuUpsertWithWhereUniqueWithoutDepotInput = {
    where: JeuWhereUniqueInput
    update: XOR<JeuUpdateWithoutDepotInput, JeuUncheckedUpdateWithoutDepotInput>
    create: XOR<JeuCreateWithoutDepotInput, JeuUncheckedCreateWithoutDepotInput>
  }

  export type JeuUpdateWithWhereUniqueWithoutDepotInput = {
    where: JeuWhereUniqueInput
    data: XOR<JeuUpdateWithoutDepotInput, JeuUncheckedUpdateWithoutDepotInput>
  }

  export type JeuUpdateManyWithWhereWithoutDepotInput = {
    where: JeuScalarWhereInput
    data: XOR<JeuUpdateManyMutationInput, JeuUncheckedUpdateManyWithoutDepotInput>
  }

  export type DepotJeuUpsertWithWhereUniqueWithoutDepotInput = {
    where: DepotJeuWhereUniqueInput
    update: XOR<DepotJeuUpdateWithoutDepotInput, DepotJeuUncheckedUpdateWithoutDepotInput>
    create: XOR<DepotJeuCreateWithoutDepotInput, DepotJeuUncheckedCreateWithoutDepotInput>
  }

  export type DepotJeuUpdateWithWhereUniqueWithoutDepotInput = {
    where: DepotJeuWhereUniqueInput
    data: XOR<DepotJeuUpdateWithoutDepotInput, DepotJeuUncheckedUpdateWithoutDepotInput>
  }

  export type DepotJeuUpdateManyWithWhereWithoutDepotInput = {
    where: DepotJeuScalarWhereInput
    data: XOR<DepotJeuUpdateManyMutationInput, DepotJeuUncheckedUpdateManyWithoutDepotInput>
  }

  export type DepotCreateWithoutVendeurInput = {
    date_depot: Date | string
    comission_depot_total: number
    session: SessionCreateNestedOneWithoutDepotsInput
    jeux?: JeuCreateNestedManyWithoutDepotInput
    depot_jeux?: DepotJeuCreateNestedManyWithoutDepotInput
  }

  export type DepotUncheckedCreateWithoutVendeurInput = {
    ID_depot?: number
    date_depot: Date | string
    id_session: number
    comission_depot_total: number
    jeux?: JeuUncheckedCreateNestedManyWithoutDepotInput
    depot_jeux?: DepotJeuUncheckedCreateNestedManyWithoutDepotInput
  }

  export type DepotCreateOrConnectWithoutVendeurInput = {
    where: DepotWhereUniqueInput
    create: XOR<DepotCreateWithoutVendeurInput, DepotUncheckedCreateWithoutVendeurInput>
  }

  export type DepotCreateManyVendeurInputEnvelope = {
    data: DepotCreateManyVendeurInput | DepotCreateManyVendeurInput[]
    skipDuplicates?: boolean
  }

  export type BilanVendeurSessionCreateWithoutVendeurInput = {
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
    session: SessionCreateNestedOneWithoutBilanVendeurSessionsInput
  }

  export type BilanVendeurSessionUncheckedCreateWithoutVendeurInput = {
    id_session: number
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
  }

  export type BilanVendeurSessionCreateOrConnectWithoutVendeurInput = {
    where: BilanVendeurSessionWhereUniqueInput
    create: XOR<BilanVendeurSessionCreateWithoutVendeurInput, BilanVendeurSessionUncheckedCreateWithoutVendeurInput>
  }

  export type BilanVendeurSessionCreateManyVendeurInputEnvelope = {
    data: BilanVendeurSessionCreateManyVendeurInput | BilanVendeurSessionCreateManyVendeurInput[]
    skipDuplicates?: boolean
  }

  export type DepotUpsertWithWhereUniqueWithoutVendeurInput = {
    where: DepotWhereUniqueInput
    update: XOR<DepotUpdateWithoutVendeurInput, DepotUncheckedUpdateWithoutVendeurInput>
    create: XOR<DepotCreateWithoutVendeurInput, DepotUncheckedCreateWithoutVendeurInput>
  }

  export type DepotUpdateWithWhereUniqueWithoutVendeurInput = {
    where: DepotWhereUniqueInput
    data: XOR<DepotUpdateWithoutVendeurInput, DepotUncheckedUpdateWithoutVendeurInput>
  }

  export type DepotUpdateManyWithWhereWithoutVendeurInput = {
    where: DepotScalarWhereInput
    data: XOR<DepotUpdateManyMutationInput, DepotUncheckedUpdateManyWithoutVendeurInput>
  }

  export type DepotScalarWhereInput = {
    AND?: DepotScalarWhereInput | DepotScalarWhereInput[]
    OR?: DepotScalarWhereInput[]
    NOT?: DepotScalarWhereInput | DepotScalarWhereInput[]
    ID_depot?: IntFilter<"Depot"> | number
    VendeurID?: IntFilter<"Depot"> | number
    date_depot?: DateTimeFilter<"Depot"> | Date | string
    id_session?: IntFilter<"Depot"> | number
    comission_depot_total?: FloatFilter<"Depot"> | number
  }

  export type BilanVendeurSessionUpsertWithWhereUniqueWithoutVendeurInput = {
    where: BilanVendeurSessionWhereUniqueInput
    update: XOR<BilanVendeurSessionUpdateWithoutVendeurInput, BilanVendeurSessionUncheckedUpdateWithoutVendeurInput>
    create: XOR<BilanVendeurSessionCreateWithoutVendeurInput, BilanVendeurSessionUncheckedCreateWithoutVendeurInput>
  }

  export type BilanVendeurSessionUpdateWithWhereUniqueWithoutVendeurInput = {
    where: BilanVendeurSessionWhereUniqueInput
    data: XOR<BilanVendeurSessionUpdateWithoutVendeurInput, BilanVendeurSessionUncheckedUpdateWithoutVendeurInput>
  }

  export type BilanVendeurSessionUpdateManyWithWhereWithoutVendeurInput = {
    where: BilanVendeurSessionScalarWhereInput
    data: XOR<BilanVendeurSessionUpdateManyMutationInput, BilanVendeurSessionUncheckedUpdateManyWithoutVendeurInput>
  }

  export type BilanVendeurSessionScalarWhereInput = {
    AND?: BilanVendeurSessionScalarWhereInput | BilanVendeurSessionScalarWhereInput[]
    OR?: BilanVendeurSessionScalarWhereInput[]
    NOT?: BilanVendeurSessionScalarWhereInput | BilanVendeurSessionScalarWhereInput[]
    id_vendeur?: IntFilter<"BilanVendeurSession"> | number
    id_session?: IntFilter<"BilanVendeurSession"> | number
    total_depots?: IntFilter<"BilanVendeurSession"> | number
    total_ventes?: IntFilter<"BilanVendeurSession"> | number
    total_stocks?: IntFilter<"BilanVendeurSession"> | number
    total_gains?: FloatFilter<"BilanVendeurSession"> | number
    total_comissions?: FloatFilter<"BilanVendeurSession"> | number
  }

  export type DepotCreateWithoutDepot_jeuxInput = {
    date_depot: Date | string
    comission_depot_total: number
    vendeur: VendeurCreateNestedOneWithoutDepotsInput
    session: SessionCreateNestedOneWithoutDepotsInput
    jeux?: JeuCreateNestedManyWithoutDepotInput
  }

  export type DepotUncheckedCreateWithoutDepot_jeuxInput = {
    ID_depot?: number
    VendeurID: number
    date_depot: Date | string
    id_session: number
    comission_depot_total: number
    jeux?: JeuUncheckedCreateNestedManyWithoutDepotInput
  }

  export type DepotCreateOrConnectWithoutDepot_jeuxInput = {
    where: DepotWhereUniqueInput
    create: XOR<DepotCreateWithoutDepot_jeuxInput, DepotUncheckedCreateWithoutDepot_jeuxInput>
  }

  export type JeuCreateWithoutDepot_jeuxInput = {
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    depot: DepotCreateNestedOneWithoutJeuxInput
    jeuxMarque?: JeuxMarqueCreateNestedOneWithoutJeuxDepotInput
    achat_jeux?: AchatJeuCreateNestedManyWithoutJeuInput
  }

  export type JeuUncheckedCreateWithoutDepot_jeuxInput = {
    JeuID?: number
    JeuRef_id: number
    depot_ID: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    achat_jeux?: AchatJeuUncheckedCreateNestedManyWithoutJeuInput
  }

  export type JeuCreateOrConnectWithoutDepot_jeuxInput = {
    where: JeuWhereUniqueInput
    create: XOR<JeuCreateWithoutDepot_jeuxInput, JeuUncheckedCreateWithoutDepot_jeuxInput>
  }

  export type DepotUpsertWithoutDepot_jeuxInput = {
    update: XOR<DepotUpdateWithoutDepot_jeuxInput, DepotUncheckedUpdateWithoutDepot_jeuxInput>
    create: XOR<DepotCreateWithoutDepot_jeuxInput, DepotUncheckedCreateWithoutDepot_jeuxInput>
    where?: DepotWhereInput
  }

  export type DepotUpdateToOneWithWhereWithoutDepot_jeuxInput = {
    where?: DepotWhereInput
    data: XOR<DepotUpdateWithoutDepot_jeuxInput, DepotUncheckedUpdateWithoutDepot_jeuxInput>
  }

  export type DepotUpdateWithoutDepot_jeuxInput = {
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    vendeur?: VendeurUpdateOneRequiredWithoutDepotsNestedInput
    session?: SessionUpdateOneRequiredWithoutDepotsNestedInput
    jeux?: JeuUpdateManyWithoutDepotNestedInput
  }

  export type DepotUncheckedUpdateWithoutDepot_jeuxInput = {
    ID_depot?: IntFieldUpdateOperationsInput | number
    VendeurID?: IntFieldUpdateOperationsInput | number
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    id_session?: IntFieldUpdateOperationsInput | number
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    jeux?: JeuUncheckedUpdateManyWithoutDepotNestedInput
  }

  export type JeuUpsertWithoutDepot_jeuxInput = {
    update: XOR<JeuUpdateWithoutDepot_jeuxInput, JeuUncheckedUpdateWithoutDepot_jeuxInput>
    create: XOR<JeuCreateWithoutDepot_jeuxInput, JeuUncheckedCreateWithoutDepot_jeuxInput>
    where?: JeuWhereInput
  }

  export type JeuUpdateToOneWithWhereWithoutDepot_jeuxInput = {
    where?: JeuWhereInput
    data: XOR<JeuUpdateWithoutDepot_jeuxInput, JeuUncheckedUpdateWithoutDepot_jeuxInput>
  }

  export type JeuUpdateWithoutDepot_jeuxInput = {
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    depot?: DepotUpdateOneRequiredWithoutJeuxNestedInput
    jeuxMarque?: JeuxMarqueUpdateOneWithoutJeuxDepotNestedInput
    achat_jeux?: AchatJeuUpdateManyWithoutJeuNestedInput
  }

  export type JeuUncheckedUpdateWithoutDepot_jeuxInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    depot_ID?: IntFieldUpdateOperationsInput | number
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    achat_jeux?: AchatJeuUncheckedUpdateManyWithoutJeuNestedInput
  }

  export type SessionCreateWithoutAchatsInput = {
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    depots?: DepotCreateNestedManyWithoutSessionInput
    bilanVendeurSessions?: BilanVendeurSessionCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutAchatsInput = {
    idSession?: number
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    depots?: DepotUncheckedCreateNestedManyWithoutSessionInput
    bilanVendeurSessions?: BilanVendeurSessionUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutAchatsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutAchatsInput, SessionUncheckedCreateWithoutAchatsInput>
  }

  export type AchatJeuCreateWithoutAchatInput = {
    comission_vente: number
    quantite_achete: number
    jeu: JeuCreateNestedOneWithoutAchat_jeuxInput
  }

  export type AchatJeuUncheckedCreateWithoutAchatInput = {
    JeuID: number
    comission_vente: number
    quantite_achete: number
  }

  export type AchatJeuCreateOrConnectWithoutAchatInput = {
    where: AchatJeuWhereUniqueInput
    create: XOR<AchatJeuCreateWithoutAchatInput, AchatJeuUncheckedCreateWithoutAchatInput>
  }

  export type AchatJeuCreateManyAchatInputEnvelope = {
    data: AchatJeuCreateManyAchatInput | AchatJeuCreateManyAchatInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithoutAchatsInput = {
    update: XOR<SessionUpdateWithoutAchatsInput, SessionUncheckedUpdateWithoutAchatsInput>
    create: XOR<SessionCreateWithoutAchatsInput, SessionUncheckedCreateWithoutAchatsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutAchatsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutAchatsInput, SessionUncheckedUpdateWithoutAchatsInput>
  }

  export type SessionUpdateWithoutAchatsInput = {
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
    depots?: DepotUpdateManyWithoutSessionNestedInput
    bilanVendeurSessions?: BilanVendeurSessionUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutAchatsInput = {
    idSession?: IntFieldUpdateOperationsInput | number
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
    depots?: DepotUncheckedUpdateManyWithoutSessionNestedInput
    bilanVendeurSessions?: BilanVendeurSessionUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type AchatJeuUpsertWithWhereUniqueWithoutAchatInput = {
    where: AchatJeuWhereUniqueInput
    update: XOR<AchatJeuUpdateWithoutAchatInput, AchatJeuUncheckedUpdateWithoutAchatInput>
    create: XOR<AchatJeuCreateWithoutAchatInput, AchatJeuUncheckedCreateWithoutAchatInput>
  }

  export type AchatJeuUpdateWithWhereUniqueWithoutAchatInput = {
    where: AchatJeuWhereUniqueInput
    data: XOR<AchatJeuUpdateWithoutAchatInput, AchatJeuUncheckedUpdateWithoutAchatInput>
  }

  export type AchatJeuUpdateManyWithWhereWithoutAchatInput = {
    where: AchatJeuScalarWhereInput
    data: XOR<AchatJeuUpdateManyMutationInput, AchatJeuUncheckedUpdateManyWithoutAchatInput>
  }

  export type AchatCreateWithoutAchat_jeuxInput = {
    Total_paye: number
    DateAchat: Date | string
    comission_vente_total: number
    session: SessionCreateNestedOneWithoutAchatsInput
  }

  export type AchatUncheckedCreateWithoutAchat_jeuxInput = {
    AchatID?: number
    Total_paye: number
    id_session: number
    DateAchat: Date | string
    comission_vente_total: number
  }

  export type AchatCreateOrConnectWithoutAchat_jeuxInput = {
    where: AchatWhereUniqueInput
    create: XOR<AchatCreateWithoutAchat_jeuxInput, AchatUncheckedCreateWithoutAchat_jeuxInput>
  }

  export type JeuCreateWithoutAchat_jeuxInput = {
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    depot: DepotCreateNestedOneWithoutJeuxInput
    jeuxMarque?: JeuxMarqueCreateNestedOneWithoutJeuxDepotInput
    depot_jeux?: DepotJeuCreateNestedManyWithoutJeuInput
  }

  export type JeuUncheckedCreateWithoutAchat_jeuxInput = {
    JeuID?: number
    JeuRef_id: number
    depot_ID: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
    depot_jeux?: DepotJeuUncheckedCreateNestedManyWithoutJeuInput
  }

  export type JeuCreateOrConnectWithoutAchat_jeuxInput = {
    where: JeuWhereUniqueInput
    create: XOR<JeuCreateWithoutAchat_jeuxInput, JeuUncheckedCreateWithoutAchat_jeuxInput>
  }

  export type AchatUpsertWithoutAchat_jeuxInput = {
    update: XOR<AchatUpdateWithoutAchat_jeuxInput, AchatUncheckedUpdateWithoutAchat_jeuxInput>
    create: XOR<AchatCreateWithoutAchat_jeuxInput, AchatUncheckedCreateWithoutAchat_jeuxInput>
    where?: AchatWhereInput
  }

  export type AchatUpdateToOneWithWhereWithoutAchat_jeuxInput = {
    where?: AchatWhereInput
    data: XOR<AchatUpdateWithoutAchat_jeuxInput, AchatUncheckedUpdateWithoutAchat_jeuxInput>
  }

  export type AchatUpdateWithoutAchat_jeuxInput = {
    Total_paye?: FloatFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
    session?: SessionUpdateOneRequiredWithoutAchatsNestedInput
  }

  export type AchatUncheckedUpdateWithoutAchat_jeuxInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    Total_paye?: FloatFieldUpdateOperationsInput | number
    id_session?: IntFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
  }

  export type JeuUpsertWithoutAchat_jeuxInput = {
    update: XOR<JeuUpdateWithoutAchat_jeuxInput, JeuUncheckedUpdateWithoutAchat_jeuxInput>
    create: XOR<JeuCreateWithoutAchat_jeuxInput, JeuUncheckedCreateWithoutAchat_jeuxInput>
    where?: JeuWhereInput
  }

  export type JeuUpdateToOneWithWhereWithoutAchat_jeuxInput = {
    where?: JeuWhereInput
    data: XOR<JeuUpdateWithoutAchat_jeuxInput, JeuUncheckedUpdateWithoutAchat_jeuxInput>
  }

  export type JeuUpdateWithoutAchat_jeuxInput = {
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    depot?: DepotUpdateOneRequiredWithoutJeuxNestedInput
    jeuxMarque?: JeuxMarqueUpdateOneWithoutJeuxDepotNestedInput
    depot_jeux?: DepotJeuUpdateManyWithoutJeuNestedInput
  }

  export type JeuUncheckedUpdateWithoutAchat_jeuxInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    depot_ID?: IntFieldUpdateOperationsInput | number
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    depot_jeux?: DepotJeuUncheckedUpdateManyWithoutJeuNestedInput
  }

  export type AchatCreateWithoutSessionInput = {
    Total_paye: number
    DateAchat: Date | string
    comission_vente_total: number
    achat_jeux?: AchatJeuCreateNestedManyWithoutAchatInput
  }

  export type AchatUncheckedCreateWithoutSessionInput = {
    AchatID?: number
    Total_paye: number
    DateAchat: Date | string
    comission_vente_total: number
    achat_jeux?: AchatJeuUncheckedCreateNestedManyWithoutAchatInput
  }

  export type AchatCreateOrConnectWithoutSessionInput = {
    where: AchatWhereUniqueInput
    create: XOR<AchatCreateWithoutSessionInput, AchatUncheckedCreateWithoutSessionInput>
  }

  export type AchatCreateManySessionInputEnvelope = {
    data: AchatCreateManySessionInput | AchatCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type DepotCreateWithoutSessionInput = {
    date_depot: Date | string
    comission_depot_total: number
    vendeur: VendeurCreateNestedOneWithoutDepotsInput
    jeux?: JeuCreateNestedManyWithoutDepotInput
    depot_jeux?: DepotJeuCreateNestedManyWithoutDepotInput
  }

  export type DepotUncheckedCreateWithoutSessionInput = {
    ID_depot?: number
    VendeurID: number
    date_depot: Date | string
    comission_depot_total: number
    jeux?: JeuUncheckedCreateNestedManyWithoutDepotInput
    depot_jeux?: DepotJeuUncheckedCreateNestedManyWithoutDepotInput
  }

  export type DepotCreateOrConnectWithoutSessionInput = {
    where: DepotWhereUniqueInput
    create: XOR<DepotCreateWithoutSessionInput, DepotUncheckedCreateWithoutSessionInput>
  }

  export type DepotCreateManySessionInputEnvelope = {
    data: DepotCreateManySessionInput | DepotCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type BilanVendeurSessionCreateWithoutSessionInput = {
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
    vendeur: VendeurCreateNestedOneWithoutBilanVendeurSessionInput
  }

  export type BilanVendeurSessionUncheckedCreateWithoutSessionInput = {
    id_vendeur: number
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
  }

  export type BilanVendeurSessionCreateOrConnectWithoutSessionInput = {
    where: BilanVendeurSessionWhereUniqueInput
    create: XOR<BilanVendeurSessionCreateWithoutSessionInput, BilanVendeurSessionUncheckedCreateWithoutSessionInput>
  }

  export type BilanVendeurSessionCreateManySessionInputEnvelope = {
    data: BilanVendeurSessionCreateManySessionInput | BilanVendeurSessionCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type AchatUpsertWithWhereUniqueWithoutSessionInput = {
    where: AchatWhereUniqueInput
    update: XOR<AchatUpdateWithoutSessionInput, AchatUncheckedUpdateWithoutSessionInput>
    create: XOR<AchatCreateWithoutSessionInput, AchatUncheckedCreateWithoutSessionInput>
  }

  export type AchatUpdateWithWhereUniqueWithoutSessionInput = {
    where: AchatWhereUniqueInput
    data: XOR<AchatUpdateWithoutSessionInput, AchatUncheckedUpdateWithoutSessionInput>
  }

  export type AchatUpdateManyWithWhereWithoutSessionInput = {
    where: AchatScalarWhereInput
    data: XOR<AchatUpdateManyMutationInput, AchatUncheckedUpdateManyWithoutSessionInput>
  }

  export type AchatScalarWhereInput = {
    AND?: AchatScalarWhereInput | AchatScalarWhereInput[]
    OR?: AchatScalarWhereInput[]
    NOT?: AchatScalarWhereInput | AchatScalarWhereInput[]
    AchatID?: IntFilter<"Achat"> | number
    Total_paye?: FloatFilter<"Achat"> | number
    id_session?: IntFilter<"Achat"> | number
    DateAchat?: DateTimeFilter<"Achat"> | Date | string
    comission_vente_total?: FloatFilter<"Achat"> | number
  }

  export type DepotUpsertWithWhereUniqueWithoutSessionInput = {
    where: DepotWhereUniqueInput
    update: XOR<DepotUpdateWithoutSessionInput, DepotUncheckedUpdateWithoutSessionInput>
    create: XOR<DepotCreateWithoutSessionInput, DepotUncheckedCreateWithoutSessionInput>
  }

  export type DepotUpdateWithWhereUniqueWithoutSessionInput = {
    where: DepotWhereUniqueInput
    data: XOR<DepotUpdateWithoutSessionInput, DepotUncheckedUpdateWithoutSessionInput>
  }

  export type DepotUpdateManyWithWhereWithoutSessionInput = {
    where: DepotScalarWhereInput
    data: XOR<DepotUpdateManyMutationInput, DepotUncheckedUpdateManyWithoutSessionInput>
  }

  export type BilanVendeurSessionUpsertWithWhereUniqueWithoutSessionInput = {
    where: BilanVendeurSessionWhereUniqueInput
    update: XOR<BilanVendeurSessionUpdateWithoutSessionInput, BilanVendeurSessionUncheckedUpdateWithoutSessionInput>
    create: XOR<BilanVendeurSessionCreateWithoutSessionInput, BilanVendeurSessionUncheckedCreateWithoutSessionInput>
  }

  export type BilanVendeurSessionUpdateWithWhereUniqueWithoutSessionInput = {
    where: BilanVendeurSessionWhereUniqueInput
    data: XOR<BilanVendeurSessionUpdateWithoutSessionInput, BilanVendeurSessionUncheckedUpdateWithoutSessionInput>
  }

  export type BilanVendeurSessionUpdateManyWithWhereWithoutSessionInput = {
    where: BilanVendeurSessionScalarWhereInput
    data: XOR<BilanVendeurSessionUpdateManyMutationInput, BilanVendeurSessionUncheckedUpdateManyWithoutSessionInput>
  }

  export type VendeurCreateWithoutBilanVendeurSessionInput = {
    Nom: string
    Email: string
    Telephone: string
    depots?: DepotCreateNestedManyWithoutVendeurInput
  }

  export type VendeurUncheckedCreateWithoutBilanVendeurSessionInput = {
    VendeurID?: number
    Nom: string
    Email: string
    Telephone: string
    depots?: DepotUncheckedCreateNestedManyWithoutVendeurInput
  }

  export type VendeurCreateOrConnectWithoutBilanVendeurSessionInput = {
    where: VendeurWhereUniqueInput
    create: XOR<VendeurCreateWithoutBilanVendeurSessionInput, VendeurUncheckedCreateWithoutBilanVendeurSessionInput>
  }

  export type SessionCreateWithoutBilanVendeurSessionsInput = {
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    achats?: AchatCreateNestedManyWithoutSessionInput
    depots?: DepotCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateWithoutBilanVendeurSessionsInput = {
    idSession?: number
    NomSession: string
    DateDebut: Date | string
    DateFin?: Date | string | null
    pourc_frais_depot: number
    pourc_frais_vente: number
    Statut: boolean
    achats?: AchatUncheckedCreateNestedManyWithoutSessionInput
    depots?: DepotUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionCreateOrConnectWithoutBilanVendeurSessionsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutBilanVendeurSessionsInput, SessionUncheckedCreateWithoutBilanVendeurSessionsInput>
  }

  export type VendeurUpsertWithoutBilanVendeurSessionInput = {
    update: XOR<VendeurUpdateWithoutBilanVendeurSessionInput, VendeurUncheckedUpdateWithoutBilanVendeurSessionInput>
    create: XOR<VendeurCreateWithoutBilanVendeurSessionInput, VendeurUncheckedCreateWithoutBilanVendeurSessionInput>
    where?: VendeurWhereInput
  }

  export type VendeurUpdateToOneWithWhereWithoutBilanVendeurSessionInput = {
    where?: VendeurWhereInput
    data: XOR<VendeurUpdateWithoutBilanVendeurSessionInput, VendeurUncheckedUpdateWithoutBilanVendeurSessionInput>
  }

  export type VendeurUpdateWithoutBilanVendeurSessionInput = {
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Telephone?: StringFieldUpdateOperationsInput | string
    depots?: DepotUpdateManyWithoutVendeurNestedInput
  }

  export type VendeurUncheckedUpdateWithoutBilanVendeurSessionInput = {
    VendeurID?: IntFieldUpdateOperationsInput | number
    Nom?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Telephone?: StringFieldUpdateOperationsInput | string
    depots?: DepotUncheckedUpdateManyWithoutVendeurNestedInput
  }

  export type SessionUpsertWithoutBilanVendeurSessionsInput = {
    update: XOR<SessionUpdateWithoutBilanVendeurSessionsInput, SessionUncheckedUpdateWithoutBilanVendeurSessionsInput>
    create: XOR<SessionCreateWithoutBilanVendeurSessionsInput, SessionUncheckedCreateWithoutBilanVendeurSessionsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutBilanVendeurSessionsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutBilanVendeurSessionsInput, SessionUncheckedUpdateWithoutBilanVendeurSessionsInput>
  }

  export type SessionUpdateWithoutBilanVendeurSessionsInput = {
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
    achats?: AchatUpdateManyWithoutSessionNestedInput
    depots?: DepotUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateWithoutBilanVendeurSessionsInput = {
    idSession?: IntFieldUpdateOperationsInput | number
    NomSession?: StringFieldUpdateOperationsInput | string
    DateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    DateFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pourc_frais_depot?: FloatFieldUpdateOperationsInput | number
    pourc_frais_vente?: FloatFieldUpdateOperationsInput | number
    Statut?: BoolFieldUpdateOperationsInput | boolean
    achats?: AchatUncheckedUpdateManyWithoutSessionNestedInput
    depots?: DepotUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type JeuCreateManyJeuxMarqueInput = {
    JeuID?: number
    depot_ID: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
  }

  export type JeuUpdateWithoutJeuxMarqueInput = {
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    depot?: DepotUpdateOneRequiredWithoutJeuxNestedInput
    achat_jeux?: AchatJeuUpdateManyWithoutJeuNestedInput
    depot_jeux?: DepotJeuUpdateManyWithoutJeuNestedInput
  }

  export type JeuUncheckedUpdateWithoutJeuxMarqueInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    depot_ID?: IntFieldUpdateOperationsInput | number
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    achat_jeux?: AchatJeuUncheckedUpdateManyWithoutJeuNestedInput
    depot_jeux?: DepotJeuUncheckedUpdateManyWithoutJeuNestedInput
  }

  export type JeuUncheckedUpdateManyWithoutJeuxMarqueInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    depot_ID?: IntFieldUpdateOperationsInput | number
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
  }

  export type AchatJeuCreateManyJeuInput = {
    AchatID: number
    comission_vente: number
    quantite_achete: number
  }

  export type DepotJeuCreateManyJeuInput = {
    depot_ID: number
    quantite_depose: number
    comission_depot: number
  }

  export type AchatJeuUpdateWithoutJeuInput = {
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
    achat?: AchatUpdateOneRequiredWithoutAchat_jeuxNestedInput
  }

  export type AchatJeuUncheckedUpdateWithoutJeuInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
  }

  export type AchatJeuUncheckedUpdateManyWithoutJeuInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
  }

  export type DepotJeuUpdateWithoutJeuInput = {
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
    depot?: DepotUpdateOneRequiredWithoutDepot_jeuxNestedInput
  }

  export type DepotJeuUncheckedUpdateWithoutJeuInput = {
    depot_ID?: IntFieldUpdateOperationsInput | number
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
  }

  export type DepotJeuUncheckedUpdateManyWithoutJeuInput = {
    depot_ID?: IntFieldUpdateOperationsInput | number
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
  }

  export type JeuCreateManyDepotInput = {
    JeuID?: number
    JeuRef_id: number
    prix_unitaire: number
    mise_en_vente: boolean
    quantite_disponible: number
  }

  export type DepotJeuCreateManyDepotInput = {
    JeuID: number
    quantite_depose: number
    comission_depot: number
  }

  export type JeuUpdateWithoutDepotInput = {
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    jeuxMarque?: JeuxMarqueUpdateOneWithoutJeuxDepotNestedInput
    achat_jeux?: AchatJeuUpdateManyWithoutJeuNestedInput
    depot_jeux?: DepotJeuUpdateManyWithoutJeuNestedInput
  }

  export type JeuUncheckedUpdateWithoutDepotInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
    achat_jeux?: AchatJeuUncheckedUpdateManyWithoutJeuNestedInput
    depot_jeux?: DepotJeuUncheckedUpdateManyWithoutJeuNestedInput
  }

  export type JeuUncheckedUpdateManyWithoutDepotInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    JeuRef_id?: IntFieldUpdateOperationsInput | number
    prix_unitaire?: FloatFieldUpdateOperationsInput | number
    mise_en_vente?: BoolFieldUpdateOperationsInput | boolean
    quantite_disponible?: IntFieldUpdateOperationsInput | number
  }

  export type DepotJeuUpdateWithoutDepotInput = {
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
    jeu?: JeuUpdateOneRequiredWithoutDepot_jeuxNestedInput
  }

  export type DepotJeuUncheckedUpdateWithoutDepotInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
  }

  export type DepotJeuUncheckedUpdateManyWithoutDepotInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    quantite_depose?: IntFieldUpdateOperationsInput | number
    comission_depot?: FloatFieldUpdateOperationsInput | number
  }

  export type DepotCreateManyVendeurInput = {
    ID_depot?: number
    date_depot: Date | string
    id_session: number
    comission_depot_total: number
  }

  export type BilanVendeurSessionCreateManyVendeurInput = {
    id_session: number
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
  }

  export type DepotUpdateWithoutVendeurInput = {
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    session?: SessionUpdateOneRequiredWithoutDepotsNestedInput
    jeux?: JeuUpdateManyWithoutDepotNestedInput
    depot_jeux?: DepotJeuUpdateManyWithoutDepotNestedInput
  }

  export type DepotUncheckedUpdateWithoutVendeurInput = {
    ID_depot?: IntFieldUpdateOperationsInput | number
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    id_session?: IntFieldUpdateOperationsInput | number
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    jeux?: JeuUncheckedUpdateManyWithoutDepotNestedInput
    depot_jeux?: DepotJeuUncheckedUpdateManyWithoutDepotNestedInput
  }

  export type DepotUncheckedUpdateManyWithoutVendeurInput = {
    ID_depot?: IntFieldUpdateOperationsInput | number
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    id_session?: IntFieldUpdateOperationsInput | number
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
  }

  export type BilanVendeurSessionUpdateWithoutVendeurInput = {
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
    session?: SessionUpdateOneRequiredWithoutBilanVendeurSessionsNestedInput
  }

  export type BilanVendeurSessionUncheckedUpdateWithoutVendeurInput = {
    id_session?: IntFieldUpdateOperationsInput | number
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
  }

  export type BilanVendeurSessionUncheckedUpdateManyWithoutVendeurInput = {
    id_session?: IntFieldUpdateOperationsInput | number
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
  }

  export type AchatJeuCreateManyAchatInput = {
    JeuID: number
    comission_vente: number
    quantite_achete: number
  }

  export type AchatJeuUpdateWithoutAchatInput = {
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
    jeu?: JeuUpdateOneRequiredWithoutAchat_jeuxNestedInput
  }

  export type AchatJeuUncheckedUpdateWithoutAchatInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
  }

  export type AchatJeuUncheckedUpdateManyWithoutAchatInput = {
    JeuID?: IntFieldUpdateOperationsInput | number
    comission_vente?: FloatFieldUpdateOperationsInput | number
    quantite_achete?: IntFieldUpdateOperationsInput | number
  }

  export type AchatCreateManySessionInput = {
    AchatID?: number
    Total_paye: number
    DateAchat: Date | string
    comission_vente_total: number
  }

  export type DepotCreateManySessionInput = {
    ID_depot?: number
    VendeurID: number
    date_depot: Date | string
    comission_depot_total: number
  }

  export type BilanVendeurSessionCreateManySessionInput = {
    id_vendeur: number
    total_depots: number
    total_ventes: number
    total_stocks: number
    total_gains: number
    total_comissions: number
  }

  export type AchatUpdateWithoutSessionInput = {
    Total_paye?: FloatFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
    achat_jeux?: AchatJeuUpdateManyWithoutAchatNestedInput
  }

  export type AchatUncheckedUpdateWithoutSessionInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    Total_paye?: FloatFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
    achat_jeux?: AchatJeuUncheckedUpdateManyWithoutAchatNestedInput
  }

  export type AchatUncheckedUpdateManyWithoutSessionInput = {
    AchatID?: IntFieldUpdateOperationsInput | number
    Total_paye?: FloatFieldUpdateOperationsInput | number
    DateAchat?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_vente_total?: FloatFieldUpdateOperationsInput | number
  }

  export type DepotUpdateWithoutSessionInput = {
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    vendeur?: VendeurUpdateOneRequiredWithoutDepotsNestedInput
    jeux?: JeuUpdateManyWithoutDepotNestedInput
    depot_jeux?: DepotJeuUpdateManyWithoutDepotNestedInput
  }

  export type DepotUncheckedUpdateWithoutSessionInput = {
    ID_depot?: IntFieldUpdateOperationsInput | number
    VendeurID?: IntFieldUpdateOperationsInput | number
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
    jeux?: JeuUncheckedUpdateManyWithoutDepotNestedInput
    depot_jeux?: DepotJeuUncheckedUpdateManyWithoutDepotNestedInput
  }

  export type DepotUncheckedUpdateManyWithoutSessionInput = {
    ID_depot?: IntFieldUpdateOperationsInput | number
    VendeurID?: IntFieldUpdateOperationsInput | number
    date_depot?: DateTimeFieldUpdateOperationsInput | Date | string
    comission_depot_total?: FloatFieldUpdateOperationsInput | number
  }

  export type BilanVendeurSessionUpdateWithoutSessionInput = {
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
    vendeur?: VendeurUpdateOneRequiredWithoutBilanVendeurSessionNestedInput
  }

  export type BilanVendeurSessionUncheckedUpdateWithoutSessionInput = {
    id_vendeur?: IntFieldUpdateOperationsInput | number
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
  }

  export type BilanVendeurSessionUncheckedUpdateManyWithoutSessionInput = {
    id_vendeur?: IntFieldUpdateOperationsInput | number
    total_depots?: IntFieldUpdateOperationsInput | number
    total_ventes?: IntFieldUpdateOperationsInput | number
    total_stocks?: IntFieldUpdateOperationsInput | number
    total_gains?: FloatFieldUpdateOperationsInput | number
    total_comissions?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use JeuxMarqueCountOutputTypeDefaultArgs instead
     */
    export type JeuxMarqueCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JeuxMarqueCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JeuCountOutputTypeDefaultArgs instead
     */
    export type JeuCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JeuCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepotCountOutputTypeDefaultArgs instead
     */
    export type DepotCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepotCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendeurCountOutputTypeDefaultArgs instead
     */
    export type VendeurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendeurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchatCountOutputTypeDefaultArgs instead
     */
    export type AchatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionCountOutputTypeDefaultArgs instead
     */
    export type SessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JeuxMarqueDefaultArgs instead
     */
    export type JeuxMarqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JeuxMarqueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JeuDefaultArgs instead
     */
    export type JeuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JeuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepotDefaultArgs instead
     */
    export type DepotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepotDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VendeurDefaultArgs instead
     */
    export type VendeurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VendeurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepotJeuDefaultArgs instead
     */
    export type DepotJeuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepotJeuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchatDefaultArgs instead
     */
    export type AchatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AchatJeuDefaultArgs instead
     */
    export type AchatJeuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AchatJeuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilisateurDefaultArgs instead
     */
    export type UtilisateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilisateurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BilanVendeurSessionDefaultArgs instead
     */
    export type BilanVendeurSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BilanVendeurSessionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}